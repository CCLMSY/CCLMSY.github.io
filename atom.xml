<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CCLMSY💫</title>
  
  
  <link href="https://www.cclmsy.cc/atom.xml" rel="self"/>
  
  <link href="https://www.cclmsy.cc/"/>
  <updated>2025-02-22T13:55:22.520Z</updated>
  <id>https://www.cclmsy.cc/</id>
  
  <author>
    <name>深翼💫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习笔记3-卷积神经网络CNN</title>
    <link href="https://www.cclmsy.cc/posts/Deep_Learning03.html"/>
    <id>https://www.cclmsy.cc/posts/Deep_Learning03.html</id>
    <published>2025-02-22T10:00:00.000Z</published>
    <updated>2025-02-22T13:55:22.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-图像数据与边缘检测">3.1 图像数据与边缘检测</h2><h3 id="3-1-1-图像数据">3.1.1 图像数据</h3><p>在CV领域，通常要做的是用机器程序代替人眼对目标图像进行识别、分析、处理。<br>深度学习在CV领域的应用非常广泛。</p><p>假设需要处理1024x1024的彩色图像，每个像素有RGB三个通道，共有1024x1024x3=3,145,728个特征。<br>假设第一个隐藏层有10个神经元，那么第一层的权重矩阵有3,145,728x10=31,457,280个参数，计算量极大，难以达到好的效果。</p><p>相比多层神经网络，卷积神经网络（CNN）更适合处理图像数据。</p><h3 id="3-1-2-感受野（Receptive-Field）">3.1.2 感受野（Receptive Field）</h3><p>1962年Hubel和Wiesel通过对猫视觉皮层细胞的研究，提出了感受野的概念。<br>Fukushima基于感受野概念提出的神经认知机(Neocognitron)可以看作是卷积神经网络的第一个实现网络。</p><p>单个感受器与许多感觉神经纤维相联系，感觉信息是通过许多感受神经纤维发放总和性的空间与时间类型不同的冲动，相当于经过编码来传递。</p><h3 id="3-1-3-边缘运算">3.1.3 边缘运算</h3><p>为了使用更少的参数检测出更多的信息，通常神经网络需要检测出物体最明显的垂直和水平边缘来区分物体。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B.png" alt="边缘检测"></p><p>随着深度学习的发展，我们需要检测更复杂的图像中的边缘。<br>与其使用由人手工设计的过滤器，还可以将过滤器中的数值作为参数，通过反向传播来学习得到。<br>算法可以根据实际数据来选择合适的检测目标，无论是检测水平边缘、垂直边缘还是其他角度的边缘，并习得图像的低层特征。</p><h2 id="3-2-卷积神经网络原理">3.2 卷积神经网络原理</h2><h3 id="3-2-1-卷积神经网络的组成">3.2.1 卷积神经网络的组成</h3><p>CNN由一个或多个卷积层、池化层、全连接层组成。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/CNN%E7%BB%93%E6%9E%84.png" alt="CNN结构"></p><p>与其他深度学习结构相比，CNN在图像等方面能够给出更好的结果。<br>CNN也可以用反向传播算法进行训练。<br>与其他浅层或深层神经网络相比，CNN的参数更少，更容易训练。</p><h3 id="3-2-2-卷积层（Convolutions）">3.2.2 卷积层（Convolutions）</h3><ul><li>目的：提取输入的不同特征<ul><li>某些卷积层可能只能提取一些低级特征，如线条、边缘等，更多层的网络能从低级特征中提取更高级更复杂的特征。</li></ul></li><li>参数<ul><li>size：卷积核（filter）大小，如3x3、5x5等</li><li>padding：0填充，保持输出和输入的大小一致，Valid/Same</li><li>stride：步长，卷积核每次移动的距离，通常为1</li></ul></li><li>计算公式<ul><li>四个超参数：Filter数量$K$、Filter大小$F$、步长$S$、0填充大小$P$</li><li>输入体积：$H_1 \times W_1 \times D_1$</li><li>输出体积：$H_2 \times W_2 \times D_2$<ul><li>$H_2 = \dfrac{H_1-F+2P}{S}+1$</li><li>$W_2 = \dfrac{W_1-F+2P}{S}+1$</li><li>$D_2 = K$</li></ul></li></ul></li></ul><h4 id="3-2-2-1-卷积运算">3.2.2.1 卷积运算</h4><p>卷积运算（符号$\ast$）：将一个矩阵（卷积核）应用到另一个矩阵的所有位置，求出每个位置的点积，得到一个新的矩阵。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E5%8D%B7%E7%A7%AF%E8%BF%90%E7%AE%97.png" alt="卷积运算"></p><p>在这个6x6的矩阵中，左边一半都是1，右边一半都是0，中间是一条非常明显的垂直边缘。<br>经过卷积后，得到一个4x4的矩阵，中间的值非常大，其他值非常小，表明检测到了垂直边缘。</p><p>卷积运算的产生的问题：边缘像素的信息丢失、输出的图像尺寸变小</p><h4 id="3-2-2-2-padding-零填充">3.2.2.2 padding-零填充</h4><p>在图片像素的最外层加上$P$层0，使得卷积后的输出和输入的尺寸一致。</p><p>0对最终结果不产生影响，避免图片增加噪声。</p><ul><li>Valid卷积：不填充，输出尺寸减小</li><li>Same卷积（一般采用）：填充0以维持输出尺寸与原图一致</li></ul><h4 id="3-2-2-3-size-卷积核大小">3.2.2.3 size-卷积核大小</h4><p>卷积核大小$F$通常为3x3、5x5、7x7等奇数，保证能够确定一个中心点。</p><p>小卷积核可以保留更多的信息，大卷积核可以检测更大的特征。</p><h4 id="3-2-2-4-stride-步长">3.2.2.4 stride-步长</h4><p>步长$S$通常为1，即卷积核每次移动一个像素。</p><p>步长为2时，卷积核每次移动两个像素，输出尺寸减小，示例如下：</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/2%E6%AD%A5%E9%95%BF%E5%8D%B7%E7%A7%AF.png" alt="2步长卷积"></p><h4 id="3-2-2-5-多通道卷积">3.2.2.5 多通道卷积</h4><p>当输入有多个通道（Channel）时（例如图片可以有 RGB 三个通道），卷积核需要拥有相同的通道数</p><p>但最终的输出只有一个通道，其结果是多个通道的卷积结果的和。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E5%A4%9A%E9%80%9A%E9%81%93%E5%8D%B7%E7%A7%AF.png" alt="多通道卷积"></p><h4 id="3-2-2-6-多卷积核">3.2.2.6 多卷积核</h4><p>当有多个卷积核时，可以学习到多种不同的特征，输出结果的通道数等于卷积核的数量，多卷积核可以理解为多神经元</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E5%A4%9A%E5%8D%B7%E7%A7%AF%E6%A0%B8.png" alt="多卷积核"></p><h4 id="3-2-2-7-卷积层的运算结果">3.2.2.7 卷积层的运算结果</h4><p>$$<br>\begin{split}<br>&amp;Z^{[l]} = W^{[l]} \ast A^{[l-1]} + b^{[l]} \\<br>&amp;A^{[l]} = g(Z^{[l]})<br>\end{split}<br>$$</p><h3 id="3-2-3-池化层（Pooling）">3.2.3 池化层（Pooling）</h3><p>池化层主要对卷积层的输出进行下采样（Subsampling）处理，主要分为：</p><ul><li>最大池化（Max Pooling）：取池化窗口中的最大值</li><li>平均池化（Average Pooling）：取池化窗口中的平均值</li></ul><p>池化通常为2x2的filter，步长为2，即每次取2x2的窗口中的最大值或平均值。</p><p>特点：没有参数，不需要学习，只是对输入数据进行简单的处理。</p><p>目的：降低数据维度；减少计算量、提高计算速度；防止过拟合，提高了鲁棒性。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%B1%A0%E5%8C%96%E5%B1%82.png" alt="池化层"></p><h3 id="3-2-4-全连接层（Fully-Connected）与CNN结构">3.2.4 全连接层（Fully Connected）与CNN结构</h3><p>全连接层即此前提到的多层神经网络，每个神经元与上一层的所有神经元相连。</p><p>卷积层+激活层+池化层可以看成是CNN的特征学习/特征提取层，学习到的特征（Feature Map）最终应用于模型任务（分类、回归）</p><ul><li>先对所有Feature Map进行扁平化（Flatten），即转化为一维向量</li><li>再连接到一个或多个全连接层，进行分类或回归任务</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/CNN%E7%BB%93%E6%9E%842.png" alt="CNN结构2"></p><h2 id="3-3-经典分类网络结构">3.3 经典分类网络结构</h2><p>通常采用从现成的经典网络结构进行优化，而不是从头开始设计网络结构。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E7%BB%8F%E5%85%B8%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png" alt="经典网络结构"></p><ul><li>NIN：引入了1x1卷积核</li><li>VGG：参数量巨大（1.4亿），19层网络</li><li>GoogleNet：500万参数，22层网络<ul><li>2014年比赛冠军的model，证明了用更多的卷积、更深的层次可以得到更好的结构</li><li>引入了Inception模块，多个不同大小的卷积核</li></ul></li></ul><h3 id="3-3-1-LeNet-5">3.3.1 LeNet-5</h3><h4 id="3-3-1-1-LeNet-5-网络结构">3.3.1.1 LeNet-5 网络结构</h4><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/LeNet5.png" alt="LeNet-5"></p><p>LeNet-5最初的目的用于手写数字识别，当时使用的激活函数是Sigmoid和Tanh，还没有出现Relu</p><h4 id="3-3-1-2-参数形状">3.3.1.2 参数形状</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Shape</th><th style="text-align:center">Size</th><th style="text-align:center">Params</th></tr></thead><tbody><tr><td style="text-align:center">Input</td><td style="text-align:center">(32, 32, 1)</td><td style="text-align:center">1024</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">Conv1(f=5,s=1)</td><td style="text-align:center">(28, 28, 6)</td><td style="text-align:center">4704</td><td style="text-align:center">5x5（卷积核大小）x3（通道数）x6（卷积核数量）+6（偏置）=456</td></tr><tr><td style="text-align:center">Pool1</td><td style="text-align:center">(14, 14, 6)</td><td style="text-align:center">1176</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">Conv2(f=5,s=1)</td><td style="text-align:center">(10, 10, 16)</td><td style="text-align:center">1600</td><td style="text-align:center">5x5x6x16+16=2416</td></tr><tr><td style="text-align:center">Pool2</td><td style="text-align:center">(5, 5, 16)</td><td style="text-align:center">400</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">FC3</td><td style="text-align:center">(120, 1)</td><td style="text-align:center">120</td><td style="text-align:center">400x120+120=48120</td></tr><tr><td style="text-align:center">FC4</td><td style="text-align:center">(84, 1)</td><td style="text-align:center">84</td><td style="text-align:center">120x84+84=10164</td></tr><tr><td style="text-align:center">Output:Sofmax</td><td style="text-align:center">(10, 1)</td><td style="text-align:center">10</td><td style="text-align:center">84x10+10=850</td></tr></tbody></table><ul><li>中间特征值的大小变化不宜过大，否则会导致信息丢失</li></ul><h3 id="3-3-2-AlexNet">3.3.2 AlexNet</h3><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/AlexNet.png" alt="AlexNet"></p><ul><li>总参数量：6000万，8层神经网络，5个卷积层+3个全连接层</li><li>使用了非线性激活函数ReLU</li><li>使用Dropout防止过拟合，数据扩充</li><li>使用批标准化（Batch Normalization）加速训练</li></ul><h3 id="3-3-3-Inception结构">3.3.3 Inception结构</h3><p>Inception结构是GoogleNet中的一个模块，由多个不同大小的卷积核组成，可以提取不同尺度的特征。</p><h4 id="3-3-3-1-MLP卷积（1x1卷积）">3.3.3.1 MLP卷积（1x1卷积）</h4><p>一种新的深度网络结构Network in Network（NIN）提出了MLP卷积取代传统线性卷积核</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/MLP%E5%8D%B7%E7%A7%AF.png" alt="MLP卷积"></p><ul><li>1x1卷积核对每个像素点的所有通道进行了线性组合</li><li>激活函数将feature map由多通道的线性组合变为非线性组合（信息整合）</li><li>提高特征抽象能力（Multilayer Perceptron，缩写MLP，就是一个多层神经网络）</li><li>主要作用：调整通道数（升维降维）、减少参数量</li></ul><h4 id="3-3-3-2-Inception层">3.3.3.2 Inception层</h4><p>也称盗梦空间结构）</p><p>目的：代替人决定，使用哪种卷积核，或是需要MaxPool层，由网络自己学习寻找合适的结构，节省计算</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/Inception%E5%B1%82.png" alt="Inception层"></p><p>提供以下4种不同的卷积核：</p><ul><li>1x1卷积核（64个）</li><li>3x3卷积核（128个），padding=same</li><li>5x5卷积核（32个），padding=same</li><li>2x2最大池化（32个），stride=1，padding=same</li><li>最终结果为这4种卷积核的拼接，27x27x256，使用更少的参数达到和AlexNet相当的效果</li></ul><h4 id="3-3-3-3-Inception改进">3.3.3.3 Inception改进</h4><p>上一节中，计算量还是太大，参数还是太多，需要进一步改进。以5x5卷积核为例：</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/Inception%E6%94%B9%E8%BF%9B.png" alt="Inception改进"></p><ul><li>上面为原方法，参数：$5\times5\times192\times32=153600$</li><li>下面为改进方法，网络缩小后再扩大，参数：$1\times1\times192\times16+5\times5\times16\times32=15872$</li></ul><h4 id="3-3-3-4-GoogleNet">3.3.3.4 GoogleNet</h4><p>Inception模块的堆叠，形成GoogleNet网络结构</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/Inception%E6%A8%A1%E5%9D%97.png" alt="Inception模块"></p><p>详细结构略</p><h2 id="3-4-卷积神经网络实战技巧">3.4 卷积神经网络实战技巧</h2><h3 id="3-4-1-学习特征可视化">3.4.1 学习特征可视化</h3><p>可以将网络学习过程中产生的特征图可视化出来，并且对比原图来看看每一层都干了什么</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/LeNet5%E4%BE%8B.webp" alt="LeNet5例"></p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E5%AD%A6%E4%B9%A0%E7%89%B9%E5%BE%81%E5%8F%AF%E8%A7%86%E5%8C%96.png" alt="学习特征可视化"></p><ul><li>Layer1,2：颜色、边缘等基本特征</li><li>Layer3：纹理、形状等中级特征</li><li>Layer4：稍复杂的特征，如狗的头部形状</li><li>Layer5：高级特征，如关键性区分特征</li></ul><h3 id="3-4-2-迁移学习（Transfer-Learning）">3.4.2 迁移学习（Transfer Learning）</h3><p>如果需要做一个具体场景的计算机视觉任务，可以使用已经训练好的模型，然后在此基础上进行微调。</p><h4 id="3-4-2-1-介绍">3.4.2.1 介绍</h4><p>迁移学习就是利用数据、任务或模型之间的相似性（例如都是图像分类任务），将在旧的领域学习过或训练好的模型，应用于新的领域的过程。</p><p>从以下两个方面考虑训练模型的现实问题：</p><ol><li>数据集大小：如果新任务的数据集很小，迁移学习可以帮助提高模型的泛化能力<ul><li>如果有海量的数据集支持，可以不需要迁移学习，直接从海量数据中训练出一个学习到一个鲁棒性很强的模型</li><li>但是，通常情况下，需要研究的领域数据集非常有限，导致模型的泛化能力极差</li></ul></li><li>训练成本：从头开始训练一个CNN模型需要大量的时间和计算资源</li></ol><h4 id="3-4-2-2-微调（Fine-tuning）">3.4.2.2 微调（Fine-tuning）</h4><p>在一个已经训练好的模型（Pre-trained Model）上进行针对性优化，以提升模型在特定任务上的性能。</p><p>假设有两个任务$A$和$B$。<br>任务$A$拥有海量数据，以$a$为条件区分1000个类别，已经训练好了一个模型。<br>目标任务为$B$，以$b$为条件区分250个类别，数据集很小。</p><p>步骤：</p><ol><li>在$A$模型的基础上，将最后一层的输出层替换为250个类别的输出层，保持前面的参数不变</li><li>根据数据量，决定是否冻结（Freeze）前面的层（权重不变），只训练最后若干层并更新参数<ul><li>数据越多，就保留越多的层，从后往前逐渐解冻</li><li>数据很少，只保留输出层，其他层全部解冻</li></ul></li><li>重新训练模型</li></ol>]]></content>
    
    
    <summary type="html">深度学习在CV领域的应用</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.cclmsy.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://www.cclmsy.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深度学习" scheme="https://www.cclmsy.cc/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习笔记2-神经网络优化</title>
    <link href="https://www.cclmsy.cc/posts/Deep_Learning02.html"/>
    <id>https://www.cclmsy.cc/posts/Deep_Learning02.html</id>
    <published>2025-02-21T10:00:00.000Z</published>
    <updated>2025-02-21T13:09:53.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-1-多分类与Softmax回归">2.1 多分类与Softmax回归</h2><h3 id="2-1-1-Softmax回归">2.1.1 Softmax回归</h3><p>对于多分类问题，种类个数C，则输出层的神经元个数必须为C，每个神经元的输出依次对应为每个类别的概率。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E5%A4%9A%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98.png" alt="多分类问题"></p><p>输出层：$Z^{[L]}=W^{[L]}A^{[L-1]}+b^{[L]}$$</p><p>Softmax公式：$a_i^{[L]} = \dfrac{e^{Z_i^{[L]}}}{\sum\limits_{j=1}^{C}e^{Z_j^{[L]}}}$，满足$\sum\limits_{i=1}^{C}a_i^{[L]}=1$</p><p>理解：$e^{z_i}$的占比</p><h3 id="2-1-2-交叉熵损失与One-hot编码">2.1.2 交叉熵损失与One-hot编码</h3><p>对于Softmax回归，使用交叉熵损失（Cross Entropy Loss）函数：</p><p>$$<br>L(\hat{y},y)=-\sum\limits_{i=1}^{C}y_i\log(\hat{y}_i)<br>$$</p><p>$C=2$时，即对应逻辑回归的对数损失函数$L(\hat{y},y)=-(y\log(\hat{y})+(1-y)\log(1-\hat{y}))$</p><p>one-hot编码（独热编码）：将标签转换为向量，只有一个元素为1，其他元素为0。</p><p>以图2.1.1为例，$y=7$，则one-hot编码对应为$y=[0,0,0,0,0,0,0,1,0,0]$。</p><p>由于除了正确类别外，其他类别$y_i=0$，因此可以简单计算交叉熵：$L(\hat{y},y)=-1\times\log(0.10)$</p><p>这一项的预测值越接近1，交叉熵越接近0，模型效果越好</p><h2 id="2-2-梯度下降算法改进">2.2 梯度下降算法改进</h2><p>深度学习在大规模数据集上的训练速度很慢，难以在大数据领域发挥最大效果。</p><p>优化算法能够加速训练模型，提高计算效率。</p><h3 id="2-2-1-梯度下降遇到的问题">2.2.1 梯度下降遇到的问题</h3><p>梯度消失与梯度爆炸：由于链式法则是一个连乘的过程，当层数越深时，梯度以指数速度增长传播。</p><ul><li>梯度消失：梯度小于1，多次连乘后，梯度趋近于0，导致参数几乎不更新、模型难收敛</li><li>梯度爆炸：梯度大于1，多次连乘后，梯度趋近于无穷，导致参数更新过大甚至溢出</li></ul><p>局部最优解：损失函数可能存在鞍点/局部最小值</p><ul><li>较大的神经网络，局部最优解的可能性较小</li><li>鞍点附近的平稳段会使得学习非常缓慢，需要优化算法加速学习</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E5%B1%80%E9%83%A8%E6%9C%80%E4%BC%98%E8%A7%A3.gif" alt="局部最优解"></p><p>解决方法：</p><ol><li>初始化参数策略：比如在<a href="#144-%E5%8F%82%E6%95%B0%E5%92%8C%E8%B6%85%E5%8F%82%E6%95%B0">1.4.4</a>中提到的将权重初始化为较小的随机数</li><li>批梯度下降、Mini-batch梯度下降、随机梯度下降</li><li>梯度下降算法内部优化：动量梯度下降、RMSProp算法、Adam算法</li><li>学习率衰减</li><li>非算法优化：标准化输入</li></ol><h3 id="2-2-2-批梯度下降、Mini-batch梯度下降、随机梯度下降">2.2.2 批梯度下降、Mini-batch梯度下降、随机梯度下降</h3><p>批梯度下降（Batch Gradient Descent）：同时处理整个训练集</p><ul><li>在更新参数前，必须先处理整个训练参数集，才能进行一步梯度下降</li><li>如果训练集很大，计算量会很大，训练速度很慢</li><li>噪声低，代价函数值平滑减小</li><li>训练样本的大小较小（小于2048）时，选择Batch梯度下降</li></ul><p>Mini-batch梯度下降：将训练集分为多个固定大小的批次，每次只处理一个批次的数据</p><ul><li>训练样本的大小较大时，选择Mini-batch梯度下降，通常为64、128、256、512等</li></ul><p>随机梯度下降（Stochastic Gradient Descent, SGD）：mini-batch大小为1，每次只处理一个样本</p><ul><li>训练速度快，但丢失了向量化编程的优势</li><li>代价函数值波动大，噪声大，总体向全局最小值靠近，但难以收敛，容易在鞍点震荡</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0%E5%80%BC%E5%8F%98%E5%8C%96%E8%B6%8B%E5%8A%BF.png" alt="梯度下降代价函数值变化趋势"></p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0%E5%80%BC%E5%8F%98%E5%8C%96%E8%B6%8B%E5%8A%BF2.png" alt="梯度下降代价函数值变化趋势2"></p><h3 id="2-2-3-指数加权平均">2.2.3 指数加权平均</h3><p>指数加权平均（Exponentially Weight Average）是一种常用的序列数据处理方式，通常用在序列场景，如金融序列分析、温度变化序列分析。</p><p>$$<br>S_t = \begin{cases}<br>x_t &amp;, t=1 \\<br>\beta S_{t-1}+(1-\beta)x_t &amp;, t&gt;1<br>\end{cases}<br>$$</p><p>理解：上一结果的权重为$\beta$，当前数据的权重为$1-\beta$。</p><p>下图，黄色$\beta=0.5$，红色$\beta=0.9$，绿色$\beta=0.98$</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%8C%87%E6%95%B0%E5%8A%A0%E6%9D%83%E5%B9%B3%E5%9D%87.png" alt="指数加权平均"></p><h3 id="2-2-4-动量梯度下降">2.2.4 动量梯度下降</h3><p>动量梯度下降（Momentum Gradient Descent）：利用梯度的指数加权平均来更新参数</p><p>$$<br>\begin{split}<br>&amp;S_{dW} = \beta S_{dW}+(1-\beta)dW \\<br>&amp;S_{db} = \beta S_{db}+(1-\beta)db \\<br>&amp;W = W-\alpha S_{dW} \\<br>&amp;b = b-\alpha S_{db}<br>\end{split}<br>$$</p><p>利用累加的梯度值，减少梯度下降的震荡，加速收敛</p><ul><li>前后梯度方向不一致时，梯度值减小，减少震荡</li><li>前后梯度方向一致时，梯度值增大，加速收敛</li></ul><h3 id="2-2-5-RMSProp算法">2.2.5 RMSProp算法</h3><p>RMSProp算法（Root Mean Square Propagation）：再对梯度进行指数加权平均的基础上，引入平方和平方根</p><p>$$<br>\begin{split}<br>&amp;S_{dW} = \beta S_{dW}+(1-\beta)dW^2 \\<br>&amp;S_{db} = \beta S_{db}+(1-\beta)db^2 \\<br>&amp;W = W-\alpha \dfrac{dW}{\sqrt{S_{dW}+\epsilon}} \\<br>&amp;b = b-\alpha \dfrac{db}{\sqrt{S_{db}+\epsilon}}<br>\end{split}<br>$$</p><p>其中，$\epsilon$是一个很小的数，避免分母过小导致数值不稳定。</p><p>RMSProp 有助于减少抵达最小值路径上的摆动，并允许使用一个更大的学习率$\alpha$，加快算法学习速度。</p><h3 id="2-2-6-Adam算法">2.2.6 Adam算法</h3><p>Adam算法（Adaptive Moment Estimation，自适应矩估计）：结合了Momentum和RMSProp算法，同时考虑梯度的一阶矩估计和二阶矩估计</p><p>假设用一个mini-batch计算$dW$和$db$，第$t$次迭代时，计算动量梯度结果：</p><p>$$<br>\begin{split}<br>&amp;V_{dW} = \beta_1 V_{dW}+(1-\beta_1)dW \\<br>&amp;V_{db} = \beta_1 V_{db}+(1-\beta_1)db \\<br>&amp;V_{dW}^{corrected} = \dfrac{V_{dW}}{1-\beta_1^t}<br>\end{split}<br>$$</p><p>计算RMSProp结果：</p><p>$$<br>\begin{split}<br>&amp;S_{dW} = \beta_2 S_{dW}+(1-\beta_2)dW^2 \\<br>&amp;S_{db} = \beta_2 S_{db}+(1-\beta_2)db^2 \\<br>&amp;S_{dW}^{corrected} = \dfrac{S_{dW}}{1-\beta_2^t}<br>\end{split}<br>$$</p><p>计算移动平均数时，使用系数$\dfrac{1}{1-\beta_1^t}$进行修正。<br>例如$m_0=0,m_1=0.9m_0+0.1m_1$，导致$m_1$的值过小，修正后恰好为$m_1$的值。<br>随着迭代次数增加，修正系数趋近于1，保证了移动平均数的准确性。</p><p>Adam算法更新参数：</p><p>$$<br>\begin{split}<br>&amp;W = W-\alpha \dfrac{V_{dW}^{corrected}}{\sqrt{S_{dW}^{corrected}}+\epsilon} \\<br>&amp;b = b-\alpha \dfrac{V_{db}^{corrected}}{\sqrt{S_{db}^{corrected}}+\epsilon}<br>\end{split}<br>$$</p><h3 id="2-2-7-学习率衰减">2.2.7 学习率衰减</h3><p>如果随着时间慢慢减少学习率$\alpha$的大小，在初期$\alpha$较大时，下降的步长较大，能以较快的速度进行梯度下降；而后期逐步减小$\alpha$的值，即减小步长，有助于算法的收敛，更容易接近最优解。</p><p>最常用的学习率衰减方法：$\alpha = \dfrac{1}{1+decay_ rate \times epoch_ num} \times \alpha_0$</p><ul><li>$\alpha_0$：初始学习率</li><li>$decay_ rate$：衰减率，超参数</li><li>$epoch_ num$：迭代次数</li></ul><p>一种指数衰减学习率：$\alpha = 0.95^{epoch_ num} \times \alpha_0$</p><h3 id="2-2-8-非算法优化：标准化输入">2.2.8 非算法优化：标准化输入</h3><p>对于输入数据进行标准化处理，能够缓解梯度消失和梯度爆炸问题，并且加速算法的收敛。</p><ul><li>标准化公式：$X = \dfrac{X-\mu}{\sigma}$，其中$\mu$为均值，$\sigma$为标准差</li></ul><h2 id="2-3-深度学习正则化">2.3 深度学习正则化</h2><p><strong>正则化（Regularization）</strong>：在成本函数中加入一个正则化项（惩罚项），惩罚模型的复杂度，防止网络过拟合</p><h3 id="2-3-1-数据集划分">2.3.1 数据集划分</h3><ul><li>训练集（Training Set）：用于模型的训练过程</li><li>验证集（Validation Set）：利用验证集（又称为简单交叉验证集，hold-out cross validation set）进行交叉验证，选择出最好的模型</li><li>测试集（Test Set）：用于评估模型的能力</li><li>小数据量（小于10万）比例：无验证集7:3，有验证集6:2:2</li><li>大数据量比例：98:1:1、99.5:0.25:0.25</li></ul><h3 id="2-3-2-偏差和方差">2.3.2 偏差和方差</h3><p>“偏差-方差分解”（bias-variance decomposition）是解释学习算法泛化性能的一种重要工具。</p><p>泛化误差可分解为偏差、方差与噪声，泛化性能是由学习算法的能力、数据的充分性以及学习任务本身的难度所共同决定的。</p><ul><li>偏差：度量学习算法的期望预测与真实结果的偏离程度，反映了<strong>模型本身的拟合能力</strong></li><li>方差：度量同样大小的训练集的变动所导致的学习性能的变化，反映了<strong>模型的稳定性</strong></li><li>噪声：当前任务下任何学习算法所能达到的期望泛化误差的下界，反映了<strong>问题本身的难度</strong></li></ul><p>偏差、方差与数据集划分的关系及解决方法：</p><ol><li>训练集错误率小、测试集错误率大：高方差，可能出现了过拟合<ul><li>增大数据集，使训练尽可能包含所有情况</li><li>寻找更合适的网络结构</li><li>正则化</li></ul></li><li>训练集错误率大、测试集错误率大：高偏差，可能出现了欠拟合<ul><li>扩大网络规模，例如增加隐藏层或神经元数量</li><li>寻找更合适的网络结构，使用更大的网络（如AlexNet）</li><li>增加训练时间、迭代次数</li></ul></li><li>训练集错误率小、测试集错误率小：方差和偏差都小，模型效果较好</li></ol><h3 id="2-3-3-逻辑回归的L1和L2正则化">2.3.3 逻辑回归的L1和L2正则化</h3><p>逻辑回归中，参数$W$的数量由特征数决定，正则化如下：</p><ul><li>L1正则化：$J(W,b) = \dfrac{1}{m}\sum\limits_{i=1}^{m}L(\hat{y}^{(i)},y^{(i)})+\dfrac{\lambda}{2m}||W||_1$</li><li>L2正则化：$J(W,b) = \dfrac{1}{m}\sum\limits_{i=1}^{m}L(\hat{y}^{(i)},y^{(i)})+\dfrac{\lambda}{2m}||W||_2^2$<ul><li>L2范数：$\dfrac{\lambda}{2m}||W||<em>2^2 = \dfrac{\lambda}{2m}\sum\limits</em>{i=1}^{n}W_i^2=\dfrac{\lambda}{2m}W^TW$</li><li>解释：所有W参数的平方和</li></ul></li></ul><p>正则化因子$\lambda$：超参数，控制正则化项的权重，$\lambda$越大，正则化项的影响越大，模型越简单，防止过拟合。</p><p>L1正则化后，$W$的某些参数会变为0，使模型变稀疏，因此L2正则化更常用。</p><p>梯度下降的目的是减小损失函数$J(W,b)$值的大小。<br>在损失函数中增加了一项，导致$dW$增大，$W$减小的更多（多减去一项），因此L2范数也称为权重衰减（Weight Decay）。</p><h3 id="2-3-4-神经网络中的L2正则化">2.3.4 神经网络中的L2正则化</h3><p>对每一层的权重矩阵$W^{[l]}$进行正则化，每一层都有若干个权重，可以理解为矩阵</p><p>$$<br>J(W^{[1]},b^{[1]},…,W^{[L]},b^{[L]}) = \dfrac{1}{m}\sum\limits_{i=1}^{m}L(\hat{y}^{(i)},y^{(i)})+\dfrac{\lambda}{2m}\sum\limits_{l=1}^{L}||W^{[l]}||_F^2<br>$$</p><p>其中，$||W^{[l]}||_F^2$为Frobenius范数，表示矩阵的所有元素的平方和。</p><p>正则化减小过拟合的原理：正则化因子设置的足够大的情况下，为了使损失函数最小化，权重矩阵会趋向于0，消除了一些神经元的影响，使较大的网络变得简单，减小了过拟合的风险。</p><h3 id="2-3-5-Dropout正则化">2.3.5 Dropout正则化</h3><p>Dropout正则化：在训练过程中，随机关闭一些神经元，减少神经元之间的依赖关系，防止过拟合。</p><p>Inverted Dropout：在训练过程中，对每一层的神经元，以概率$keep_prob$保留。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keep_prob = <span class="number">0.8</span>  <span class="comment"># 保留概率</span></span><br><span class="line">dl = np.random.rand(A.shape[<span class="number">0</span>], A.shape[<span class="number">1</span>]) &lt; keep_prob  </span><br><span class="line">A = np.multiply(A, dl)  <span class="comment"># 保留神经元</span></span><br><span class="line"></span><br><span class="line"> 部分神经元被关闭，期望值预计下降为原来的$keep_prob$，需要缩放激活值保持期望值不变</span><br><span class="line">A = A / keep_prob </span><br></pre></td></tr></table></figure><p>加入了Droupout后，输入的特征都存在被随机清除的可能，所以该神经元不会再特别依赖于任何一个输入特征。<br>通过传播过程，Dropout将产生和L2正则化相同的收缩权重的效果。</p><p>对于神经元较多的层，设置较小的keep_prob，对于神经元较少的层，设置keep_prob=1。</p><p>在CV领域，图像具有更多的特征，Dropout是一种非常有效的正则化方法。</p><p>缺点：</p><ol><li>因为每次会随机消除一部分神经元，成本函数无法被明确定义</li><li>参数无法确定具体是哪些，在反向传播的时候带来计算上的麻烦，无法保证当前网络是否损失函数下降的</li></ol><h3 id="2-3-6-早停止法（Early-Stopping）">2.3.6 早停止法（Early Stopping）</h3><p>如果训练迭代的次数过高，会发生过拟合，损失函数图像如下：</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%97%A9%E5%81%9C%E6%AD%A2%E6%B3%95.png" alt="早停止法"></p><p>早停止法：在测试集上的损失减少到一定程度后，停止训练，防止过拟合。</p><p>这种方法治标不治本，还是需要从根本上解决数据或模型的问题。</p><h3 id="2-3-7-数据增强（Data-Augmentation）">2.3.7 数据增强（Data Augmentation）</h3><p>算法在学习区分两种类别时，可能会寻找到一个最明显的特征。</p><p>例如在区分两种不同型号的车时，如果训练集中，型号1的车都朝左，型号2的车都朝右，那么模型可能会认为车的朝向是区分两种车的最重要特征。<br>在测试集中，如果出现了朝右的型号1车，模型可能认为是型号2车。<br>因此，需要减少数据集中不相关的特征的数量。</p><p>数据增强：通过对训练集进行一系列的随机变换（如剪切、旋转、翻转、缩放等），增加训练集的样本数量，提高模型的泛化能力。</p><p>在上面的例子中，可以通过水平翻转图像，以防止模型学习到不相关的模式。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA.png" alt="数据增强"></p><ul><li>离线增强：预先进行所有的必要转换，从根本上增大数据集规模（如水平翻转后，保存为新的图像，数据集增大为原来的两倍）</li><li>在线增强：在训练过程中，对即将输入模型的小批量数据进行相应变换，同一张图每次训练被随机执行一些变化操作，相当于不同数据集</li></ul><p>数据增强的效果如下</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E7%9A%84%E6%95%88%E6%9E%9C.png" alt="数据增强的效果"></p><h2 id="2-4-神经网络调优和批标准化">2.4 神经网络调优和批标准化</h2><h3 id="2-4-1-神经网络调优">2.4.1 神经网络调优</h3><p>算法层面：</p><ul><li>学习率$\alpha$</li><li>$\beta_1,\beta_2,\epsilon$：Adam算法的超参数，常用值$\beta_1=0.9,\beta_2=0.999,\epsilon=10^{-8}$</li><li>正则化参数$\lambda$</li></ul><p>模型层面：</p><ul><li>hidden units：隐藏层神经元数</li><li>layers：隐藏层层数</li></ul><p>调参技巧</p><ul><li>网格搜索：遍历所有可能的参数组合，测试每一组的效果，选择效果最好的参数组合。</li><li>尽量让每一组差别明显，避免重复测试</li><li>合理的参数设置<ul><li>学习率$\alpha$：通常设置为0.0001、0.001、0.01、0.1等</li><li>指数移动参数$\beta$: 通常设置为0.999、0.9995、0.9999等，尽可能接近1（指数增加效应）</li></ul></li></ul><p>问题：调参过程麻烦、训练时间长</p><h3 id="2-4-2-批标准化（批标准化）">2.4.2 批标准化（批标准化）</h3><p>论文地址：<a href="https://arxiv.org/abs/1502.03167">批标准化: Accelerating Deep Network Training by Reducing Internal Covariate Shift</a></p><blockquote><p>训练深度神经网络很复杂，因为在训练期间每层输入的分布发生变化，因为前一层的参数发生了变化。<br>这通过要求较低的学习率和仔细的参数初始化来减慢训练速度，并且使得训练具有饱和非线性的模型变得非常困难。<br>我们将这种现象称为<strong>内部协变量偏移</strong>，并通过<strong>标准化层</strong>输入来解决问题。<br>我们的方法的优势在于使标准化成为模型体系结构的一部分，并为每个培训小批量执行标准化。<br>批标准化允许我们使用更高的学习率并且不太关心初始化。<br>它还可以充当调节器，在某些情况下可以消除对Dropout的需求。<br>应用于最先进的图像分类模型，批量标准化实现了相同的精度，培训步骤减少了14倍，并且显着地超过了原始模型。<br>使用批量标准化网络的集合，我们改进了ImageNet分类的最佳发布结果：达到4.9％的前5个验证错误（和4.8％的测试错误），超出了人类评估者的准确性。</p></blockquote><p>批标准化：在神经网络的每一层的<strong>激活函数之前</strong>，对每一层的<strong>输入</strong>进行标准化处理，使得每一层的输入数据服从均值为0、方差为1的正态分布。</p><p>批标准化公式：</p><p>$$<br>\begin{split}<br>&amp;\mu = \dfrac{1}{m}\sum\limits_{i=1}^{m}Z^{(i)} \\<br>&amp;\sigma^2 = \dfrac{1}{m}\sum\limits_{i=1}^{m}(Z^{(i)}-\mu)^2 \\<br>&amp;Z_{norm}^{(i)} = \dfrac{Z^{(i)}-\mu}{\sqrt{\sigma^2+\epsilon}}<br>\end{split}<br>$$</p><p>其中，$\mu$为均值，$\sigma^2$为方差，$\epsilon$为一个很小的数，避免分母为0。</p><p>如果各隐藏层的输入均值在靠近0的区域，即处于激活函数的线性区域，不利于训练非线性神经网络，从而得到效果较差的模型。<br>因此添加两个可学习的参数$\gamma$和$\beta$，对标准化后的数据进行缩放和平移。</p><p>$$<br>\tilde{Z}^{(i)} = \gamma Z_{norm}^{(i)}+\beta<br>$$</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%89%B9%E6%A0%87%E5%87%86%E5%8C%96%E8%BF%87%E7%A8%8B.png" alt="批标准化过程"></p><p>批标准化优化训练过程的原理：</p><p>数据的分布会随着不同数据集改变。<br>网络的参数会因训练集数据分布的变化而变化；测试的数据分布与训练集的数据分布不同，也会导致准确性下降。</p><p>批标准化的作用就是减小了数据分布的变化带来的影响，让模型更健壮，鲁棒性更强。<br>即使输入的值改变，由于批标准化的作用，均值和方差的变化会被消除，后续的学习更加容易。<br>批标准化减少了各层W和b之间的耦合性，让各层更加独立，实现自我训练学习的效果</p><p>批标准化也起到微弱的正则化效果，但是不能将批标准化作为正则化的手段，而是当作加速学习的方式。<br>批标准化 主要解决的还是反向传播过程中的梯度问题（梯度消失和爆炸）。</p>]]></content>
    
    
    <summary type="html">多分类、优化器、正则化、参数调优</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.cclmsy.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://www.cclmsy.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深度学习" scheme="https://www.cclmsy.cc/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习笔记1-深度学习基础</title>
    <link href="https://www.cclmsy.cc/posts/Deep_Learning01.html"/>
    <id>https://www.cclmsy.cc/posts/Deep_Learning01.html</id>
    <published>2025-02-20T04:00:00.000Z</published>
    <updated>2025-02-21T13:07:32.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-深度学习介绍">1.1 深度学习介绍</h2><h3 id="1-1-1-深度学习和机器学习的区别">1.1.1 深度学习和机器学习的区别</h3><p>深度学习的优点：</p><ul><li>不需要人工处理设计特征，只需通过神经网络输出结果</li><li>更适用于难提取特征的任务：图像、语音、自然语言处理</li><li>能够应对处理更大规模数据</li></ul><h3 id="1-1-2-人工神经网络（Artificial-Neural-Network-ANN）">1.1.2 人工神经网络（Artificial Neural Network, ANN）</h3><p>包含：输入层、隐藏层、输出层，每层包含多个神经元，每个神经元包含激活函数</p><h3 id="1-1-3-激活函数（Activation-Function）">1.1.3 激活函数（Activation Function）</h3><p>涉及到网络的优化时候，会有不同的激活函数选择。<br>有一个问题是神经网络的隐藏层和输出单元用什么激活函数。<br>在逻辑回归中选用了Sigmoid函数，但有时其他函数的效果会好得多。<br>大多数结论通过实践得来，没有很好的解释性。</p><p>使用非线性的激活函数：使用线性函数，在这一层上的神经元的输出仅仅是输入的线性组合，失去了效果。</p><p>$$a^{[1]} = W^{[1]}x+b^{[1]}$$</p><p>$$<br>\begin{align}<br>b^{[1]} &amp;= W^{[2]}a^{[1]}+b^{[2]} \\<br>&amp;= W^{[2]}(W^{[1]}x+b^{[1]})+b^{[2]} \\<br>&amp;= (W^{[2]}W^{[1]})x+(W^{[2]}b^{[1]}+b^{[2]}) \\<br>&amp;= Wx+b<br>\end{align}<br>$$</p><p>本节提及的几种常用激活函数：Sigmoid函数、tanH函数、ReLU函数</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png" alt="激活函数"></p><p>Sigmoid函数</p><p>$$<br>\begin{split}<br>&amp;\sigma(t)=\dfrac{1}{1+e^{-t}} \\<br>&amp;\sigma’(t)=\sigma(t)(1-\sigma(t)) \\<br>&amp;t\in(-\infty,+\infty), \sigma(t)\in(0,1)<br>\end{split}<br>$$</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/Sigmoid%E5%87%BD%E6%95%B0.png" alt="Sigmoid函数"></p><p>双曲正切函数（Hyperbolic Tangent, tanH）</p><p>效果比Sigmoid函数好，因为函数输出在(-1,1)之间，收敛速度更快</p><p>存在和Sigmoid函数一样的缺点：当t趋紧无穷，导数的梯度（即函数的斜率）就趋紧于 0，这使得梯度算法的速度会减慢。</p><p>$$<br>\begin{split}<br>&amp;tanh(t)=\dfrac{e^{t}-e^{-t}}{e^{t}+e^{-t}} \\<br>&amp;tanh’(t)=1-tanh^2(t)<br>\end{split}<br>$$</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/tanH%E5%87%BD%E6%95%B0.png" alt="tanH函数"></p><p>ReLU函数：修正线性单元（Rectified Linear Unit, ReLU）</p><p>当 $t&gt;0$ 时，梯度始终为1，从而提高神经网络基于梯度算法的运算速度，收敛速度远大于Sigmoid和tanH函数</p><p>$$<br>\begin{split}<br>&amp;f(t)=max(0,t) \\<br>&amp;f’(t)=\begin{cases}<br>0 &amp; \text{if } t&lt;0 \\<br>1 &amp; \text{if } t \geq 0<br>\end{cases}<br>\end{split}<br>$$</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/ReLU%E5%87%BD%E6%95%B0.png" alt="ReLU函数"></p><h3 id="1-1-4-损失函数（Loss-Function）">1.1.4 损失函数（Loss Function）</h3><p>损失函数用于衡量预测结果与真实值之间的误差。</p><p>平方差损失函数：$L(\hat{y},y)=\frac{1}{2}(\hat{y}-y)^2$</p><ul><li>最简单的损失函数</li><li>具有多个局部最小值，不适合逻辑回归</li></ul><p>对数损失函数：$L(\hat{y},y)=-(y\log(\hat{y})+(1-y)\log(1-\hat{y}))$</p><ul><li>逻辑回归通常采用的损失函数</li><li>y=1时，损失函数为$-log(\hat{y})$，$\hat{y}$越大，损失越小</li><li>y=0时，损失函数为$log(1-\hat{y})$，$\hat{y}$越小，损失越小</li></ul><p>损失函数：衡量了在单个训练样本上的表现</p><p>代价函数（Cost Function）：$J(w,b)=\dfrac{1}{m}\sum\limits_{i=1}^{m}L(\hat{y}^{(i)},y^{(i)})$</p><ul><li>所有训练样本的损失平均值</li><li>衡量在全体训练样本上的表现、参数w和b的效果</li></ul><h2 id="1-2-逻辑回归">1.2 逻辑回归</h2><h3 id="1-2-1-逻辑回归（Logistic-Regression-LR）">1.2.1 逻辑回归（Logistic Regression, LR）</h3><p>逻辑回归是一种用于解决二分类问题的分类算法，给定一个输入x，输出y=1的预测概率 $\hat{y}=P(y=1|x)$</p><p>记输入层特征数$n$，参数：</p><ul><li>输入$x \in R^{n}$，x是一个n维的特征向量</li><li>权重$w \in R^{n}$，w是一个n维的权重向量</li><li>标签$y \in {0,1}$，y是一个二分类标签</li><li>偏置$b \in R$，b是一个标量</li><li>输出$\hat{y} = \sigma(w^{T}x+b)=\sigma(w_1x_1+w_2x_2+…+w_nx_n+b)$<ul><li>激活函数：Sigmoid函数：$\sigma(t)=\dfrac{1}{1+e^{-t}}$</li><li>t非常大时，s接近1；t非常小时，s接近0</li></ul></li></ul><h3 id="1-2-2-梯度下降算法（Gradient-Descent）">1.2.2 梯度下降算法（Gradient Descent）</h3><p>通过迭代更新参数w和b，使代价函数J(w,b)找到最小值</p><p>梯度下降算法：函数的梯度（gradient）指出了函数的最陡增长方向。梯度的方向走，函数增长得就越快。那么按梯度的负方向走，函数值自然就降低得最快了</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%9B%BE.png" alt="损失函数图"></p><p>参数更新：</p><ul><li>$w:=w-\alpha \dfrac{\partial J(w,b)}{\partial w}$</li><li>$b:=b-\alpha \dfrac{\partial J(w,b)}{\partial b}$</li><li>$\alpha$：学习率（Learning Rate），控制参数更新的步长，太大会导致震荡，太小会导致收敛速度慢</li></ul><h3 id="1-2-3-逻辑回归的梯度下降">1.2.3 逻辑回归的梯度下降</h3><p>以2维样本 $x_1,x_2$ 为例，参数$w_1,w_2,b$，计算梯度下降</p><p>已知：<br>$$<br>\begin{split}<br>&amp;z = w_1x_1+w_2x_2+b \\<br>&amp;记 a = \hat{y} = \sigma(z) \\<br>&amp;J(a,y) = -y\log(a)-(1-y)\log(1-a) \\<br>\end{split}<br>$$</p><p>计算J对z的导数：</p><p>$$<br>\begin{split}<br>&amp;\frac{\partial J}{\partial a} = \frac{-y}{a}+\frac{1-y}{1-a} \\<br>&amp;\frac{\partial a}{\partial z} = a(1-a) \\<br>&amp;dz = \frac{\partial J}{\partial a} \cdot \frac{\partial a}{\partial z} = a-y<br>\end{split}<br>$$</p><p>这样可以求出总损失相对于$w_1,w_2,b$的导数</p><ul><li>$dw_1 = \frac{\partial J}{\partial z} \cdot \frac{\partial z}{\partial w_1} = x_1(a-y)$</li><li>$dw_2 = \frac{\partial J}{\partial z} \cdot \frac{\partial z}{\partial w_2} = x_2(a-y)$</li><li>$db = \frac{\partial J}{\partial z} \cdot \frac{\partial z}{\partial b} = a-y = dz$</li></ul><p>然后更新参数：</p><ul><li>$w_1:=w_1-\alpha dw_1$</li><li>$w_2:=w_2-\alpha dw_1$</li><li>$b:=b-\alpha dw_1$</li></ul><h3 id="1-2-4-前向传播和反向传播">1.2.4 前向传播和反向传播</h3><ul><li>前向传播：从前往后计算梯度和损失的过程</li><li>反向传播：从后往前计算参数的更新梯度值</li></ul><h3 id="1-2-5-逻辑回归实现">1.2.5 逻辑回归实现</h3><p>向量化编程的优点：多样本下，向量计算比循环计算快的多，代码更简洁</p><ol><li>输入层$X$：形状$n \times m$，$n$为特征数，$m$为样本数</li><li>权重参数$W$：形状$n \times 1$</li><li>偏置参数$b$：标量</li><li>输出层$Z$：$Z=W^{T}X+b$，形状$(1,n) \times (n,m) + b = (1,m)$</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span>  <span class="comment"># 特征数</span></span><br><span class="line">m = <span class="number">100</span>  <span class="comment"># 样本数</span></span><br><span class="line">alpha = <span class="number">0.001</span>  <span class="comment"># 学习率</span></span><br><span class="line">iterations = <span class="number">1000</span>  <span class="comment"># 迭代次数</span></span><br><span class="line"></span><br><span class="line">X = np.random.randn(n, m)  <span class="comment"># 生成特征矩阵</span></span><br><span class="line">Y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, [<span class="number">1</span>, m])  <span class="comment"># 生成标签</span></span><br><span class="line"></span><br><span class="line">J = <span class="number">0</span>  <span class="comment"># 损失函数值</span></span><br><span class="line"></span><br><span class="line"> 初始化权重和偏置</span><br><span class="line">W = np.random.randn(n, <span class="number">1</span>) * <span class="number">0.01</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">t</span>): <span class="comment"># Sigmoid函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-t))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_loss</span>(<span class="params">A, Y</span>):  <span class="comment"># 对数损失函数</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> / m * np.<span class="built_in">sum</span>(Y * np.log(A) + (<span class="number">1</span> - Y) * np.log(<span class="number">1</span> - A))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_accuracy</span>(<span class="params">A, Y</span>):  <span class="comment"># 计算准确率</span></span><br><span class="line">    A = np.where(A &gt; <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> np.mean(A == Y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    Z = np.dot(W.T, X) + b</span><br><span class="line">    A = sigmoid(Z)  <span class="comment"># 激活值（预测）</span></span><br><span class="line">    J = log_loss(A, Y)  <span class="comment"># 计算损失函数值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    <span class="comment"># 计算梯度</span></span><br><span class="line">    dZ = A - Y</span><br><span class="line">    dW = <span class="number">1</span> / m * np.dot(X, dZ.T) <span class="comment"># 1/m * X * dZ</span></span><br><span class="line">    db = <span class="number">1</span> / m * np.<span class="built_in">sum</span>(dZ) <span class="comment"># 1/m * dZ</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新权重和偏置</span></span><br><span class="line">    W = W - alpha * dW</span><br><span class="line">    b = b - alpha * db</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loss:&quot;</span>, J)  <span class="comment"># 打印损失函数值</span></span><br><span class="line"></span><br><span class="line"> 训练集上的准确率</span><br><span class="line">Z = np.dot(W.T, X) + b</span><br><span class="line">A = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-Z))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy:&quot;</span>, calc_accuracy(A, Y))</span><br></pre></td></tr></table></figure><h2 id="1-3-浅层神经网络">1.3 浅层神经网络</h2><h3 id="1-3-1-浅层神经网络">1.3.1 浅层神经网络</h3><p>神经网络（Neural Network, NN）是一种模拟人脑神经元工作方式的计算模型，包含输入层、隐藏层、输出层，每层包含多个神经元</p><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%B5%85%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" alt="浅层神经网络"></p><p>以上图（单隐藏层神经网络）为例，输入层有$n=3$个特征，隐藏层一层，有$4$个神经元。记隐藏层 $[1]$ ，输出层 $[2]$ ，则：</p><ul><li>输入层：$x \in R^{3}$，$x$是一个$3$维的特征向量<ul><li>形状：(3, m)，$m$为样本数</li></ul></li><li>隐藏层具有4行3列的权重矩阵$W^{[1]} \in R^{4 \times 3}$，偏置向量$b^{[1]} \in R^{4}$<ul><li>隐藏层的每个神经元$i$具有权重$W^{[1]}<em>{i} \in R^{3}$，偏置$b^{[1]}</em>{i} \in R$</li><li>形状：输入(3, m) * 权重(4, 3) + 偏置(4, 1) = 输出(4, m)</li></ul></li><li>输出层具有1行4列的权重矩阵$W^{[2]} \in R^{1 \times 4}$，偏置$b^{[2]} \in R$<ul><li>形状：输入(4, m) * 权重(1, 4) + 偏置(1, 1) = 输出(1, m)</li></ul></li></ul><h3 id="1-3-2-前向传播">1.3.2 前向传播</h3><p>$$<br>\begin{split}<br>&amp;Z^{[1]} = W^{[1]}X+b^{[1]} \\<br>&amp;A^{[1]} = tanh(Z^{[1]}) \\<br>&amp;Z^{[2]} = W^{[2]}A^{[1]}+b^{[2]} \\<br>&amp;A^{[2]} = \sigma(Z^{[2]})<br>\end{split}<br>$$</p><h3 id="1-3-3-反向传播">1.3.3 反向传播</h3><p>输出层以Sigmoid函数作为激活函数，根据<a href="#14-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E7%9A%84%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D">逻辑回归的梯度下降</a>的推导，可以得到：</p><p>$$<br>\begin{split}<br>&amp;dZ^{[2]} = A^{[2]}-Y \\<br>&amp;dW^{[2]} = \dfrac{1}{m}dZ^{[2]}A^{[1]T} \\<br>&amp;db^{[2]} = \dfrac{1}{m}np.sum(dZ^{[2]}, axis=1)<br>\end{split}<br>$$</p><p>隐藏层以tanh函数作为激活函数，已知：</p><p>$$<br>\begin{split}<br>&amp;tanh’(t) = 1-tanh^2(t) \\<br>&amp;Z^{[1]} = W^{[1]}X+b^{[1]} \\<br>&amp;A^{[1]} = tanh(Z^{[1]}) \\<br>&amp;J(A^{[2]},Y) = -Y\log(A^{[2]})-(1-Y)\log(1-A^{[2]})<br>\end{split}<br>$$</p><p>根据链式求导法则（步骤略），可以得到：</p><p>$$<br>\begin{split}<br>&amp;dZ^{[1]} = \frac{\partial J}{\partial A^{[2]}} \cdot \frac{\partial A^{[2]}}{\partial Z^{[2]}} \cdot \frac{\partial Z^{[2]}}{\partial A^{[1]}} \cdot \frac{\partial A^{[1]}}{\partial Z^{[1]}} = W^{[2]T}dZ^{[2]} \cdot (1-A^{[1]2}) \\<br>&amp;dW^{[1]} = \dfrac{1}{m}dZ^{[1]}X^T \\<br>&amp;db^{[1]} = \dfrac{1}{m}np.sum(dZ^{[1]}, axis=1)<br>\end{split}<br>$$</p><h3 id="实践：浅层神经网络实现">实践：浅层神经网络实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">n = <span class="number">20</span>  <span class="comment"># 特征数</span></span><br><span class="line">m = <span class="number">100</span>  <span class="comment"># 样本数</span></span><br><span class="line">k = <span class="number">4</span>  <span class="comment"># 隐藏层神经元数</span></span><br><span class="line">alpha = <span class="number">0.001</span>  <span class="comment"># 学习率</span></span><br><span class="line">iterations = <span class="number">1000</span>  <span class="comment"># 迭代次数</span></span><br><span class="line"></span><br><span class="line">X = np.random.randn(n, m)  <span class="comment"># 生成特征矩阵</span></span><br><span class="line">Y = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, [<span class="number">1</span>, m])  <span class="comment"># 生成标签</span></span><br><span class="line"></span><br><span class="line">J = <span class="number">0</span>  <span class="comment"># 损失函数值</span></span><br><span class="line"></span><br><span class="line"> 隐藏层权重和偏置</span><br><span class="line">W1 = np.random.randn(k, n) * <span class="number">0.01</span></span><br><span class="line">b1 = np.zeros([k, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"> 输出层权重和偏置</span><br><span class="line">W2 = np.random.randn(<span class="number">1</span>, k) * <span class="number">0.01</span></span><br><span class="line">b2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">t</span>): <span class="comment"># Sigmoid函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-t))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tanh</span>(<span class="params">t</span>): <span class="comment"># tanH函数</span></span><br><span class="line">    <span class="keyword">return</span> (np.exp(t) - np.exp(-t)) / (np.exp(t) + np.exp(-t))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_loss</span>(<span class="params">A, Y</span>):  <span class="comment"># 对数损失函数</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> / m * np.<span class="built_in">sum</span>(Y * np.log(A) + (<span class="number">1</span> - Y) * np.log(<span class="number">1</span> - A))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_accuracy</span>(<span class="params">A, Y</span>):  <span class="comment"># 计算准确率</span></span><br><span class="line">    A = np.where(A &gt; <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> np.mean(A == Y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iterations):</span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    Z1 = np.dot(W1, X) + b1 <span class="comment"># [k, m]</span></span><br><span class="line">    A1 = tanh(Z1)  <span class="comment"># 隐藏层激活值 [k, m]</span></span><br><span class="line">    Z2 = np.dot(W2, A1) + b2 <span class="comment"># [1, m]</span></span><br><span class="line">    A2 = sigmoid(Z2)  <span class="comment"># 输出层激活值（预测） [1, m]</span></span><br><span class="line">    J = log_loss(A2, Y)  <span class="comment"># 计算损失函数值 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    <span class="comment"># 输出层</span></span><br><span class="line">    dZ2 = A2 - Y <span class="comment"># [1, m]</span></span><br><span class="line">    dW2 = <span class="number">1</span> / m * np.dot(dZ2, A1.T) <span class="comment"># [1, k]</span></span><br><span class="line">    db2 = <span class="number">1</span> / m * np.<span class="built_in">sum</span>(dZ2) <span class="comment"># [1, 1]</span></span><br><span class="line">    <span class="comment"># 隐藏层</span></span><br><span class="line">    dZ1 = np.dot(W2.T, dZ2) * (<span class="number">1</span> - A1 ** <span class="number">2</span>)</span><br><span class="line">    dW1 = <span class="number">1</span> / m * np.dot(dZ1, X.T)</span><br><span class="line">    db1 = <span class="number">1</span> / m * np.<span class="built_in">sum</span>(dZ1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新权重和偏置</span></span><br><span class="line">    W1 = W1 - alpha * dW1</span><br><span class="line">    b1 = b1 - alpha * db1</span><br><span class="line">    W2 = W2 - alpha * dW2</span><br><span class="line">    b2 = b2 - alpha * db2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Loss:&quot;</span>, J)  <span class="comment"># 打印损失函数值</span></span><br><span class="line"></span><br><span class="line"> 训练集上的准确率</span><br><span class="line">Z1 = np.dot(W1, X) + b1</span><br><span class="line">A1 = tanh(Z1)</span><br><span class="line">Z2 = np.dot(W2, A1) + b2</span><br><span class="line">A2 = <span class="number">1</span> / (<span class="number">1</span> + np.exp(-Z2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Accuracy:&quot;</span>, calc_accuracy(A2, Y))</span><br></pre></td></tr></table></figure><h2 id="1-4-深层神经网络">1.4 深层神经网络</h2><h3 id="1-4-1-深层神经网络">1.4.1 深层神经网络</h3><p>为什么需要深层神经网络：</p><ul><li>神经网络从第一层开始，从原始数据中提取特征</li><li>下一层将上一层习得的信息组合起来，形成更高级的特征</li><li>随着层数增多，特征从简单到复杂，学习的能力更强</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" alt="深层神经网络"></p><h3 id="1-4-2-前向传播">1.4.2 前向传播</h3><p>$$<br>\begin{split}<br>&amp;x=a^{[0]} \\<br>&amp;z^{[L]}=W^{[L]}a^{[L-1]}+b^{[L]} \\<br>&amp;a^{[L]}=g^{[L]}(z^{[L]})<br>\end{split}<br>$$</p><p>输入$a^{[L-1]}$，输出$a^{[L]}$</p><h3 id="1-4-3-反向传播">1.4.3 反向传播</h3><p><img src="https://source.cclmsy.cc/Images/Posts/Deep_Learning/%E6%B7%B1%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD.png" alt="深层神经网络反向传播"></p><p>$$<br>\begin{split}<br>&amp;dZ^{[L]} = \frac{\partial J}{\partial A^{[L]}} \cdot \frac{\partial A^{[L]}}{\partial Z^{[L]}} = dA^{[L]} \cdot g^{[L]'}(Z^{[L]}) \\<br>&amp;dW^{[L]} = \frac{\partial J}{\partial Z^{[L]}} \cdot \frac{\partial Z^{[L]}}{\partial W^{[L]}} = \frac{1}{m}dZ^{[L]}A^{[L-1]T} \\<br>&amp;db^{[L]} = \frac{1}{m}np.sum(dZ^{[L]}, axis=1) \\<br>&amp;dA^{[L]} = W^{[L+1]T}dZ^{[L+1]}<br>\end{split}<br>$$</p><h3 id="1-4-4-参数和超参数">1.4.4 参数和超参数</h3><p>参数（Parameters）：在训练过程中希望模型学习到的信息，模型自己调整的参数</p><ul><li>权重W通常使用随机初始化，避免对称性，$randn*0.01$<ul><li>对称性：如果所有的神经元都具有相同的权重，那么在反向传播过程中，所有的神经元都会学习到相同的特征</li><li>乘系数0.01：使用Sigmoid函数或者tanH函数作为激活函数时，W比较小，则Z=WX+b所得的值趋近于0，梯度较大，能够提高算法的更新速度；ReLU函数则没有这个问题</li></ul></li><li>偏置b没有对称性问题，通常初始化为0</li></ul><p>超参数（Hyper parameters）：通过人的经验判断、手动调整的网络信息，会影响最终的参数</p><ul><li>典型的超参数：学习速率$\alpha$、迭代次数$N$、隐藏层数$L$、每层神经元数$n_i$、激活函数$g^{[i]}()$的选择</li><li>开发新应用时，很难预先准确知道最佳的超参数，需要通过不同的尝试和调整来找到最佳的超参数</li></ul>]]></content>
    
    
    <summary type="html">从逻辑回归到深层神经网络</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.cclmsy.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://www.cclmsy.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="深度学习" scheme="https://www.cclmsy.cc/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《计算机网络与通信》课程笔记</title>
    <link href="https://www.cclmsy.cc/posts/Computer_Networks_and_Communications.html"/>
    <id>https://www.cclmsy.cc/posts/Computer_Networks_and_Communications.html</id>
    <published>2025-01-05T15:00:00.000Z</published>
    <updated>2025-02-22T14:05:25.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概述">一、概述</h2><p>因特网服务提供者 ISP(Internet Service Provider)</p><p>ARPANET：最早的因特网，1969年，使用分组交换技术，后来TCP/IP协议成为标准协议</p><p>互联网的组成：边缘（用户）+核心（路由器、链路）</p><p>两种通信方式：客户-服务器方式 C/S(Client/Server)、对等方式 P2P(Peer-to-Peer)</p><p>三种交换方式：电路交换、分组交换、报文交换</p><ul><li>电路交换：面向连接<ul><li>三阶段：建立连接、通信、释放连接</li></ul></li><li>分组交换<ul><li>可以无连接也可以面向连接</li><li>划分成较短的、固定长度的数据段</li><li>存储转发</li></ul></li><li>报文交换<ul><li>存储转发传输整个报文</li></ul></li></ul><p>时延=传输时延+处理时延+排队时延+传播时延</p><ul><li>发送时延：数据块长度/发送速率</li><li>处理时延：交换结点为存储转发而进行一些必要的处理所花费的时间</li><li>排队时延：结点缓存队列中分组排队所经历的时延</li><li>传播时延：信号在传输媒体上传播所需的时间（取决于信道距离）<ul><li>传输速率可以提高，但传播速率是物理特性决定的</li></ul></li></ul><p>时延带宽积：传播时延与带宽的乘积，链路上最大的比特数量</p><p>信道利用率：信道被利用的时间占比，非越高越好</p><p>网络利用率U：信道利用率加权平均值</p><p>$当前时延D=\dfrac{空闲时延D_0}{1-U}$</p><p>网络协议三要素：语法、语义、时序</p><p>实体(Entity)：任何可发送或接收信息的硬件或软件进程</p><p>协议(Protocol)：控制对等实体之间的通信的规则集</p><p>第n层协议向第n+1层提供服务，是第n-1层的用户</p><h3 id="OSI-TCP-IP">OSI/TCP-IP</h3><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/1_1.png" alt="OSI和TCP/IP"></p><h2 id="二、物理层">二、物理层</h2><p>主要任务：确定与传输媒体的接口的一些特性，包括：机械特性、电气特性、功能特性、过程特性</p><p>数据通信系统可划分为三大部分：源系统(发送端)、传输系统(传输网络)、目的系统(接收端)。</p><p>信道(channel)分类：单工通信（只能单向传输）、半双工通信（双向传输但不能同时）、全双工通信（双向传输且可以同时）</p><p>导引型传输媒体：双绞线、同轴电缆、光纤</p><p>非导引型传输媒体：无线电波、微波、红外线</p><p>宽带接入技术：非对称数字用户线ADSL(Asymmetric Digital Subscriber Line)、光纤同轴混合网HFC(Hybrid Fiber Coax)、光纤到…FTTx(Fiber To The x)</p><h3 id="2-1-调制">2.1 调制</h3><p>基本带通调制方式：调幅AM、调频FM、调相PM</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/2_2.png" alt="基本带通调制方式"></p><p>一种多元制的振幅相位混合调制方法：正交振幅调制(Quadrature Amplitude Modulation，QAM)</p><ul><li>可供选择的相位有12种，而对于每一种相位有1或2种振幅可供选择。</li><li>共有16种不同的组合，每种组合可以用4bit二进制数表示，因此这16个点中的每个点可对应于一种4bit的编码。</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/2_3.png" alt="正交振幅调制">、</p><h3 id="2-2-信道极限容量">2.2 信道极限容量</h3><p>奈氏准则-奈奎斯特：在带宽为W(Hz)的低通信道中，若不考虑噪声影响，则码元传输的最高速率是2W(码元/秒 波特Baud)</p><p>信噪比(Signal-to-Noise Ratio, SNR)：信号功率与噪声功率之比</p><p>$SNR=10\log_{10}(\dfrac{S}{N})$(单位：dB)</p><p>香农定理：$C=W\log_2(1+\dfrac{S}{N})$(单位：bps)</p><p>W为信道的带宽(Hz)，S为信道内所传信号的平均功率(数据传输速率=码元传输速率*码元携带的比特数)，N为信道内部的高斯噪声功率</p><h4 id="信道极限容量例题">信道极限容量例题</h4><ol><li>信道带宽为3000Hz，信噪比为30dB，则最大数据速率为多少？<ul><li>根据信噪比公式，$SNR=10log_{10}(\frac{S}{N})=30dB \Rightarrow \frac{S}{N}=10^3$</li><li>根据香农公式，$C=W\log_2(1+\frac{S}{N})=3000\log_2(1+10^3) \approx 3000\times9.97 \approx 30000bps$</li></ul></li><li>下列因素中,不会影响信道数据传输率的是( )<ul><li>A. 信噪比 B. 频率宽带 C. 调制速率 D. 信号传播速度</li><li>A：$\frac{S}{N}$, B：W, C：S的因子, D：不影响</li></ul></li><li>若信道在无噪声情况下的极限数据传输速率不小于信噪比为30dB条件下的极限数据传输速率，则信号状态数至少是？<ul><li>记信道带宽为W，一个码元所占位数k。</li><li>根据信噪比公式，$SNR=10log_{10}(\frac{S}{N})=30dB \Rightarrow \frac{S}{N}=10^3$</li><li>根据奈氏准则和香农公式：$2W\times k \ge W\log_2(1+10^3) \Rightarrow 2k \ge \log_2(1+10^3)\approx 10 \Rightarrow k \ge 5$</li><li>状态数至少是$2^5=32$</li></ul></li></ol><h3 id="2-3-信道复用技术">2.3 信道复用技术</h3><ul><li>复用器(multiplexer)：复用开始前，多个低速信道合成一个高速信道的设备</li><li>分用器(de-multiplexer)：复用结束后，将高速信道分解为多个低速信道的设备</li></ul><p><strong>频分复用FDM</strong>(Frequency Division Multiplexing)：将频带分成若干窄带，各路信号分别搬移到适当的频率位置，彼此互不干扰。<br>频分复用的所有用户在同样的时间占用不同的带宽资源，这里的“带宽”是频率带宽而不是数据的发送速率。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/2_4.png" alt="频分复用"></p><p><strong>时分复用TDM</strong>(Time Division Multiplexing)：将时间分成若干时隙，每个时隙用来传输一个信号，然后把这些时隙信号叠加在一起传输。<br>时分复用可能会造成线路资源的浪费，解决方法：统计时分复用STDM（Statistical TDM）</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/2_5.png" alt="时分复用"></p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/2_6.png" alt="时分复用可能会造成线路资源的浪费"></p><p><strong>波分复用WDM</strong>(Wavelength Division Multiplexing)：光的频分复用，使用一根光纤来同时传输多个光载波信号。</p><p><strong>码分多址CDMA</strong>(Code Division Multiple Access)：多个不同地址的用户共享码分复用(CDM, Code Division Multiplexing)信道。</p><p>码片(chip)：每一个比特时间划分为m个短的间隔，称为</p><p>码片序列：每个站被指派一个唯一的m bit码片序列</p><p>以$S=00011011, T=00101110$为例</p><ul><li>S发送1：发送码片序列$S=00011011$</li><li>S发送0：发送码片序列的反码$S_x=11100100$</li><li>按照惯例，1记为+1，0记为-1，码片序列S为-1 -1 -1 +1 +1 -1 +1 +1</li><li>码片特点：<ul><li>规格化内积$S\cdot S=\frac{1}{m}\sum_{i=1}^{m}S_iS_i=1$</li><li>规格化内积$S\cdot S_x=\frac{1}{m}\sum_{i=1}^{m}S_iS_{xi}=-1$</li></ul></li></ul><p>CDMA的重要特点</p><ul><li>每个站分配的码片序列不仅必须各不相同，并且还必须互相正交(规格化内积为0)<ul><li>S和T正交：$S\cdot T=\frac{1}{m}\sum_{i=1}^{m}S_iT_i=0$</li></ul></li><li>在实用的系统中是使用伪随机码序列</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/2_7.png" alt="码分复用"></p><h2 id="三、数据链路层">三、数据链路层</h2><p>数据链路(data link)：除了物理线路外，还必须有通信协议来控制这些数据的传输。<br>数据链路由物理链路和实现这些协议的硬件和软件构成。</p><p>数据链路层使用的信道：点对点信道、广播信道</p><p>数据链路层的三个基本问题：封装成帧、透明传输、差错检测</p><ol><li>封装成帧：在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。</li><li>透明传输：使数据链路层的协议对上层是透明的，网络层不必关心数据链路层的具体实现。</li><li>差错检测：在传输过程中可能会产生比特差错，为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施</li></ol><p>使用载波监听多点接入/碰撞检测协议CSMA/CD的以太网不能进行全双工通信而只能进行双向交替通信(半双工通信)</p><ul><li>多点接入CSMA：许多计算机以多点接入的方式连接在一根总线上</li><li>碰撞检测CD：每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞</li></ul><h3 id="3-1-循环冗余校验CRC">3.1 循环冗余校验CRC</h3><p>循环冗余校验CRC(Cyclic Redundancy Check)是一种差错检测方法，通过在数据末端添加冗余位，确定数据是否在传输过程中发生变化。</p><p>模二运算：一种不考虑进位的二进制按位运算。</p><ul><li>加法/减法：相加减而不考虑进位/借位，即二进制按位异或运算</li><li>乘法：列竖式，逐位相乘，按位异或</li><li>除法：列竖式，商上余数的首位，按位相减</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/3_2.png" alt="模二乘法"><br><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/3_3.png" alt="模二除法"></p><p>CRC冗余码的计算和校验：</p><ol><li>原始二进制数据$M=1100$</li><li>将原始数据左移$r=3$位（冗余位位数）得到$M\times 2^r=1100|000$</li><li>约定一个$r+1=4$位生成多项式$G=1011$作为除数<ul><li>生成多项式的最高位和最低位都必须是1</li><li>当传输的数据X的任何一位发生错误时，被G除的余数不为0</li><li>数据X的不同位发生错误时，被G除的余数不同</li></ul></li><li>模二除法：$(M \times 2^r) \div G = Q \cdots R$<ul><li>$1100000 \div 1011 = 1110 \cdots 010$</li><li>商$Q=1100$，余数$R=010$</li><li>此时有$M \times 2^r = Q \times G + R$ 成立</li></ul></li><li>将余数R添加到原始数据M后面，得到传输的数据$X=1100|010$<ul><li>$M \times 2^r + R = Q \times G + R + R = Q \times G$</li></ul></li><li>接收端将接收到的数据X对G进行模二除法，若余数为0则无差错，否则有差错</li></ol><p>差错定位/纠正：</p><table><thead><tr><th style="text-align:center">X=A1~A7</th><th style="text-align:center">余数</th><th style="text-align:center">出错位</th></tr></thead><tbody><tr><td style="text-align:center">1100010</td><td style="text-align:center">010</td><td style="text-align:center">无差错</td></tr><tr><td style="text-align:center">110001<strong>1</strong></td><td style="text-align:center">001</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">11000<strong>0</strong>0</td><td style="text-align:center">000</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">1100<strong>1</strong>10</td><td style="text-align:center">110</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">110<strong>1</strong>010</td><td style="text-align:center">011</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">11<strong>1</strong>0010</td><td style="text-align:center">110</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">1<strong>0</strong>0010</td><td style="text-align:center">111</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center"><strong>0</strong>10010</td><td style="text-align:center">101</td><td style="text-align:center">1</td></tr></tbody></table><h3 id="3-2-帧检验序列FCS">3.2 帧检验序列FCS</h3><p>帧检验序列FCS(Frame Check Sequence)是数据链路层的差错检测技术，用于检测数据在传输过程中是否发生了变化。</p><p>CRC和FCS的关系：CRC是一种常用的差错检测方法，而FCS是添加在数据后面的冗余码。FCS可以用CRC这种方法得出，但CRC并非用来获得FCS的唯一方法。</p><p>无差错接受：接收端对收到的每一帧进行CRC检验，若余数为0则无差错，接受，否则丢弃</p><p>码距：同一编码中，任意两个合法编码之间不同二进数位数的最小值。</p><ul><li>码距越大，抗干扰能力、纠错能力越强，数据冗余越大，编码效率越低</li><li>检错位数=码距//2，纠错位数=(码距-1)//2</li><li>特殊情况：码距=3，检错1纠错1，或检错2纠错0</li></ul><p>校验码中增加冗余项的目的就是为了增大码距</p><p>仅用循环冗余检验CRC差错检测技术只能做到无差错接受，要做到“可靠传输”（即发送什么就收到什么）就必须再加上确认和重传机制。</p><ul><li>需要考虑的问题：帧重复、帧丢失、帧乱序</li><li>解决方法：帧编号、确认和重传</li></ul><p>OSI/RM模型的观点：数据链路层要做成无传输差错的。但这种理念目前不被接受</p><h3 id="3-2-点对点协议PPP">3.2 点对点协议PPP</h3><p>PPP是现在全世界使用的最多的数据链路层协议，用户使用拨号电话线接入互联网时，一般都是使用PPP协议。</p><p>PPP协议的组成部分（自下而上）：</p><ol><li>一个将IP数据报封装到串行链路的方法。既支持异步链路，也支持同步链路</li><li>一个用来建立、配置和测试数据链路连接的链路控制协议LCP(Link Control Protocol)</li><li>一套网络控制协议NCP(Network Control Protocol)。允许在点到点连接上使用多种网络层协议</li></ol><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/3_5.png" alt="PPP协议的工作状态"></p><h4 id="PPP的帧格式">PPP的帧格式</h4><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/3_4.png" alt="PPP的帧格式"></p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">长度</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">帧开始标志F</td><td style="text-align:center">1B</td><td style="text-align:center">01111110(0x7E)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">地址A</td><td style="text-align:center">1B</td><td style="text-align:center">11111111(0xFF)</td><td style="text-align:center">规定值，无作用</td></tr><tr><td style="text-align:center">控制C</td><td style="text-align:center">1B</td><td style="text-align:center">00000011(0x03)</td><td style="text-align:center">规定值，无作用</td></tr><tr><td style="text-align:center">协议P</td><td style="text-align:center">2B</td><td style="text-align:center">IP数据报：0x0021<br>PPP链路控制数据：0xC021<br>网络控制数据：0x8021</td><td style="text-align:center">表示上层协议类型</td></tr><tr><td style="text-align:center">信息字段</td><td style="text-align:center">0~1500B</td><td style="text-align:center">IP数据报等数据</td><td style="text-align:center">可变长度，不包括FCS</td></tr><tr><td style="text-align:center">帧校验序列FCS</td><td style="text-align:center">2B</td><td style="text-align:center">CRC校验码</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">帧结束标志F</td><td style="text-align:center">1B</td><td style="text-align:center">01111110(0x7E)</td><td style="text-align:center"></td></tr></tbody></table><h3 id="3-3-透明传输实现：字节填充和比特填充">3.3 透明传输实现：字节填充和比特填充</h3><p>PPP异步传输（逐字符）：字节填充</p><ul><li>字节填充转义符：0x7D</li><li>0x7E转义为0x7D 0x5E</li><li>0x7D转义为0x7D 0x5D</li><li>ASCII码小于0x20,+0x20转义。如0x03转义为0x7D 0x23</li></ul><p>字节填充例题：一个PPP帧的信息字段为 7E 7D 5E FE 27 7D 5D 7D 27 7E，求真正的信息字段</p><ul><li>标出转义字符：76 (7D 5E) FE 27 (7D 5D) (7D 27) 7E</li><li>字符转义：76 (7E) FE 27 (7D) (07) 7E</li></ul><p>PPP同步传输（逐比特位连续发送）：比特填充</p><ul><li>在发送端，只要发现有5个连续的1，则立即填入一个0</li><li>在接收端，只要发现有5个连续的1，且后面紧跟一个0，则删除这个0</li></ul><p>比特填充例题：若接收端收到的 PPP 的数据部分是0001110111110111110110 ，问删除发送端加入的零比特后变成怎样的比特串</p><ul><li>标出111110：0001110(111110)(111110)110</li><li>删除零比特：0001110(11111)(11111)110</li></ul><h3 id="3-4-使用广播信道的数据链路层">3.4 使用广播信道的数据链路层</h3><p>局域网拓扑结构</p><ul><li>总线网：所有站点共享一条总线。<ul><li>匹配电阻：避免总线有害电磁波反射</li></ul></li><li>星形网：所有站点都连接到一个中心站点。<ul><li>集线器：中心站点的功能是转发数据</li></ul></li><li>环形网：所有站点连接成一个环形。<ul><li>干线耦合器：环形网的数据传输方向是固定的（顺时针/逆时针）</li></ul></li></ul><p>媒体共享技术</p><ul><li>静态划分信道：TDM、FDM、WDM、CDM<ul><li>代价高，不适合局域网</li></ul></li><li>动态媒体接入控制（多点接入）<ul><li>随机接入：随机发送信息，要有冲突检测和冲突解决机制</li><li>受控接入：多点线路探询(polling)或轮询</li></ul></li></ul><p>局域网的数据链路层的两个子层：辑链路控制LLC(Logical Link Control)子层、媒体接入控制MAC(Media Access Control)子层</p><p>网卡的作用：进行串行/并行转换、<strong>实现以太网协议</strong>、存储MAC地址</p><h4 id="3-4-以太局域网（以太网）">3.4 以太局域网（以太网）</h4><p>以太网单程端到端时延 $\tau$ ，争用期长度 $2\tau$ ，帧长 $L(bit)$ ，数据发送速率 $C(bps)$ ，帧发送时间 $T_0=\frac{L}{C}$</p><p>发送一帧的平均时间：$k\cdot 2\tau + T_0 + \tau$（发送完成后等待一个$\tau$的传播时间）</p><p>信道利用率：$S=\dfrac{T_0}{k\cdot 2\tau + T_0+\tau}$</p><p>要提高以太网的信道利用率，就必须减小$\tau$与$T_0$之比：$a=\frac{\tau}{T_0}$。<br>a越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低</p><p>理想情况下的极限信道利用率$S_{max}=\dfrac{T_0}{T_0+\tau}=\dfrac{1}{1+a}$</p><p>以太网MAC帧格式（DIX Ethernet V2 标准）：</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/3_6.png" alt="以太网MAC帧格式"></p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">长度</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">前同步码</td><td style="text-align:center">7B</td><td style="text-align:center">固定为10101010交替</td><td style="text-align:center">调整时钟频率</td></tr><tr><td style="text-align:center">帧开始定界符</td><td style="text-align:center">1B</td><td style="text-align:center">10101011</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">目的地址</td><td style="text-align:center">6B</td><td style="text-align:center">目的MAC地址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">源地址</td><td style="text-align:center">6B</td><td style="text-align:center">源MAC地址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">类型</td><td style="text-align:center">2B</td><td style="text-align:center">上层协议类型</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数据</td><td style="text-align:center">46~1500B</td><td style="text-align:center">IP数据报</td><td style="text-align:center">可变长度，不包括FCS</td></tr><tr><td style="text-align:center">FCS</td><td style="text-align:center">4B</td><td style="text-align:center">CRC校验码</td><td style="text-align:center"></td></tr></tbody></table><h3 id="3-5-HDLC协议">3.5 HDLC协议</h3><p>HDLC(High-level Data Link Control)是一种数据链路层协议，是ISO组织制定的一种数据链路层协议，是一种面向比特的协议。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">HDLC协议</th><th style="text-align:center">PPP协议</th></tr></thead><tbody><tr><td style="text-align:center">信道</td><td style="text-align:center">点对点</td><td style="text-align:center">点对点</td></tr><tr><td style="text-align:center">面向</td><td style="text-align:center">比特</td><td style="text-align:center">字节</td></tr><tr><td style="text-align:center">透明性</td><td style="text-align:center">0比特填充</td><td style="text-align:center">字节填充</td></tr><tr><td style="text-align:center">通信</td><td style="text-align:center">全双工、半双工</td><td style="text-align:center">全双工</td></tr><tr><td style="text-align:center">可靠性</td><td style="text-align:center">使用编号和确认机制，提供可靠传输</td><td style="text-align:center">只保证无差错接收CRC检验</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">多一个2字节的协议字段。当协议字段值为0x0021时，表示信息字段是IP数据报</td></tr></tbody></table><h2 id="四、网络层">四、网络层</h2><h3 id="4-1-网络层的基本概念">4.1 网络层的基本概念</h3><h4 id="4-1-1-网络层提供的两种服务">4.1.1 网络层提供的两种服务</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">虚电路服务</th><th style="text-align:center">数据报服务</th></tr></thead><tbody><tr><td style="text-align:center">思路</td><td style="text-align:center">可靠通信应当由网络来保证</td><td style="text-align:center">通信的可靠性应当由用户主机来保证</td></tr><tr><td style="text-align:center">建立的连接</td><td style="text-align:center">必须有</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">终点地址</td><td style="text-align:center">仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td style="text-align:center">每个分组都有终点的完整地址</td></tr><tr><td style="text-align:center">分组的转发</td><td style="text-align:center">属于同一条虚电路的分组均按照同一路由进行转发</td><td style="text-align:center">每个分组独立选择路由进行转发</td></tr><tr><td style="text-align:center">结点出故障时</td><td style="text-align:center">所有通过出故障的结点的虚电路均不能工作</td><td style="text-align:center">出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td style="text-align:center">分组的顺序</td><td style="text-align:center">总是按发送顺序到达终点</td><td style="text-align:center">到达终点时不一定按发送顺序</td></tr><tr><td style="text-align:center">端到端的差错处理和流量控制</td><td style="text-align:center">可以由网络负责，也可以由用户主机负责</td><td style="text-align:center">由用户主机负责</td></tr></tbody></table><h4 id="4-1-2-中间设备-中继系统">4.1.2 中间设备/中继系统</h4><ul><li>物理层：转发器(repeater)</li><li>数据链路层：网桥(bridge)</li><li>网络层：路由器(router)</li><li>网络层以上：网关(gateway)</li></ul><h3 id="4-2-IP协议">4.2 IP协议</h3><p>网际协议IP是TCP/IP体系中两个最主要的协议之一。与IP协议配套使用的还有三个协议：</p><ul><li>地址解析协议ARP(Address Resolution Protocol)</li><li>网际控制报文协议ICMP(Internet Control Message Protocol)</li><li>网际组管理协议IGMP(Internet Group Management Protocol)</li></ul><h4 id="4-2-1-IP地址分类">4.2.1 IP地址分类</h4><p>IP地址分为A、B、C、D、E五类，每类地址的网络号和主机号的划分不同。</p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">前缀</th><th style="text-align:center">网络号</th><th style="text-align:center">主机号</th><th style="text-align:center">第一字节范围</th><th style="text-align:center">子网掩码</th><th style="text-align:center">主机数</th><th style="text-align:center">预留私有地址网段（RFC 1918）</th></tr></thead><tbody><tr><td style="text-align:center">A类</td><td style="text-align:center">0</td><td style="text-align:center">7位</td><td style="text-align:center">24位</td><td style="text-align:center">0~127</td><td style="text-align:center">/8</td><td style="text-align:center">2^24-2=16777214</td><td style="text-align:center">10.0.0.0~10.255.255.255</td></tr><tr><td style="text-align:center">B类</td><td style="text-align:center">10</td><td style="text-align:center">14位</td><td style="text-align:center">16位</td><td style="text-align:center">128~191</td><td style="text-align:center">/16</td><td style="text-align:center">2^16-2=65534</td><td style="text-align:center">172.16.0.0~172.31.255.255</td></tr><tr><td style="text-align:center">C类</td><td style="text-align:center">110</td><td style="text-align:center">21位</td><td style="text-align:center">8位</td><td style="text-align:center">192~223</td><td style="text-align:center">/24</td><td style="text-align:center">2^8-2=254</td><td style="text-align:center">192.168.0.0~192.168.255.255</td></tr><tr><td style="text-align:center">D类</td><td style="text-align:center">1110</td><td style="text-align:center">多播地址28位</td><td style="text-align:center">-</td><td style="text-align:center">224~239</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">E类</td><td style="text-align:center">1111</td><td style="text-align:center">保留地址</td><td style="text-align:center">-</td><td style="text-align:center">240~255</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><h3 id="4-2-2-地址解析协议ARP">4.2.2 地址解析协议ARP</h3><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/4_1.png" alt="ARP工作原理"></p><p>当主机A欲向本局域网上的某个主机B发送IP数据报时，就先在其ARP高速缓存中查看有无主机B的IP地址。<br>如有，就可查出其对应的硬件地址，再将此硬件地址写入MAC，然后通过局域网将该MAC发往此硬件地址。<br>如没有，ARP进程在本局域网上广播发送一个ARP请求分组收到ARP响应分组后，将得到的P地址到硬件地址的映射写入ARP高速缓存。</p><h3 id="4-2-3-IP数据报的封装格式">4.2.3 IP数据报的封装格式</h3><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/4_2.png" alt="IP数据报的封装格式"></p><p>IP数据报的封装格式：</p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">长度</th><th style="text-align:left">值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">版本</td><td style="text-align:center">4b</td><td style="text-align:left">IPv4为4</td><td style="text-align:left">IP协议的版本号</td></tr><tr><td style="text-align:center">首部长度</td><td style="text-align:center">4b</td><td style="text-align:left">首部长度</td><td style="text-align:left">最大为1111(15)，单位为4字节，即首部最大为60字节</td></tr><tr><td style="text-align:center">区分服务</td><td style="text-align:center">8b</td><td style="text-align:left"></td><td style="text-align:left">服务类型，一般不使用</td></tr><tr><td style="text-align:center">总长度</td><td style="text-align:center">16b</td><td style="text-align:left">IP数据报的总长度</td><td style="text-align:left">单位为字节，包括首部和数据部分</td></tr><tr><td style="text-align:center">标识</td><td style="text-align:center">16b</td><td style="text-align:left">标识符</td><td style="text-align:left">用于标识发送的数据报</td></tr><tr><td style="text-align:center">标志</td><td style="text-align:center">3b</td><td style="text-align:left">标志位</td><td style="text-align:left">MF：1位，1表示还有分片<br>DF：1位，1表示不允许分片<br>保留位：1位</td></tr><tr><td style="text-align:center">片偏移</td><td style="text-align:center">13b</td><td style="text-align:left">片偏移</td><td style="text-align:left">单位为8字节，表示该片相对于原始数据报的偏移量</td></tr><tr><td style="text-align:center">生存时间</td><td style="text-align:center">8b</td><td style="text-align:left">TTL</td><td style="text-align:left">数据报在网络中可通过的路由器数的最大值，每经过一个路由器减1，为0时丢弃</td></tr><tr><td style="text-align:center">协议</td><td style="text-align:center">8b</td><td style="text-align:left">协议号</td><td style="text-align:left">指出此数据报携带的数据使用何种协议，如TCP为6，UDP为17</td></tr><tr><td style="text-align:center">首部校验和</td><td style="text-align:center">16b</td><td style="text-align:left">首部校验和</td><td style="text-align:left">只检验数据报的首部不检验数据部分<br>这里不采用CRC检验码而采用简单的计算方法</td></tr><tr><td style="text-align:center">源地址</td><td style="text-align:center">32b</td><td style="text-align:left">源IP地址</td><td style="text-align:left">发送数据报的主机的IP地址</td></tr><tr><td style="text-align:center">目的地址</td><td style="text-align:center">32b</td><td style="text-align:left">目的IP地址</td><td style="text-align:left">接收数据报的主机的IP地址</td></tr><tr><td style="text-align:center">选项</td><td style="text-align:center">可变</td><td style="text-align:left"></td><td style="text-align:left">选项字段的长度是可变的，最长为40字节</td></tr></tbody></table><p>IP数据报分片例：一数据报的总长度为3820字节，其数据部分的长度为3800字节(使用固定首部)，MTU=1420字节</p><ul><li>首部长度：20字节</li><li>分片最长数据长度：1420-20=1400字节</li><li>分片数据长度：3800=1400+1400+1000</li><li>分片1：偏移0，MF=1</li><li>分片2：偏移1400/8=175，MF=1</li><li>分片3：偏移2800/8=350，MF=0</li></ul><h3 id="4-3-IP层分组转发过程">4.3 IP层分组转发过程</h3><h4 id="4-3-1-分组转发算法">4.3.1 分组转发算法</h4><ol><li>从数据报的首部提取目的主机D的IP地址,得出目的网络地址为N</li><li>若网络N与此路由器直接相连，则把数据报直接交付目的主机D；否则是间接交付，执行下一步</li><li>若路由表中有目的地址为D的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行下一步</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行下一步</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器，否则，报告转发分组出错</li></ol><h4 id="4-3-2-子网划分">4.3.2 子网划分</h4><p>借位：从主机最高位开始借位变为新的子网位，剩余部分仍为主机位</p><p>例如192.168.1.0/24可划分为：</p><ul><li>2个子网：192.168.1.0/25、192.168.1.128/25</li><li>4个子网：192.168.1.0/26、192.168.1.64/26、192.168.1.128/26、192.168.1.192/26</li></ul><p>192.168.1.55/26 的网络号：将IP地址转换为二进制，取前26位即可。<br>192.168.1.55(00|110111)=&gt;192.168.1.0</p><h4 id="4-3-3-划分子网的分组转发算法">4.3.3 划分子网的分组转发算法</h4><ol><li>从数据报的首部提取目的主机D的IP地址</li><li>先用直接相连的各网络的子网掩码和D逐位相“与”，看是否和相应的网络地址匹配。若匹配，则将分组直接交付；否则就是间接交付，执行下一步</li><li>若路由表中有目的地址为D的特定主机路由，则将分组传送给指明的下一跳路由器；否则，执行下一步</li><li>对路由表中的每一行的子网掩码和 D 逐位相“与”，若其结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行下一步</li><li>若路由表中有一个默认路由，则将分组传送给指明的默认路由器；否则，报告转发分组出错</li></ol><h4 id="4-3-4-无分类IP地址CIDR">4.3.4 无分类IP地址CIDR</h4><p>一个 CIDR 地址块可以表示很多地址，这种地址的聚合常称为路由聚合，它使得路由表中的一个项目可以表示很多个（例如上千个）原来传统分类地址的路由。</p><p>最长前缀匹配：在路由表中查找一个与目的地址最匹配的路由表项，即查找最长的前缀匹配。</p><h3 id="4-4-网际控制报文协议ICMP">4.4 网际控制报文协议ICMP</h3><p>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。<br>ICMP 不是高层协议，而是IP层的协议。<br>ICMP 报文作为IP层数据报的数据，加上数据报的首部，组成IP数据报发送出去。</p><p>ICMP差错报文：终点不可达、时间超限、参数问题、改变路由(重定向)、源抑制</p><p>ICMP询问报文：回送请求和回答报文、时间戳请求和回答报文</p><p>ICMP应用：PING、Traceroute</p><h3 id="4-5-路由选择协议">4.5 路由选择协议</h3><p>内部网关协议 IGP:具体的协议有多种，如RIP和OSPF等</p><p>外部网关协议 EGP:目前使用的协议就是BGP</p><h4 id="4-5-1-RIP协议">4.5.1 RIP协议</h4><p>RIP是一种基于距离矢量（Distance-Vector）算法的协议，它使用跳数（Hop Count）作为度量值来衡量到达目的地址的距离。</p><p>在RIP网络中，缺省情况下，设备到与它直接相连网络的跳数为0，通过一个设备可达的网络的跳数为1，其余依此类推。也就是说，度量值等于从本网络到达目的网络间的设备数量。</p><p>为限制收敛时间，RIP规定度量值取0～15之间的整数，大于或等于16的跳数被定义为无穷大，即目的网络或主机不可达。由于这个限制，使得RIP不可能在大型网络中得到应用。</p><p>RIP路由器工作流程：</p><ul><li>RIP路由器A,B初始的路由表中只有自己的直连路由。</li><li>每30秒，向相邻路由器发送自己的路由表。</li><li>收到相邻路由器的路由表后，更新自己的路由表：<ul><li>新增：如果收到的路由表中有自己没有的路由，则添加到自己的路由表中。</li><li>更新：如果收到的路由表中有自己已有的路由，且新的跳数更小，则更新自己的路由表的跳数。</li></ul></li><li>RIP计时器：<ul><li>更新计时器：每30秒左右发送一次路由表。</li><li>失效计时器：180秒（6倍更新时间）未更新，标记为不可达。</li><li>刷新计时器：无效路由240秒未更新，从路由表中删除。</li></ul></li></ul><p>RIP协议的缺点：坏消息传播慢、收敛时间长、不适合大型网络</p><h4 id="4-5-2-OSPF协议">4.5.2 OSPF协议</h4><p>使用了 Dijkstra 提出的最短路径算法SPF(Shortest Path First)，是分布式的链路状态协议</p><p>支持可变长度的子网划分和无分类编址 CIDR</p><p>五种分组类型：问候分组Hello、数据库描述分组Database Description、链路状态请求分组Link State Request、链路状态更新分组Link State Update、链路状态确认分组Link State Acknowledgement</p><p>当互联网规模很大时，OSPF 协议要比距离向量协议 RIP 好得多，且没有“坏消息传播得慢”的问题</p><h4 id="4-5-3-BGP协议">4.5.3 BGP协议</h4><p>BGP 只能是力求寻找一条能够到达目的网络且比较好的路由（不能兜圈子），而并非要寻找一条最佳路由</p><p>一个BGP 发言人与其他自治系统中的BGP发言人要交换路由信息就要先建立TCP连接，然后在此连接上交换BGP报文以建立BGP会话(session)，利用 BGP 会话交换路由信息。</p><p>BGP协议的特点：支持CIDR、只在发生变化时更新有变化的部分</p><p>四种BGP报文：打开报文Open（与相邻BGP发言人建立联系）、更新报文Update（发送路由信息）、通知报文Notification（发送差错）、保持报文Keepalive（确认Open和保持连接）</p><h3 id="4-6-路由器的构成">4.6 路由器的构成</h3><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/4_3.png" alt="路由器的结构"></p><p>常用交换方法：通过存储器、通过总线、通过纵横交换结构</p><h4 id="4-7-IP多播">4.7 IP多播</h4><p>TCP/IP 协议使用的以太网多播地址块的范围是：从 00-00-5E-00-00-00 到 00-00-5E-FF-FF-FF</p><p>为了使路由器知道多播组成员的信息，需要利用网际组管理协议IGMP (Internet Group Management Protocol)，同时也需要路由器多播选择协议</p><p>IGMP阶段：加入多播组、探寻成员变化</p><p>多播路由选择协议转发多播数据报时使用三种方法：洪泛与剪除（适合于较小的多播组，RPB）、隧道技术、基于核心的发现技术</p><p>反向路径广播RPB(Reverse Path Broadcasting)：路由器收到多播数据报时，检查数据报的源地址，如果数据报的源地址是最短路径树上的成员，则转发数据报，否则丢弃</p><h2 id="五、传输层-运输层">五、传输层/运输层</h2><p>运输层向它上面的应用层提供通信服务</p><p>只有位于网络边缘部分的主机的协议栈才有运输层，而网络核心部分中的路由器在转发分组时都只用到下三层的功能</p><p>应用进程之间的通信又称为端到端的通信，运输层提供应用进程间的逻辑通信</p><table><thead><tr><th style="text-align:center">运输层</th><th style="text-align:center">网络层</th></tr></thead><tbody><tr><td style="text-align:center">为应用进程之间提供端到端的逻辑通信</td><td style="text-align:center">为主机之间提供逻辑通信</td></tr><tr><td style="text-align:center">对报文进行差错检测</td><td style="text-align:center">对首部进行差错检测</td></tr><tr><td style="text-align:center">需要两种不同的运输协议，即面向连接的TCP和无连接的UDP</td><td style="text-align:center">无连接的IP协议</td></tr></tbody></table><p>协议端口号：用于标识主机上的应用进程，简称端口。16位，范围0~65535</p><ul><li>服务端：0~1023为熟知端口号，1024~49151为登记端口号</li><li>客户端：49152(65536/4*3)~65535为短暂端口号</li></ul><table><thead><tr><th style="text-align:center">协议</th><th style="text-align:center">FTP</th><th style="text-align:center">Telnet</th><th style="text-align:center">SMTP</th><th style="text-align:center">DNS</th><th style="text-align:center">HTTP</th><th style="text-align:center">SMTP</th><th style="text-align:center">HTTPS</th></tr></thead><tbody><tr><td style="text-align:center">熟知端口号</td><td style="text-align:center">21/20</td><td style="text-align:center">23</td><td style="text-align:center">25</td><td style="text-align:center">53</td><td style="text-align:center">80</td><td style="text-align:center">110</td><td style="text-align:center">443</td></tr></tbody></table><h3 id="5-1-用户数据报协议UDP-v-s-传输控制协议TCP">5.1 用户数据报协议UDP v.s. 传输控制协议TCP</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">用户数据报协议UDP(User Datagram Protocol)</th><th style="text-align:center">传输控制协议TCP(Transmission Control Protocol)</th></tr></thead><tbody><tr><td style="text-align:center">连接服务</td><td style="text-align:center">无连接的协议，提供无连接服务</td><td style="text-align:center">面向连接的协议，提供面向连接服务</td></tr><tr><td style="text-align:center">可靠性</td><td style="text-align:center">不可靠</td><td style="text-align:center">全双工的可靠信道</td></tr><tr><td style="text-align:center">运输协议数据单元TPDU</td><td style="text-align:center">UDP报文/用户数据报</td><td style="text-align:center">TCP报文段</td></tr><tr><td style="text-align:center">传输方式</td><td style="text-align:center">单播、多播、广播</td><td style="text-align:center">点对点单播，不支持多播和广播</td></tr><tr><td style="text-align:center">面向</td><td style="text-align:center">报文</td><td style="text-align:center">字节流</td></tr><tr><td style="text-align:center">复杂性</td><td style="text-align:center">简单</td><td style="text-align:center">复杂</td></tr><tr><td style="text-align:center">应用</td><td style="text-align:center">多媒体</td><td style="text-align:center">文件传输、电子邮件、WWW</td></tr><tr><td style="text-align:center">应用层协议</td><td style="text-align:center">DNS、TFTP、SNMP、NFS</td><td style="text-align:center">HTTP、FTP、Telnet、SMTP</td></tr><tr><td style="text-align:center">拥塞控制</td><td style="text-align:center">无</td><td style="text-align:center">有</td></tr><tr><td style="text-align:center">首部开销</td><td style="text-align:center">8字节</td><td style="text-align:center">20字节</td></tr></tbody></table><h3 id="5-2-用户数据报协议UDP">5.2 用户数据报协议UDP</h3><p>只在IP数据报之上增加了复用和分用（端口）、差错检测功能</p><h4 id="5-2-1-UDP首部格式">5.2.1 UDP首部格式</h4><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_1.png" alt="UDP首部格式"></p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">长度</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">伪首部</td><td style="text-align:center">12B</td><td style="text-align:center">源IP地址、目的IP地址、协议号、UDP长度</td><td style="text-align:center">用于计算校验和</td></tr><tr><td style="text-align:center">源端口</td><td style="text-align:center">2B</td><td style="text-align:center">0~65535</td><td style="text-align:center">标识发送方应用进程</td></tr><tr><td style="text-align:center">目的端口</td><td style="text-align:center">2B</td><td style="text-align:center">0~65535</td><td style="text-align:center">标识接收方应用进程</td></tr><tr><td style="text-align:center">长度</td><td style="text-align:center">2B</td><td style="text-align:center">8~65535</td><td style="text-align:center">UDP报文长度</td></tr><tr><td style="text-align:center">校验和</td><td style="text-align:center">2B</td><td style="text-align:center">0~65535</td><td style="text-align:center">校验UDP首部和数据</td></tr></tbody></table><h4 id="5-2-2-UDP校验和">5.2.2 UDP校验和</h4><p>要加上12字节的伪首部，包含：源IP地址、目的IP地址、协议号、UDP长度</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_2.png" alt="校验和计算"></p><ol><li>二进制反码求和：<ol><li>统计出每一位上1的个数：24135445 04247779</li><li>从末尾开始，模二进位；首位进位加到末位<ul><li>24135445 042477(7+9/2=11)1</li><li>24135445 04247(7+11/2=12)11</li><li>24135445 0424(7+12/2=13)011</li><li>…</li><li>(2+6/2=5)0010110 11001011</li><li>10010110 1100101(1+5/2=3)</li><li>10010110 110010(1+3/2=2)1</li><li>10010110 11001(0+2/2=1)01</li><li>10010110 11001101</li></ul></li></ol></li><li>取反码：01101001 00110010，即为校验和</li></ol><h3 id="5-3-传输控制协议TCP">5.3 传输控制协议TCP</h3><p>套接字(socket)：IP地址:端口号</p><p>每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）确定。</p><h4 id="5-3-1-TCP首部格式">5.3.1 TCP首部格式</h4><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_4.png" alt="TCP首部格式"></p><table><thead><tr><th style="text-align:center">字段</th><th style="text-align:center">长度</th><th style="text-align:center">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">源端口</td><td style="text-align:center">2B</td><td style="text-align:center">0~65535</td><td style="text-align:center">标识发送方应用进程</td></tr><tr><td style="text-align:center">目的端口</td><td style="text-align:center">2B</td><td style="text-align:center">0~65535</td><td style="text-align:center">标识接收方应用进程</td></tr><tr><td style="text-align:center">序号</td><td style="text-align:center">4B</td><td style="text-align:center">0~4294967295</td><td style="text-align:center">每个字节都被编号，这是本报文段的第一个字节的序号</td></tr><tr><td style="text-align:center">确认号ack</td><td style="text-align:center">4B</td><td style="text-align:center">0~4294967295</td><td style="text-align:center">期望收到对方的下一个报文段的数据的第一个字节的序号，=序号+数据长度</td></tr><tr><td style="text-align:center">数据偏移</td><td style="text-align:center">4b</td><td style="text-align:center">0~15</td><td style="text-align:center">TCP首部长度，单位为4字节，最大为60字节</td></tr><tr><td style="text-align:center">保留</td><td style="text-align:center">6b</td><td style="text-align:center">0</td><td style="text-align:center">保留位</td></tr><tr><td style="text-align:center">控制位</td><td style="text-align:center">6b</td><td style="text-align:center">URG、ACK、PSH、RST、SYN、FIN</td><td style="text-align:center">URG：紧急数据优先传送<br>ACK：确认号字段有效<br>PSH：接收方尽快将累积数据交给应用层<br>RST：连接差错，重置连接<br>SYN：连接请求/接受<br>FIN：发送完毕，释放连接</td></tr><tr><td style="text-align:center">窗口rwnd</td><td style="text-align:center">16b</td><td style="text-align:center">0~65535</td><td style="text-align:center">接收窗口大小，单位为字节</td></tr><tr><td style="text-align:center">校验和</td><td style="text-align:center">16b</td><td style="text-align:center">0~65535</td><td style="text-align:center">首部和数据的校验和</td></tr><tr><td style="text-align:center">紧急指针</td><td style="text-align:center">16b</td><td style="text-align:center">0~65535</td><td style="text-align:center">紧急数据的长度（字节），紧急数据最后一位=序号+紧急指针-1</td></tr><tr><td style="text-align:center">选项</td><td style="text-align:center">可变</td><td style="text-align:center"></td><td style="text-align:center">最大报文段长度MSS、窗口扩大选项（3字节）、时间戳选项（10字节）、选择确认选项</td></tr><tr><td style="text-align:center">填充</td><td style="text-align:center">可变</td><td style="text-align:center"></td><td style="text-align:center">使首部长度为4的倍数</td></tr></tbody></table><h4 id="5-3-2-TCP可靠传输工作原理">5.3.2 TCP可靠传输工作原理</h4><p>自动重传请求ARQ(Automatic Repeat reQuest)：使用确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。<br>重传是自动进行的，不需要接收方发送重传请求。</p><p>TCP连接的每一端都必须设有两个窗口：一个发送窗口和一个接收窗口。TCP 两端的四个窗口经常处于动态变化之中。<br>TCP 的可靠传输机制用字节的序号进行控制，TCP所有的确认都是基于序号而不是基于报文段。<br>TCP连接的往返时间RTT也不是固定不变的，需要使用特定的算法估算较为合理的重传时间。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">停止等待协议</th><th style="text-align:center">连续ARQ协议</th></tr></thead><tbody><tr><td style="text-align:center">发送分组数量</td><td style="text-align:center">1</td><td style="text-align:center">多个</td></tr><tr><td style="text-align:center">控制传输</td><td style="text-align:center">停止-等待</td><td style="text-align:center">滑动窗口协议</td></tr><tr><td style="text-align:center">确认方式</td><td style="text-align:center">单独确认</td><td style="text-align:center">单独确认+累积确认</td></tr><tr><td style="text-align:center">超时定时</td><td style="text-align:center">每个发送的分组</td><td style="text-align:center">每个发送的分组</td></tr><tr><td style="text-align:center">分组编号</td><td style="text-align:center">每个分组</td><td style="text-align:center">每个分组</td></tr><tr><td style="text-align:center">重传机制</td><td style="text-align:center">一个分组</td><td style="text-align:center">回退N</td></tr></tbody></table><h4 id="5-3-3-停止等待协议">5.3.3 停止等待协议</h4><p>停止等待协议是一种简单的ARQ协议。<br>在发送完一个分组后，必须暂时保留己发送的分组的副本。<br>分组和确认分组都必须进行编号。</p><p>优点：简单、易于实现</p><p>缺点：信道利用率低 $U=\dfrac{数据发送时间T_D}{T_D+往返时间RTT+ACK读取时间T_A}$</p><ol><li>无差错<ul><li>A发送分组1，启动定时器，等待B确认（ACK）</li><li>B收到分组1，发送ACK</li><li>A收到ACK，发送分组2</li></ul></li><li>分组差错<ul><li>A发送分组1，启动定时器，等待B确认</li><li>分组1损坏丢弃/中途丢失</li><li>A超时未收到ACK，重发分组1</li><li>B收到分组1，发送ACK</li></ul></li><li>确认差错/迟到<ul><li>A发送分组1，启动定时器，等待B确认</li><li>B收到分组1，发送ACK</li><li>ACK中途丢失</li><li>A超时未收到ACK，重发分组1</li><li>B收到分组1，重复，丢弃，重发ACK</li><li>A收到重发的ACK，发送分组2</li></ul></li></ol><h4 id="5-3-4-连续ARQ协议">5.3.4 连续ARQ协议</h4><p>连续ARQ协议是一种流水线协议，允许发送方发送多个分组而不必等待接收方的确认。</p><p>确认方式：接收方累积确认：不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，表示：到这个分组为止的所有分组都已正确收到了。</p><p>累积确认的优点是：容易实现，即使确认丢失也不必重传。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_3.png" alt="累积确认"></p><p>重传方式：回退N：5个分组，第3个出错，接收方只对前2个分组发送确认，发送方收到确认后，重传第3个分组及后面的分组。</p><h3 id="5-3-5-TCP可靠通信具体实现">5.3.5 TCP可靠通信具体实现</h3><ul><li>假定A向B发送数据，当前A收到了B发来的确认报文，其中窗口=20，确认号=31（表示期望收到A的下一个报文的序号为31，且30以前的报文都已收到）。</li><li>此时A的发送窗口[31,50]，B的接收窗口[31,50]。A发送31~41</li><li>假设B收到31~33，发送确认号34，窗口=20的ACK，同时B的接收窗口滑动至[34,53]。</li><li>A收到ACK，窗口滑动至[34,53]。</li><li>未收到的数据在超时后重传。</li></ul><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_5.png" alt="TCP可靠通信具体实现"></p><ul><li>发送缓存用于存储：已发送但未收到确认的数据、准备发送的数据</li><li>接收缓存用于存储：已接收但未被使用的数据、未按序到达的数据</li></ul><h4 id="5-3-6-超时重传时间RTO的选择">5.3.6 超时重传时间RTO的选择</h4><ul><li>报文往返时间RTT：从发送方发送数据报到接收方收到确认报文的时间</li><li>加权移动平均往返时间RTTs：当监测到一个新的RTT时，计算新的RTTs<ul><li>$RTT_S=(1-\alpha)RTT_S+\alpha RTT$，其中$\alpha$一般取$\dfrac{1}{8}$</li></ul></li><li>平均偏差RTTd：初值为第一次RTT的一半，之后每次RTT的偏差为<ul><li>$RTT_D=(1-\beta)RTT_D+\beta|RTT_S-RTT|$，其中$\beta$一般取$\dfrac{1}{4}$</li></ul></li><li>超时重传时间RTO：略大于RTTs，$RTO=RTT_S+4*RTT_D$</li></ul><p>针对超时重传无法准确计算RTT的情况，可以使用Karn算法：</p><ol><li>只要报文段重传了，就不采用其往返时间RTT样本</li><li>报文段每重传一次，就把超时重传时间RTO增大一些，一般加倍</li></ol><h3 id="5-4-TCP流量控制">5.4 TCP流量控制</h3><p>端到端的问题</p><h4 id="5-4-1-滑动窗口实现流量控制">5.4.1 滑动窗口实现流量控制</h4><p>流量控制：让发送方发送速率不要太快，要让接收方来得及接收。</p><p>下图的传输流程通过3次更改接收窗口大小来实现流量控制。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_6.png" alt="TCP流量控制"></p><p>死锁：<br>B向A发送rwnd=0的ACK后，A不再发送数据。<br>B又有了一些缓存，向A发送rwnd&gt;0的ACK，但是丢失了。<br>A等待B的ACK，B等待A的数据，形成死锁。</p><p>解决：收到rwnd=0后启动持续计时器，每次到期发送一个“零窗口探测报文段”</p><h4 id="5-4-2-控制发送时机">5.4.2 控制发送时机</h4><ol><li>缓存存放的数据达到最大报文段长度MSS字节时，发送一个TCP报文段</li><li>由发送方进程通过PSH、URG标志位控制发送时机</li><li>发送方计时器到期，发送一个报文段</li></ol><p>Nagle算法：应用逐字节发送数据时，通过延迟发送小报文段来提高网络利用率。</p><ul><li>发送方发送第一个数据字节，缓存后续字节</li><li>收到接收方的ACK后，发送缓存中的数据</li><li>当到达的数据达到发送窗口大小一半或MSS时，发送缓存中的数据</li></ul><p>糊涂窗口综合症：交换的数据段大小不是全长而是一些较小的数据。由于每个数据段的有用数据（数据部分）较少，因而消耗的资源也更多，相应的传输效率也更低。</p><p>解决：接收方等待缓存有足够空间后，再发送rwnd&gt;0的ACK</p><h3 id="5-5-TCP拥塞控制">5.5 TCP拥塞控制</h3><p>流量控制:是端到端的问题(接收端控制发送端)，点对点通信量的控制。抑制发送端发送速率，以便使接收端来得及接收。</p><p>拥塞控制:是一个全局性的过程，涉及到与降低网络传输性能有关的所有因素。防止过多数据注入到网络，使网络中的路由器或链路不致过载。</p><h4 id="5-5-1-拥塞控制的基本原理">5.5.1 拥塞控制的基本原理</h4><p>出现资源拥塞的条件：对资源需求的总和&gt;可用资源</p><p>原因：链路容量不足、资源分配不均、路由器缓存空间和流量分布不均、处理机性能不足等</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_7.png" alt="拥塞控制的作用"></p><p>开环控制：设计网络时就考虑到拥塞控制，力求避免拥塞的发生</p><p>闭环控制：基于反馈环路</p><ul><li>监测网络系统以便检测到拥塞在何时、何处发生</li><li>将拥塞发生的信息传送到可采取行动的地方</li><li>调整网络系统的运行以解决出现的问题</li></ul><p>拥塞通知的传递策略：显示拥塞通告ECN</p><h4 id="5-5-2-TCP拥塞控制算法">5.5.2 TCP拥塞控制算法</h4><p>TCP采用基于窗口的方法进行拥塞控制，属于闭环控制。</p><p>TCP发送方维持一个拥塞窗口 CWND(Congestion Window):</p><ul><li>拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化</li><li>发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量</li><li>网络没有出现拥塞，拥塞窗口增大一些，以便发送更多的分组，提高网络的利用率</li><li>网络出现拥塞或有可能出现拥塞，拥塞窗口减小一些，减少注入到网络中的分组数</li></ul><p>TCP拥塞判断依据：重传定时器超时</p><p>TCP进行拥塞控制的算法有4种：慢开始、拥塞避免、快重传、快恢复</p><h4 id="5-5-3-慢开始和拥塞避免">5.5.3 慢开始和拥塞避免</h4><p>发送方最大报文段SMSS(Sender Maximum Segment Size)：MTU/MSS</p><p>初始拥塞窗口cwnd大小：</p><ul><li>旧规定：1~2个SMSS</li><li>新规定RFC5681：<ul><li>$SMSS&gt;2190B$：$cwnd=2SMSS$，&lt;=2个报文段</li><li>$2190B\ge SMSS&gt;1095B$：$cwnd=3SMSS$，&lt;=3个报文段</li><li>$1095B\ge SMSS$：$cwnd=4SMSS$，&lt;=4个报文段</li></ul></li><li>慢开始门限ssthresh（状态变量）：防止cwnd增长过快引起网络拥塞<ul><li>$cwnd&lt;ssthresh$：慢开始算法</li><li>$cwnd\ge ssthresh$：拥塞避免算法</li></ul></li></ul><p>慢开始算法：cwnd从1开始，2，4，8，16指数增长，若超出ssthresh则取ssthresh</p><p>避免拥塞：cwnd&gt;=ssthresh后，线性增长，每个RTT增加1</p><p>遇到超时：ssthresh=cwnd/2，cwnd=1，慢开始</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_8.png" alt="慢开始和拥塞避免"></p><h4 id="5-5-3-快重传和快恢复">5.5.3 快重传和快恢复</h4><p>快重传FR(Fast Retransmission)算法可以让发送方尽早知道发生了个别报文段的丢失。</p><p>发送方只要一连收到三个重复确认，应当立即进行重传(即“快重传”)，这样就不会出现超时，发送方不会误认为出现了网络拥塞。</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_9.png" alt="快重传"></p><p>快恢复算法：在快重传的基础上，将ssthresh减半，cwnd=ssthresh，然后进入拥塞避免状态</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/5_10.png" alt="TCP拥塞控制算法"></p><h3 id="5-6-TCP传输连接管理">5.6 TCP传输连接管理</h3><p>TCP协议工作流程：</p><ol><li>建立连接：三次握手<ol><li>发起方向接收方发送SYN报文，请求建立连接<ul><li>SYN=1，seq=x，表示发送方本次报文的第一个字节的序号是x</li></ul></li><li>接收方收到SYN报文后，回复SYN+ACK报文，表示同意建立连接<ul><li>SYN=1，ACK=1</li><li>seq=y，表示接收方本报文的第一个字节的序号是y</li><li>ack=x+1，表示接收方期望收到的下一个报文的序号是x+1，因为SYN报文占了一个序号</li></ul></li><li>发起方收到SYN+ACK报文后，回复ACK报文，表示连接建立成功<ul><li>ACK=1</li><li>seq=x+1，表示发送方本报文的第一个字节的序号是x+1</li><li>ack=y+1，表示发送方期望收到的下一个报文的序号是y+1，因为SYN+ACK报文占了一个序号</li></ul></li><li>三次握手完成，连接建立成功</li></ol></li><li>数据传输：数据传输阶段</li><li>断开连接：四次挥手<ol><li>发起方向接收方发送FIN报文，请求断开连接<ul><li>FIN=1，seq=u</li></ul></li><li>接收方收到FIN报文后，回复ACK报文，表示收到断开请求<ul><li>ACK=1，seq=v，ack=u+1</li></ul></li><li>接收方向发起方发送FIN+ACK报文，请求断开连接<ul><li>FIN=1，ACK=1，seq=w，ack=u+1</li></ul></li><li>发起方收到FIN+ACK报文后，回复ACK报文，表示收到断开请求，等待2MSL后断开连接<ul><li>ACK=1，seq=u+1，ack=w+1</li></ul></li><li>四次挥手完成，连接断开成功</li></ol></li></ol><ul><li>谁想建立或断开连接，谁就是发起方。发起方就是客户端，接收方就是服务器端。</li><li>MSL(Maximum Segment Lifetime)：报文最大生存时间，2MSL是为了保证网络中的所有报文都已经消失，不会再次出现在网络中，保证TCP协议的全双工连接能够可靠关闭</li></ul><p>TCP四个计时器：超时重传计时器、持续计时器(0窗口报文探测计时器)、时间等待计时器(2MSL关闭连接)、保活计时器、TCP发送报文计时器。</p><h2 id="六、应用层">六、应用层</h2><h3 id="6-1-域名系统DNS">6.1 域名系统DNS</h3><p>域名服务器类型：</p><ol><li>根域名服务器：管理顶级域名的服务器</li><li>顶级域名服务器：管理在该顶级域名服务器注册的二级域名服务器</li><li>权威域名服务器：管理自己的域名</li><li>本地域名服务器：提供域名解析服务，也称默认域名服务器</li></ol><p>域名查询方式：</p><ol><li>递归查询：主机向本地域名服务器发出查询请求，本地域名服务器不知道答案，则以DNS客户身份向根域名服务器发出查询请求</li><li>迭代查询：本地域名服务器向根域名服务器发出查询请求，根域名服务器告知本地域名服务器下一步应该向哪个域名服务器查询，本地域名服务器再向下一级域名服务器发出查询请求</li></ol><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications/6_1.png" alt="DNS查询过程"></p><h3 id="6-2-文件传输协议FTP">6.2 文件传输协议FTP</h3><p>文件传送协议 FTP (File Transfer Protocol) 是因特网上使用得最广泛的文件传送协议</p><p>实现了通过网络实现异构计算机间的文件“拷贝”、提供交互式的访问、屏蔽了各计算机系统的细节</p><p>FTP使用2个TCP连接：控制连接和数据连接</p><ul><li>控制连接（TCP21）：用于传送请求，在整个会话期间保持打开状态</li><li>数据连接（TCP20）：用于传送文件内容，每次传送文件时打开，传送完毕后关闭</li><li>端口号：服务器使用熟知端口TCP21/20，客户端使用其他端口号&gt;1023</li></ul><p>FTP传输模式：文本模式/ASCII模式、二进制模式/Binary模式</p><h3 id="6-3-简单文件传输协议TFTP">6.3 简单文件传输协议TFTP</h3><p>TFTP(Trivial File Transfer Protocol)是一个很小易于实现的文件传输协议</p><p>只支持传输文件，不支持交互，使用UDP数据报传输，端口号UDP69</p><p>文件长度恰好为 512 字节的整数倍，则在文件传送完毕后，还必须在最后发送一个只含首部而无数据的数据PDU</p><h3 id="6-4-远程终端协议Telnet">6.4 远程终端协议Telnet</h3><p>C/S模式，TCP连接，NVT格式，端口号默认TCP23</p><p>Telnet协议的缺点：明文传送</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Telnet</th><th style="text-align:center">SSH</th></tr></thead><tbody><tr><td style="text-align:center">功能</td><td style="text-align:center">远程登录</td><td style="text-align:center">远程登录</td></tr><tr><td style="text-align:center">运输层协议</td><td style="text-align:center">TCP</td><td style="text-align:center">TCP</td></tr><tr><td style="text-align:center">加密</td><td style="text-align:center">明文</td><td style="text-align:center">RSA加密、支持压缩</td></tr><tr><td style="text-align:center">端口号</td><td style="text-align:center">23</td><td style="text-align:center">22</td></tr></tbody></table><h3 id="6-5-万维网WWW">6.5 万维网WWW</h3><p>超文本传输协议HTTP(HyperText Transfer Protocol)是万维网的应用层协议，面向事务，本身无连接，是可靠交换文件的基础</p><p>HTTP协议永远都是客户端发起请求，服务器端响应请求，是无状态的协议，默认端口：TCP80</p><p>URL：&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p><p>HTTP报文：</p><ul><li>请求报文：请求行、请求头、空行、请求体</li><li>响应报文：状态行、响应头、空行、响应体</li></ul><p>状态码：三位数字</p><ul><li>1xx：信息性状态码，接收到请求，继续处理</li><li>2xx：成功状态码，请求成功接收、理解、接受</li><li>3xx：重定向状态码，需要进一步操作</li><li>4xx：客户端错误状态码，请求包含语法错误或无法完成</li><li>5xx：服务器错误状态码，服务器无法完成明显有效的请求</li></ul><h3 id="6-6-电子邮件">6.6 电子邮件</h3><p>两个重要标准：简单邮件传送协议、互联网报文交换格式(Internet Message Format)</p><p>三个主要构件：用户代理、邮件服务器、SMTP和POP3协议</p><p>发送邮件流程：</p><ol><li>发件人UA向发件人邮件服务器发送邮件<ul><li>SMTP，TCP25</li></ul></li><li>发件人邮件服务器以客户的身份向收件人邮件服务器发送邮件<ul><li>SMTP，TCP25</li></ul></li><li>收件人从收件人邮件服务器接收邮件<ul><li>POP3，TCP110</li></ul></li></ol><p>SMTP三阶段：握手、传输、结束</p><p>POP3：仅客户端内读取</p><p>IMAP：客户端与邮件更新同步</p><h3 id="6-7-DHCP协议">6.7 DHCP协议</h3><ol><li>DHCP Discover报文<ul><li>客户端启动时，客户主机-&gt;DHCP服务器：谁能给我一个IP地址？</li><li>源地址：0.0.0.0</li><li>源端口：UDP 68</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 67</li></ul></li><li>DHCP Offer报文<ul><li>服务器接收到广播数据包后，DHCP服务器-&gt;客户主机：我能给你分配IP地址192.168.1.2</li><li>源地址：服务器IP地址</li><li>源端口：UDP 67</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 68</li></ul></li><li>DHCP Request报文<ul><li>客户端接收到DHCP服务器分配的IP地址后，客户主机-&gt;DHCP服务器：好的，我接受你分配的IP地址192.168.1.2，请求确认</li><li>源地址：0.0.0.0</li><li>源端口：UDP 68</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 67</li></ul></li><li>DHCP ACK报文<ul><li>服务器接收到广播数据包后，DHCP服务器-&gt;客户主机：好的，我已经确认分配给你IP地址</li><li>源地址：服务器IP地址</li><li>源端口：UDP 67</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 68</li></ul></li></ol><p>DHCP端口号：UDP 67(服务器)和UDP 68(客户端)</p>]]></content>
    
    
    <summary type="html">地球村互联的基本原理</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.cclmsy.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://www.cclmsy.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《计算机网络与通信 实验》课程笔记</title>
    <link href="https://www.cclmsy.cc/posts/Computer_Networks_and_Communications(Lab).html"/>
    <id>https://www.cclmsy.cc/posts/Computer_Networks_and_Communications(Lab).html</id>
    <published>2024-12-18T15:00:00.000Z</published>
    <updated>2025-02-05T06:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="零-概述">零. 概述</h2><h3 id="0-1-网络分层OSI参考模型">0.1 网络分层OSI参考模型</h3><p>OSI参考模型是国际标准化组织(ISO)制定的一个用于计算机网络体系结构的标准框架。</p><p>OSI分为7层，自上而下分别是：</p><ul><li>7.应用层：应用软件</li><li>6.表示层：数据格式转换</li><li>5.会话层：决定采用哪种传输方式</li><li>4.传输层：提供端到端的通信，主机连接建立和断开，保证数据传输的可靠性</li><li>3.网络层：根据目标地址实现通信</li><li>2.数据链路层：根据物理地址实现数据的传输</li><li>1.物理层：传输介质</li></ul><h3 id="0-2-TCP-IP参考模型">0.2 TCP/IP参考模型</h3><p>TCP/IP参考模型是实际应用最广泛的网络协议体系结构，它只有4层，自上而下分别是：</p><ul><li>4.应用层(包含了OSI的应用层、表示层、会话层)<ul><li>数据</li><li>协议：HTTP、HTTPS、SSH、DNS、FTP、POP3、SMTP…</li></ul></li><li>3.传输层<ul><li>TCP首部+数据</li><li>TCP：面向连接的可靠传输协议，支持应用层所有协议</li><li>UDP：无连接的不可靠传输协议，支持DNS、DHCP、SMB等</li></ul></li><li>2.网络层<ul><li>IP首部+TCP首部+数据</li><li>IP：负责数据包的传输</li><li>ICMP：负责网络故障诊断</li><li>ARP：负责地址解析</li></ul></li><li>1.网络接口层(包含了OSI的数据链路层、物理层)<ul><li>数据链路层<ul><li>MAC首部+LLC首部+IP首部+TCP首部+数据+FCS(帧校验序列)</li><li>MAC子层协议：将数据包封装成帧，通过物理层传输</li></ul></li><li>物理层<ul><li>传输介质</li></ul></li></ul></li></ul><h3 id="0-3-网络层">0.3 网络层</h3><p>网络层关注的问题：如何找到合适的网络路径，将数据包从源主机传输到目的主机。</p><h4 id="0-3-1-数据包分组与封装">0.3.1 数据包分组与封装</h4><p>网络层主要协议：IP、ICMP、ARP</p><ul><li>分组交换：以分组为单位的<strong>存储转发</strong>的传输方式，将长的报文分割成若干短分组进行多次传输。</li><li>路由转发：源与目的主机之间可能存在多条相通的路径，网络层选择一条“最佳”路径完成数据转发。</li><li>拥塞控制：合理分配数据包的转发路径，提高转发效率。当产生网络拥塞时，及时更换传输路径。</li><li>异种网络的互连：当源主机和目标主机的网络不属于同一种网络类型时，为了解决不同网络在寻址、分组大小、协议等方面的差异，要求在不同种类网络交界处的路由器能够对分组进行处理，使得分组能够在不同网络上传输。不同的网络类型对分组大小要求不一样，需要重新分组。</li></ul><h4 id="0-3-2-网络层与数据链路层的关系">0.3.2 网络层与数据链路层的关系</h4><ul><li>通信双方：<ul><li>数据链路层实现在同一局域网内利用MAC地址进行通信</li><li>网络层实现在不同局域网内利用IP地址进行通信</li></ul></li><li>解决的问题：<ul><li>数据链路层实现的是保证两端链路的连通性，可以说数据链路层不能分辨异构的网络</li><li>网络层要解决异构网络互联的问题，按照不同网络协议的格式完成数据的重新封装</li></ul></li></ul><h4 id="0-3-3-IP地址、子网掩码（Subnet-Mask）、网关（Gateway）">0.3.3 IP地址、子网掩码（Subnet Mask）、网关（Gateway）</h4><p>IP地址：主机在Internet上的一个全世界范围内唯一32位标识符，用点分十进制表示，如192.168.0.1。</p><p>子网掩码：用来划分网络和主机的32位二进制数，用来指明一个IP地址的哪些位标识网络地址，哪些位标识主机地址。</p><p>表示方法：</p><ul><li>CIDR表示法：/子网掩码位数，如/24表示前24位是1，其余8位是0</li><li>点分十进制：<a href="http://xxx.xxx.xxx.xxx">xxx.xxx.xxx.xxx</a>，如255.255.255.0</li><li>转换例：255.255.254.0 -&gt; 11111111.11111111.11111110.00000000 -&gt; /23</li></ul><p>网关：一个网络的出口。当一个主机要将数据发送给其他网络的主机时，通常首先将数据发往网关。</p><h4 id="0-3-4-IP地址分类">0.3.4 IP地址分类</h4><p>IP地址分为A、B、C、D、E五类，每类地址的网络号和主机号的划分不同。</p><table><thead><tr><th>类别</th><th>前缀</th><th>网络号</th><th>主机号</th><th>第一字节范围</th><th>子网掩码</th><th>主机数</th><th>预留私有地址网段（RFC 1918）</th></tr></thead><tbody><tr><td>A类</td><td>0</td><td>7位</td><td>24位</td><td>0~127</td><td>/8</td><td>2^24-2=16777214</td><td>10.0.0.0~10.255.255.255</td></tr><tr><td>B类</td><td>10</td><td>14位</td><td>16位</td><td>128~191</td><td>/16</td><td>2^16-2=65534</td><td>172.16.0.0~172.31.255.255</td></tr><tr><td>C类</td><td>110</td><td>21位</td><td>8位</td><td>192~223</td><td>/24</td><td>2^8-2=254</td><td>192.168.0.0~192.168.255.255</td></tr><tr><td>D类</td><td>1110</td><td>多播地址28位</td><td>-</td><td>224~239</td><td>-</td><td>-</td><td>-</td></tr><tr><td>E类</td><td>1111</td><td>保留地址</td><td>-</td><td>240~255</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h4 id="0-3-5-子网划分">0.3.5 子网划分</h4><p>借位：从主机最高位开始借位变为新的子网位，剩余部分仍为主机位</p><p>例如192.168.1.0/24可划分为：</p><ul><li>2个子网：192.168.1.0/25、192.168.1.128/25</li><li>4个子网：192.168.1.0/26、192.168.1.64/26、192.168.1.128/26、192.168.1.192/26</li></ul><div STYLE="page-break-after: always;"></div><h2 id="一-传输介质">一. 传输介质</h2><h3 id="1-1-传输介质分类">1.1 传输介质分类</h3><h4 id="1-1-1-有线传输介质">1.1.1 有线传输介质</h4><p>有线传输介质是指在两个通信设备之间实现的物理连接部分，它能将信号从一方传输到另一方。</p><p>有线传输介质主要有<strong>双绞线</strong>、同轴电缆和光纤。双绞线和同轴电缆传输电信号，光纤传输光信号。</p><h4 id="1-1-2-无线传输介质">1.1.2 无线传输介质</h4><p>在自由空间传输的电磁波根据频谱可将其分为无线电波、微波、红外线、激光等，信息被加载在电磁波上进行传输。在局域网中，通常只使用无线电波和红外线作为传输介质。</p><h4 id="1-1-3-直连线和交叉线的区别">1.1.3 直连线和交叉线的区别</h4><p>直连线：两端的线序相同，用于连接不同设备。</p><ul><li>PC&lt;-&gt;Hub/Switch</li></ul><p>交叉线：两端的线序不同，用于连接相同设备。</p><h3 id="1-2-双绞线制作">1.2 双绞线制作</h3><h4 id="1-2-1-双绞线制作标准：EIA-TIA-568">1.2.1 双绞线制作标准：EIA/TIA 568</h4><ul><li>A：白绿/绿/白橙/蓝/白蓝/橙/白棕/棕</li><li>B：白橙/橙/白绿/蓝/白蓝/绿/白棕/棕</li></ul><h4 id="1-2-2-双绞线制作步骤">1.2.2 双绞线制作步骤</h4><ol><li>剥线：用压线钳将双绞线一端的外皮剥去3cm，露出8根线。</li><li>理线：将4对导线分别绕开，8根导线按EIA/TIA 568B标准顺序排列，将线芯撸直并拢。</li><li>剪线：将芯线放到压线钳切刀处，8根线芯要在同一平面上并拢，而且尽量直，留下一定的线芯长度约1.5CM处剪齐。</li><li>插线：将双绞线插入RJ45水晶头中，插入过程均衡力度直到插到尽头。检查8根线芯是否已经全部充分、整齐地排列在水晶头里面。</li><li>压线：用压线钳用力压紧水晶头，抽出即可。</li></ol><h4 id="1-2-3-双绞线测试">1.2.3 双绞线测试</h4><p>直连线(两端都是568B标准)：12345678</p><p>交叉线(一端是568A标准，一端是568B标准)：36145278</p><p>100Mbps以太网线实际使用的线：白绿/绿/白橙/橙</p><div STYLE="page-break-after: always;"></div><h2 id="二-DHCP">二. DHCP</h2><h3 id="2-1-DHCP工作原理">2.1 DHCP工作原理</h3><p>DHCP(Dynamic Host Configuration Protocol)是一种动态主机配置协议，它是一种自动分配IP地址的协议。</p><h4 id="DHCP工作原理">DHCP工作原理</h4><ol><li>DHCP Discover报文<ul><li>客户端启动时，客户主机-&gt;DHCP服务器：谁能给我一个IP地址？</li><li>源地址：0.0.0.0</li><li>源端口：UDP 68</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 67</li></ul></li><li>DHCP Offer报文<ul><li>服务器接收到广播数据包后，DHCP服务器-&gt;客户主机：我能给你分配IP地址192.168.1.2</li><li>源地址：服务器IP地址</li><li>源端口：UDP 67</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 68</li></ul></li><li>DHCP Request报文<ul><li>客户端接收到DHCP服务器分配的IP地址后，客户主机-&gt;DHCP服务器：好的，我接受你分配的IP地址192.168.1.2，请求确认</li><li>源地址：0.0.0.0</li><li>源端口：UDP 68</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 67</li></ul></li><li>DHCP ACK报文<ul><li>服务器接收到广播数据包后，DHCP服务器-&gt;客户主机：好的，我已经确认分配给你IP地址</li><li>源地址：服务器IP地址</li><li>源端口：UDP 67</li><li>目的地址：255.255.255.255(广播)</li><li>目的端口：UDP 68</li></ul></li></ol><p>DHCP端口号：UDP 67(服务器)和UDP 68(客户端)</p><h3 id="2-2-DHCP配置">2.2 DHCP配置</h3><ol><li>网络拓扑图<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/2_1.png" alt="网络拓扑图2"></li></ul></li><li>设置DHCP服务器和PC机的TCP/IP属性<ul><li>DHCP服务器：192.168.1.1/24</li><li>PC1/PC2：自动获取IP地址</li></ul></li><li>配置DHCP服务器<ul><li>设置IP池为192.168.1.10-20</li></ul></li></ol><h3 id="2-3-验证DHCP配置">2.3 验证DHCP配置</h3><ol><li>使用ipconfig /all命令查看各机器的TCP/IP配置<ul><li>PC1: 192.168.0.10</li><li>PC2: 192.168.0.11</li></ul></li><li>使用ping命令测试连通性<ul><li>PC1&lt;-&gt;PC2：连通</li></ul></li></ol><div STYLE="page-break-after: always;"></div><h2 id="三-DNS及Web服务">三. DNS及Web服务</h2><h3 id="3-1-DNS工作原理">3.1 DNS工作原理</h3><p>DNS(Domain Name System，域名系统)是一个分布式数据库，用于域名和IP地址之间的映射。</p><ul><li>IPv4：32位二进制数，可写作点分十进制</li><li>IPv6：128位二进制数，可写作冒号分隔的8组16进制数</li></ul><p>DNS工作流程：</p><ol><li>PC机-&gt;首选DNS服务器：<a href="http://xn--www-st5fu45oo2cory.baidu.com">我要访问www.baidu.com</a></li><li>首选DNS服务器-&gt;根域名’.'DNS服务器：www.baidu.com对应的IP地址是多少？</li><li>根域名’.'DNS服务器-&gt;首选DNS服务器：www.baidu.com归’com’DNS服务器管</li><li>首选DNS服务器-&gt;'com’DNS服务器：www.baidu.com对应的IP地址是多少？</li><li>'com’DNS服务器-&gt;首选DNS服务器：www.baidu.com归’<a href="http://baidu.com">baidu.com</a>’DNS服务器管</li><li>首选DNS服务器-&gt;'<a href="http://baidu.com">baidu.com</a>’DNS服务器：www.baidu.com对应的IP地址是多少？</li><li>'<a href="http://baidu.com">baidu.com</a>’DNS服务器-&gt;首选DNS服务器：<a href="http://www.baidu.xn--comIPXXX-xb7n6eu54cyshkv0aji6c.XXX.XXX.XXX">www.baidu.com对应的IP地址是XXX.XXX.XXX.XXX</a></li><li>首选DNS服务器-&gt;PC机：<a href="http://www.baidu.xn--comIPXXX-xb7n6eu54cyshkv0aji6c.XXX.XXX.XXX">www.baidu.com对应的IP地址是XXX.XXX.XXX.XXX</a></li><li>PC机-&gt;Web服务器：<a href="http://xn--XXX-st5fu45oo2cory.XXX.XXX.XXX">我要访问XXX.XXX.XXX.XXX</a></li><li>Web服务器-&gt;PC机：返回相关的数据</li></ol><ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/3_1.png" alt="DNS工作原理"></li></ul><p>递归查询：递归查询是一种DNS服务器的查询模式。在该模式下，DNS服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。如果DNS服务器本地没有存储查询DNS信息，那么该服务器会询问其他服务器，并将返回的查询结果提交给客户机。</p><p>迭代查询：DNS服务器会向客户机提供其他能够解析查询请求的DNS服务器地址。当客户机发送查询请求时，DNS服务器并不直接回复查询结果，而是告诉客户机另一台DNS服务器地址，客户机再向这台DNS服务器提交请求，依次循环直到返回查询的结果为止。</p><p>DNS端口号：UDP 53</p><h3 id="3-2-HTTP工作原理">3.2 HTTP工作原理</h3><p>HTTP(HyperText Transfer Protocol，超文本传输协议)是一种用于传输超文本的协议。</p><p>HTTP工作流程：<br>1. 客户端浏览器解析URL<br>2. 客户端浏览器生产HTTP请求信息<br>3. 服务器发送响应HTTP页面<br>4. 客户端浏览器解析响应页面</p><h3 id="3-3-DNS配置">3.3 DNS配置</h3><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/3_2.png" alt="网络拓扑图3"></li></ul></li><li>配置DNS服务器<ul><li>jike.com配置Host IP：192.168.0.20(对应Web服务器)</li><li>ruanjian.com配置Host IP：192.168.0.70(没有对应的Web服务器)</li></ul></li></ol><h3 id="3-4-验证DNS配置">3.4 验证DNS配置</h3><ol><li>使用ipconfig /all命令查看各机器的TCP/IP配置</li><li>在客户端PC上使用ping命令测试连通性<ul><li><a href="http://jike.com">jike.com</a>：Reply from 192.168.0.20: bytes=32 time&lt;1ms TTL=128(来自192.168.0.20的回复：字节=32 时间&lt;1ms TTL=128)</li><li><a href="http://ruanjian.com">ruanjian.com</a>：Request timed out(来自192.168.0.10的回复：无法访问目标主机)</li><li><a href="http://anquan.com">anquan.com</a>：Unknown host &lt;<a href="http://www.anquan.com">www.anquan.com</a>(<a href="http://xn--Pinganquan-wj2piry83btt9cs3ox4ssg7j.com">Ping请求找不到主机anquan.com</a>。请检查该名称，然后重试)&gt;</li></ul></li></ol><h3 id="3-5-FTP服务配置">3.5 FTP服务配置</h3><ol><li>在控制面板中启用IIS(Internet Information Services，Internet信息服务)</li><li>打开IIS，网站名称改为jike，选择物理路径。在路径下新建index.html文件，用ANSI编码保存，并在默认文档中添加该文档。<a href="http://xn--jingke-2o2mv27a7m7e4jva.com/index.html%E5%BA%94%E8%AF%A5%E8%83%BD%E7%9C%8B%E5%88%B0index.html%E7%9A%84%E5%86%85%E5%AE%B9%E3%80%82">此时访问jingke.com/index.html应该能看到index.html的内容。</a></li><li>新建一个FTP站点，名称为jikeFTP，选择物理路径(在该位置新建几个文件夹测试)，绑定IP地址为192.168.0.20，选择无SSL，允许所有用户访问。此时使用FTP客户端连接，应该能看到FTP站点的内容。</li></ol><div STYLE="page-break-after: always;"></div><h2 id="四-交换机工作原理及基本配置">四. 交换机工作原理及基本配置</h2><h3 id="4-1-交换机">4.1 交换机</h3><p>交换机(Switch)是一种网络设备，用于在计算机网络中连接多个设备，实现设备之间的通信。</p><p>最常见的以太网交换机工作于OSI网络参考模型的第二层(即数据链路层)，是一种基于MAC地址识别、完成以太网数据帧转发的网络设备。</p><h4 id="4-1-1-MAC地址">4.1.1 MAC地址</h4><p>MAC地址(Media Access Control Address，介质访问控制地址)是一个用来识别网络设备的地址，又称物理地址。</p><p>由48位二进制数组成，通常以12位十六进制数表示，如00-0C-29-3D-2E-7C，也写作000C.293D.2E7C、00:0C:29:3D:2E:7C。</p><p>前24位是厂商识别码，后24位是设备识别码(供应商对网卡的唯一编号)。</p><ul><li>单播地址：MAC地址的第一个字节的最低位为0，可作为目的地址和源地址。</li><li>组播地址：MAC地址的第一个字节的最低位为1，仅能作为目的地址。</li><li>广播地址：MAC地址全为1，即FF-FF-FF-FF-FF-FF，用于向同一网络中的所有设备发送数据。</li></ul><h4 id="4-1-2-MAC地址表">4.1.2 MAC地址表</h4><p>交换机内部用于存放物理地址与交换机端口映射关系的数据库，交换机依靠MAC地址表实现数据帧的转发。<br>- Static MAC Address：静态MAC地址，由管理员手动配置。<br>- Dynamic MAC Address：动态MAC地址，由交换机自动学习。</p><p>动态MAC地址学习过程</p><ol><li>主机A-&gt;交换机：我要发送数据帧给主机B。 交换机：记录主机A的MAC地址和端口映射。</li><li>交换机-&gt;广播：主机A的数据帧发送给所有端口。</li><li>主机B-&gt;交换机：我收到数据帧了，回复。 交换机：记录主机B的MAC地址和端口映射。</li></ol><h4 id="4-1-3-数据帧">4.1.3 数据帧</h4><ul><li>数据帧(Data Frame)是数据链路层的协议数据单元，包括：帧头、数据、帧尾。</li><li>在以太网链路上的数据单元称为以太网帧，现在最常见的以太网帧是Ethernet II，包括：目的MAC地址(6B)、源MAC地址(6B)、类型/长度(2B)、数据(46-1500B)、FCS帧校验序列(4B)。</li></ul><p>帧转发/过滤：单播帧依靠MAC地址表进行转发/过滤，组播帧向指定端口转发，广播帧向所有端口转发</p><p>帧转发方式：</p><ul><li>直通转发：交换机收到帧头(通常只检查14个字节)后立刻察看目的MAC地址并进行转发。</li><li>存储转发：接收完整的帧，执行完校验后，转发正确的帧而丢弃错误的帧。</li><li>无碎片直通转发：交换机读取前64个字节后开始转发。</li></ul><h3 id="4-2-交换机本地配置-MAC地址绑定">4.2 交换机本地配置-MAC地址绑定</h3><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/4_1.png" alt="网络拓扑图4"></li></ul></li><li>计算机串口或USB口与交换机的Console端口连接；打开计算机Win系统的“超级终端”或其他串口通信客户端软件；Serial Port按交换机要求设置，一般默认<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/4_2.png" alt="终端配置"></li></ul></li><li>常用命令/模式切换命令<ul><li>Switch&gt;   //(初始)用户模式</li><li>Switch&gt;enable  //进入特权模式</li><li>Switch#configure terminal  //进入全局配置模式</li><li>Switch(config)#interface fa0/1  //进入接口fa0/1配置模式</li><li>Switch(config-if)#end //退出配置模式，返回特权模式</li><li>Switch#show clock  //查看交换机时间</li><li>Switch#show version  //查看交换机版本信息</li><li>修改交换机主机名<ul><li>Switch#configure terminal</li><li>Switch(config)#hostname jike</li><li>jike(config)#</li></ul></li></ul></li><li>MAC地址表管理命令<ul><li>Switch#show mac-address-table  //查看MAC地址表</li><li>Switch#show mac-address-table aging-time  //查看MAC地址表老化时间</li><li>交换机上添加MAC地址绑定<ul><li>Switch(config)#mac-address-table static aaaa.aaaa.aaaa vlan 1 interface fa0/1</li><li>Switch(config)#mac-address-table static aaaa.aaaa.aaab vlan 1 interface fa0/2</li><li>Switch(config)#mac-address-table static aaaa.aaaa.aaac vlan 1 interface fa0/3</li></ul></li><li>交换机上删除MAC地址绑定<ul><li>Switch(config)#no mac-address-table static aaaa.aaaa.aaac vlan 1 interface fa0/3</li></ul></li></ul></li></ol><h3 id="4-3-验证交换机配置">4.3 验证交换机配置</h3><p>以绑定了fa0/1、fa0/2的交换机为例，在以下端口连接情况下，使用ping命令测试连通性：</p><ol><li>PC1至1号端口，PC2至2号端口，PC3至3号端口<ul><li>PC1&lt;-&gt;PC2：连通</li><li>PC1&lt;-&gt;PC3：连通</li><li>PC2&lt;-&gt;PC3：连通</li><li>MAC地址表：fa0/1-PC1、fa0/2-PC2、fa0/3-PC3</li></ul></li><li>PC1至2号端口，PC2至1号端口，PC3至10号端口<ul><li>PC1&lt;-&gt;PC2：不连通</li><li>PC1&lt;-&gt;PC3：不连通</li><li>PC2&lt;-&gt;PC3：不连通</li><li>MAC地址表：fa0/1-PC2、fa0/2-PC1、fa0/10-PC3</li></ul></li><li>PC1至5号端口，PC2至2号端口，PC3至3号端口<ul><li>PC1&lt;-&gt;PC2：不连通</li><li>PC1&lt;-&gt;PC3：不连通</li><li>PC2&lt;-&gt;PC3：连通</li><li>MAC地址表：fa0/1-PC2、fa0/2-PC1、fa0/3-PC3</li></ul></li></ol><ul><li>总结：静态MAC地址绑定后，主机与端口连线必须一一对应才能传输数据；如果是动态MAC地址，主机连任意一个端口均可正常收发数据。</li></ul><div STYLE="page-break-after: always;"></div><h2 id="五-交换机VLAN">五. 交换机VLAN</h2><h3 id="5-1-VLAN">5.1 VLAN</h3><p>交换网络是平面网络结构，必须依赖广播，广播域过大会导致网络拥塞。</p><p>VLAN(Virtual Local Area Network，虚拟局域网)是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样。</p><p>VLAN的特点：</p><ul><li>基于逻辑的分组，不受物理位置限制。</li><li>在同一VLAN内和真实局域网相同。</li><li>不同VLAN内用户要通信需要借助三层设备。</li></ul><p>基于端口的VLAN：交换机端口可以划分到不同的VLAN中，不同VLAN之间的通信需要通过路由器。</p><h4 id="5-1-1-IEEE-802-1Q标准">5.1.1 IEEE 802.1Q标准</h4><p>定义了基于端口的VLAN模型，规定如何标识带有 VLAN 成员信息的以太帧，定义VLAN标签格式。</p><p>在以太网帧中增加了一个4字节的802.1Q帧头，用于标识VLAN信息：目的MAC地址(6B)、源MAC地址(6B)、802.1Q帧头(4B)、类型/长度(2B)、数据(46-1500B)、FCS帧校验序列(4B)。</p><p>802.1Q帧头格式：TPID(2B)+PCP(3b)+DEI(1b)+VID(12b)</p><ul><li>TPID：标识802.1Q帧头，取值0x8100</li><li>PCP：优先级，取值0-7，0最低，7最高</li><li>DEI：丢弃标志，用于QoS</li><li>VID：VLAN ID，取值1-4094</li></ul><h4 id="5-1-2-交换机端口类型">5.1.2 交换机端口类型</h4><table><thead><tr><th></th><th>Access端口</th><th>Trunk端口</th></tr></thead><tbody><tr><td>Tag</td><td>UnTagged端口（接入端口）</td><td>Tag Aware端口（干道端口）</td></tr><tr><td>VLAN</td><td>只能属于一个VLAN</td><td>可以允许多个VLAN通过</td></tr><tr><td>数据帧</td><td>发送的数据帧不带VLAN标签</td><td>发送的数据帧带有VLAN标签</td></tr><tr><td>用途</td><td>一般用于连接终端设备（PC机）</td><td>一般用于交换机之间的连接</td></tr><tr><td>默认</td><td>交换机上的默认端口</td><td>-</td></tr></tbody></table><h3 id="5-2-交换机VLAN配置">5.2 交换机VLAN配置</h3><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/5_1.png" alt="网络拓扑图5"></li></ul></li><li>创建VLAN<ul><li>Switch(config)#vlan 10</li><li>Switch(config-vlan)#exit</li><li>Switch(config)#vlan 20</li><li>Switch(config-vlan)#exit</li></ul></li><li>配置Access端口/划分VLAN<ul><li>Switch(config)#interface fa0/1-5</li><li>Switch(config-if-range)#switchport mode access</li><li>Switch(config-if-range)#switchport access vlan 10</li><li>Switch(config-if-range)#exit</li><li>Switch(config)#interface fa0/6-10</li><li>Switch(config-if-range)#switchport mode access</li><li>Switch(config-if-range)#switchport access vlan 20</li><li>Switch(config-if-range)#exit</li></ul></li><li>配置Trunk端口<ul><li>Switch(config)#interface fa0/24</li><li>Switch(config-if)#switchport mode trunk</li></ul></li></ol><h3 id="5-3-验证交换机VLAN配置">5.3 验证交换机VLAN配置</h3><ol><li>显示交换机VLAN配置<ul><li>Switch#show vlan brief</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/5_2.png" alt="交换机VLAN配置"></li></ul></li><li>连通性测试<ul><li>PC1&lt;-&gt;PC4：连通</li><li>PC2&lt;-&gt;PC3：连通</li><li>其余PC之间不连通</li></ul></li><li>总结：同一VLAN内可以直接相互通信，不同VLAN内不能直接相互通信。</li></ol><div STYLE="page-break-after: always;"></div><h2 id="六-VLAN间通信">六. VLAN间通信</h2><h3 id="6-1-路由">6.1 路由</h3><p>VLAN是广播域（二层概念），而两个广播域之间通常由路由器连接，广播域之间来往的数据包都是由路由（三层概念）转发的。路由的主要功能由路由器和三层交换机提供。</p><p>VLAN间通信一般有以下3种实施方案：</p><ol><li>路由器多端口方式</li><li>单臂路由方式</li><li>三层交换机方式</li></ol><h3 id="6-2-路由器多端口方式">6.2 路由器多端口方式</h3><p>与路由器连接不同子网通信的方法一样，为路由器端口设置一个IP地址作为对应VLAN的网关，有几个VLAN就需要在几个端口设置IP地址。</p><p>缺点：<br>一般中大型局域网，VLAN数量可以很多，而路由器端口数量较少，路由器会成为局域网性能瓶颈。<br>路由器采用软件对IP报文进行转发，占用CPU和内存资源，效率比较低，无法胜任通信数据量较大的局域网。</p><h4 id="6-2-1-配置">6.2.1 配置</h4><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_1_1.png" alt="网络拓扑图6_1"></li></ul></li><li>二层交换机配置<ul><li>创建VLAN10和VLAN20</li><li>配置Access端口/划分VLAN<ul><li>VLAN10: fa0/1,fa0/10</li><li>VLAN20: fa0/2,fa0/20</li></ul></li><li>查看VLAN配置: Switch#show vlan brief</li></ul></li><li>路由器配置<ul><li>Router(config)#interface fa0/0</li><li>Router(config-if)#no shutdown //激活接口</li><li>Router(config-if)#ip address 192.168.1.1 255.255.255.0 //设置接口IP地址</li><li>Router(config-if)#exit</li><li>Router(config)#interface fa0/1</li><li>Router(config-if)#no shutdown</li><li>Router(config-if)#ip address 192.168.2.1 255.255.255.0</li><li>Router(config-if)#exit</li></ul></li></ol><h4 id="6-2-2-验证路由器配置">6.2.2 验证路由器配置</h4><ol><li>显示路由表<ul><li>Router#show ip route</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_1_2.png" alt="路由表"></li></ul></li><li>显示IP接口信息<ul><li>Router#show ip interface brief</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_1_3.png" alt="IP接口"></li></ul></li><li>连通性测试<ul><li>PC1&lt;-&gt;PC2：连通</li></ul></li></ol><h3 id="6-3-单臂路由方式">6.3 单臂路由方式</h3><p>在路由器的一个物理接口上配置多个子接口，作为不同VLAN的默认网关，实现原来相互隔离的不同VLAN之间的通信。</p><p>缺点：<br>路由器转发速度有限，无法满足VLAN间通信数据量大的需求，并且容易造成单点故障。<br>数据在物理链路上往返传输，会有转发延迟，很可能成为局域网性能瓶颈。</p><h4 id="6-3-1-配置">6.3.1 配置</h4><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_2_1.png" alt="网络拓扑图6_2"></li></ul></li><li>二层交换机配置<ul><li>创建VLAN10和VLAN20</li><li>配置Access端口/划分VLAN<ul><li>VLAN10: fa0/1</li><li>VLAN20: fa0/2</li></ul></li><li>配置Trunk端口<ul><li>Switch(config)#interface fa0/24</li><li>Switch(config-if)#switchport mode trunk</li><li>Switch(config-if)#exit</li></ul></li><li>查看VLAN配置: Switch#show vlan brief</li></ul></li><li>路由器配置<ul><li>Router(config)#interface fa0/0</li><li>Router(config-if)#no shutdown //激活接口</li><li>Router(config-if)#exit</li><li>Router(config)#interface fa0/0.10 //创建虚拟子接口10</li><li>Router(config-subif)#encapsulation dot1Q 10 //封装VLAN协议（802.1Q）</li><li>Router(config-subif)#ip address 192.168.1.1 255.255.255.0 //设置子接口IP地址</li><li>Router(config-subif)#exit</li><li>Router(config)#interface fa0/0.20 //创建虚拟子接口20</li><li>Router(config-subif)#encapsulation dot1Q 20</li><li>Router(config-subif)#ip address 192.168.2.1 255.255.255.0</li><li>Router(config-subif)#exit</li></ul></li></ol><h4 id="6-3-2-验证路由器配置">6.3.2 验证路由器配置</h4><ol><li>显示路由表<ul><li>Router#show ip route</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_2_2.png" alt="路由表"></li></ul></li><li>显示IP接口信息<ul><li>Router#show ip interface brief</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_2_3.png" alt="IP接口"></li></ul></li><li>显示Trunk端口<ul><li>Switch#show interfaces trunk</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_2_4.png" alt="Trunk端口"></li></ul></li><li>连通性测试<ul><li>PC1&lt;-&gt;PC2：连通</li></ul></li></ol><h3 id="6-4-三层交换机虚拟接口SVI">6.4 三层交换机虚拟接口SVI</h3><p>三层交换机实现VLAN间通信的方法是在已有的VLAN上创建虚接口，它同样可以配置IP地址，借助虚接口三层交换机能够实现路由转发功能。</p><p>优点：<br>VLAN间流量不必经过路由器，网络延时和抖动都很小，同时也极大程度的减轻上层接入路由器的负载。<br>三层交换机的VLAN间路由由交换机的三层转发引擎完成，其性能取决于交换机的背板转发速率，可以在多个端口上轻松实现线速转发，可以获得很好的性能。</p><h4 id="6-4-1-配置">6.4.1 配置</h4><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_3_1.png" alt="网络拓扑图6_3"></li></ul></li><li>二层交换机配置<ul><li>创建VLAN10和VLAN20</li><li>配置Access端口/划分VLAN<ul><li>VLAN10: fa0/1</li><li>VLAN20: fa0/2</li></ul></li><li>配置Trunk端口：fa0/24</li><li>查看VLAN配置: Switch#show vlan brief</li><li>查看Trunk端口: Switch#show interfaces trunk</li></ul></li><li>三层交换机配置<ul><li>创建VLAN10和VLAN20</li><li>配置SVI的ip地址<ul><li>Switch(config)#interface vlan 10</li><li>Switch(config-if)#ip address 192.168.1.1 255.255.255.0</li><li>Switch(config-if)#exit</li><li>Switch(config)#interface vlan 20</li><li>Switch(config-if)#ip address 192.168.2.1 255.255.255.0</li><li>Switch(config-if)#exit</li></ul></li><li>开启路由功能<ul><li>Switch(config)#ip routing</li></ul></li></ul></li></ol><h4 id="6-4-2-验证三层交换机配置">6.4.2 验证三层交换机配置</h4><ol><li>显示路由表<ul><li>Switch#show ip route</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/6_3_2.png" alt="路由表"></li></ul></li><li>连通性测试：4台主机之间均可相互通信</li></ol><div STYLE="page-break-after: always;"></div><h2 id="七-静态路由">七. 静态路由</h2><h3 id="7-1-路由器">7.1 路由器</h3><p>路由器（Router）：连接两个或多个网络的硬件设备，在网络间起网关的作用，是读取每一个IP数据包中的地址然后决定如何传送的专用智能性的网络设备。</p><ul><li>直连网络（邻村）：直接连接在某个路由器上的网络，称为该路由器的直连网络。每个路由器接口的IP作为所连直连网络的网关（村口）。</li><li>非直连网络：不直接连接在某个路由器上的网络（通常间隔多个路由器）。</li></ul><h4 id="7-1-1-路由表">7.1.1 路由表</h4><p>路由器依靠路由表来选择转发路径。<br>路由表中包含有该路由器掌握的所有目的网络地址，以及通过此路由器到达这些网络中最佳路径，这个最佳路径指的是路由器的某个接口或下一条路由器的地址。</p><h4 id="7-1-2-静态路由">7.1.2 静态路由</h4><p>静态路由：由系统管理员事先设置好固定的路由信息。</p><ul><li>优点：简单、高效、可靠。优先级最高。</li><li>缺点：不能动态地适用网络状况的变化。</li></ul><h3 id="7-2-静态路由配置">7.2 静态路由配置</h3><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/7_1.png" alt="网络拓扑图7_1"></li></ul></li><li>路由器配置（Router1为例）<ul><li>Router1(config)#interface fa0/0</li><li>Router1(config-if)#no shutdown  //激活接口</li><li>Router1(config-if)#ip address 192.168.1.1 255.255.255.0 //设置接口IP地址为所在网络的网关</li><li>Router1(config-if)#exit</li><li>Router1(config)#interface fa0/1</li><li>Router1(config-if)#no shutdown</li><li>Router1(config-if)#ip address 192.168.2.1 255.255.255.0</li><li>Router1(config-if)#exit</li><li>Router1(config)#ip route 192.168.3.0 255.255.255.0 192.168.2.2 //设置静态路由：ip route &lt;目的网络&gt; &lt;子网掩码&gt; &lt;下一跳地址&gt;</li></ul></li></ol><h3 id="7-3-验证静态路由配置">7.3 验证静态路由配置</h3><ol><li>显示路由表<ul><li>Router1#show ip route</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/7_2.png" alt="路由表"></li></ul></li><li>连通性测试：3台主机之间均可相互通信</li></ol><h3 id="7-4-静态路由配置补充">7.4 静态路由配置补充</h3><ul><li>通过192.168.0.1的端口，访问所有24位子网掩码的目的网络<ul><li>Router1(config)#ip route 0.0.0.0 255.255.255.0 192.168.0.1</li></ul></li><li>通过192.168.0.1的端口，访问所有网络<ul><li>Router1(config)#ip route 0.0.0.0 0.0.0.0 192.168.0.1</li></ul></li></ul><div STYLE="page-break-after: always;"></div><h2 id="八-动态路由RIP">八. 动态路由RIP</h2><h3 id="8-1-动态路由">8.1 动态路由</h3><p>动态路由：路由器根据网络系统的运行情况而自动调整的路由信息。路由器根据路由选择协议（Routing Protocol）提供的功能，自动学习和记忆网络运行情况，在需要时自动计算数据传输的最佳路径。</p><ul><li>优点：动态路由可以自动学习网络的拓朴结构，并更新路由表。</li><li>缺点：路由广播更新信息将占据大量的网络带宽。</li></ul><h4 id="8-1-1-动态路由分类">8.1.1 动态路由分类</h4><ul><li>按照使用的区域不同<ul><li>内部网关协议IGP（Interior Gateway Protocol）域内协议。如RIP、EIGRP、OSPF、ISIS</li><li>外部网关协议EGP（Exterior Gateway Protocol）域间协议。如BGP</li></ul></li><li>按照算法不同<ul><li>距离矢量协议（Distance Vector）。如RIPV1、RIPV2、BGP</li><li>链路状态路由协议（Link State）。如OSPF、ISIS</li></ul></li><li>按是否携带子网掩码<ul><li>有类路由协议。如RIPV1</li><li>无类路由协议。如RIPV2、OSPF、ISIS、BGP</li></ul></li></ul><h4 id="8-1-2-RIP协议">8.1.2 RIP协议</h4><p>RIP是一种基于距离矢量（Distance-Vector）算法的协议，它使用跳数（Hop Count）作为度量值来衡量到达目的地址的距离。</p><p>在RIP网络中，缺省情况下，设备到与它直接相连网络的跳数为0，通过一个设备可达的网络的跳数为1，其余依此类推。也就是说，度量值等于从本网络到达目的网络间的设备数量。</p><p>为限制收敛时间，RIP规定度量值取0～15之间的整数，大于或等于16的跳数被定义为无穷大，即目的网络或主机不可达。由于这个限制，使得RIP不可能在大型网络中得到应用。</p><p>RIP路由器工作流程：</p><ul><li>RIP路由器A,B初始的路由表中只有自己的直连路由。</li><li>每30秒，向相邻路由器发送自己的路由表。</li><li>收到相邻路由器的路由表后，更新自己的路由表：<ul><li>新增：如果收到的路由表中有自己没有的路由，则添加到自己的路由表中。</li><li>更新：如果收到的路由表中有自己已有的路由，且新的跳数更小，则更新自己的路由表的跳数。</li></ul></li><li>RIP计时器：<ul><li>更新计时器：每30秒左右发送一次路由表。</li><li>失效计时器：180秒（6倍更新时间）未更新，标记为不可达。</li><li>刷新计时器：无效路由240秒未更新，从路由表中删除。</li></ul></li></ul><p>路由毒化：当一个路由器发现一个网络不可达时，会向其他路由器发送一个度量值为16的路由，以传播路由失效的消息，这个过程称为路由毒化。</p><h4 id="8-1-3-RIP协议版本">8.1.3 RIP协议版本</h4><p>RIPv1</p><ul><li>使用广播的方式发送路由更新</li><li>路由更新信息中不携带子网掩码，为有类路由协议，不支持 VLSM 和 CIDR</li><li>不支持认证</li></ul><p>RIPv2</p><ul><li>发送更新报文的方式为组播，组播地址为224.0.0.9</li><li>路由信息中加入了子网掩码，为无类路由协议，支持 VLSM，支持路由聚合与 CIDR</li><li>支持明文认证和 MD5 密文认证</li></ul><p>VLSM：可变长子网掩码Variable Length Subnet Mask</p><p>CIDR：无类域间路由聚合Classless Inter-Domain Routing</p><h3 id="8-2-RIPV1">8.2 RIPV1</h3><h4 id="8-2-1-配置">8.2.1 配置</h4><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/8_1_1.png" alt="网络拓扑图8_1"></li></ul></li><li>路由器配置（以Router1为例）<ul><li>Router1(config)#interface lo0  //创建Loopback接口，用于模拟网络</li><li>Router1(config-if)#ip address 1.1.1.1 255.255.255.0</li><li>Router1(config-if)#exit</li><li>Router1(config)#interface fa0/0</li><li>Router1(config-if)#no shutdown  //激活接口</li><li>Router1(config-if)#ip address 12.1.1.1 255.55.255.0</li><li>Router1(config-if)#exit</li><li>Router1(config)#router rip  //进入RIP协议配置模式</li><li>Router1(config-router)#version 1  //设置RIP版本为1</li><li>Router1(config-router)#network 1.1.1.0 //设置RIP协议的网络地址</li><li>Router1(config-router)#network 12.1.1.0</li></ul></li></ol><h4 id="8-2-2-验证RIPV1配置">8.2.2 验证RIPV1配置</h4><ol><li>显示路由表<ul><li>Router1#show ip route</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/8_1_2.png" alt="路由表"></li></ul></li><li>连通性测试：Router1和Router3的lo0接口之间可以相互通信</li></ol><h3 id="8-3-RIPV2">8.3 RIPV2</h3><h4 id="8-3-1-配置">8.3.1 配置</h4><ol><li>网络拓扑图（完成TCP/IP配置）<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/8_2_1.png" alt="网络拓扑图8_2"></li></ul></li><li>路由器配置（以Router1为例）<ul><li>Router1(config)#interface lo0</li><li>Router1(config-if)#ip address 10.1.1.1 255.255.255.0</li><li>Router1(config-if)#exit</li><li>Router1(config)#interface fa0/0</li><li>Router1(config-if)#no shutdown</li><li>Router1(config-if)#ip address 12.1.1.1 255.255.255.0</li><li>Router1(config-if)#exit</li><li>Router1(config)#router rip</li><li>Router1(config-router)#version 2 //设置RIP版本为2</li><li>Router1(config-router)#network 10.1.1.0</li><li>Router1(config-router)#network 12.1.1.0</li><li>Router1(config-router)#no auto-summary //关闭自动汇总</li></ul></li></ol><h4 id="8-3-2-验证RIPV2配置">8.3.2 验证RIPV2配置</h4><ol><li>显示路由表<ul><li>Router1#show ip route</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/8_2_2.png" alt="路由表"></li></ul></li><li>连通性测试：Router1和Router3的lo0接口之间可以相互通信</li></ol><div STYLE="page-break-after: always;"></div><h2 id="九-NAT">九. NAT</h2><h3 id="9-1-NAT">9.1 NAT</h3><p>NAT(Network Address Translation，网络地址转换)是一种将私有地址（RFC 1918）转换为公有地址的技术，用于解决IP地址不足的问题。</p><h4 id="9-1-1-NAT术语">9.1.1 NAT术语</h4><ul><li>内部本地IP地址：分配给内部网络中的主机的IP地址，通常这种地址来自RFC1918指定的私有地址空间。</li><li>内部全局IP地址：内部全局IP地址，对外代表一个或多个内部本地IP地址，通常这种地址来自全局惟一的地址空间，通常由ISP提供。</li><li>外部本地IP地址：在内部网络中看到的外部主机的IP地址，通常来自RFC 1918定义的私有地址空间。</li><li>外部全局IP地址：外部网络中的主机的IP地址，通常来自全局可路由的地址空间。</li></ul><h4 id="9-1-2-NAT分类">9.1.2 NAT分类</h4><ul><li>静态NAT：一对一映射，将一个内部IP地址映射到一个外部IP地址。</li><li>动态NAT：将内部IP地址动态转换为一组外部IP地址（IP地址池）中的一个。<ul><li>超载NAT：动态NAT的一种实现形式，利用不同端口号将多个内部IP地址转换为一个外部IP地址，也称为PAT、NAPT或端口复用NAT。</li></ul></li></ul><h3 id="9-2-NAT配置">9.2 NAT配置</h3><h4 id="9-2-1-网路拓扑图">9.2.1 网路拓扑图</h4><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_0.png" alt="网络拓扑图"></p><p>完成PC机和服务器的TCP/IP配置</p><h4 id="9-2-2-路由器基础配置">9.2.2 路由器基础配置</h4><ol><li>Router1配置<ul><li>Router1(config)#interface fa0/0</li><li>Router1(config-if)#no shutdown</li><li>Router1(config-if)#ip address 10.1.1.1 255.255.255.0</li><li>Router1(config-if)#ip nat inside //内网接口</li><li>Router1(config-if)#exit</li><li>Router1(config)#interface fa0/1</li><li>Router1(config-if)#no shutdown</li><li>Router1(config-if)#ip address 2.2.2.1 255.255.255.0</li><li>Router1(config-if)#ip nat outside //外网接口</li><li>Router1(config-if)#exit</li><li>Router1(config)#ip route 0.0.0.0 0.0.0.0 2.2.2.2 //设置静态路由：内网主机可以通过Router1访问外网</li></ul></li><li>Router2配置<ul><li>fa0/0: 2.2.2.2/24</li><li>fa0/1: 1.1.1.1/24</li><li>外网不允许访问内网，无需配置静态路由</li></ul></li></ol><h4 id="9-2-3-静态NAT">9.2.3 静态NAT</h4><p>在Router1上设置静态NAT，使外网PC可以使用外网地址2.2.2.10访问内部服务器Server0的Web服务（仅80端口）</p><h5 id="配置静态NAT">配置静态NAT</h5><ul><li>Router1(config)#ip nat inside source static tcp 10.1.1.20 80 2.2.2.10 80 //设置静态NAT：内网服务器的80端口映射到外网地址的80端口</li></ul><h5 id="验证静态NAT">验证静态NAT</h5><ol><li>外网PC使用外网地址2.2.2.10访问内部服务器Server0的Web服务<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_1_2.png" alt="访问Web服务"></li></ul></li><li>显示NAT转换表<ul><li>Router1#show ip nat translations</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_1_1.png" alt="NAT转换表"></li></ul></li></ol><h4 id="9-2-4-动态NAT">9.2.4 动态NAT</h4><p>在Router1上设置动态NAT，使内网PC可以通过外网地址2.2.2.11-2.2.2.12访问外网服务器Server1的Web服务（仅80端口）</p><h5 id="配置动态NAT">配置动态NAT</h5><ul><li>Router1(config)#access-list 1 permit any //创建访问控制列表 1</li><li>Router1(config)#ip nat pool pool1 2.2.2.11 2.2.2.12 netmask 255.255.255.0 //创建IP地址池：ip nat pool &lt;名称&gt; &lt;起始地址&gt; &lt;结束地址&gt; netmask &lt;子网掩码&gt;</li><li>Router1(config)#ip nat inside source list 1 pool pool1 //设置动态NAT：ip nat inside source list &lt;访问控制列表&gt; pool &lt;IP地址池&gt;</li></ul><h5 id="验证动态NAT">验证动态NAT</h5><ol><li>内网PC使用外网地址1.1.1.10访问外网服务器Server1的Web服务<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_2_1.png" alt="访问Web服务"></li><li>由于IP地址池中只有2个地址，第3个内网主机无法访问外网</li></ul></li><li>显示NAT转换表<ul><li>Router1#show ip nat translations</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_2_2.png" alt="NAT转换表"></li></ul></li></ol><h3 id="9-3-NAPT">9.3 NAPT</h3><p>在Router1上设置动态NAPT。使内网PC可以通过外网地址2.2.2.15访问外网服务器</p><h4 id="配置NAPT">配置NAPT</h4><ul><li>Router1(config)#ip nat pool pool2 2.2.2.15 2.2.2.15 netmask 255.255.255.0</li><li>Router1(config)#ip nat inside source list 1 pool pool2 overload //overload: 超载，即NAPT</li></ul><h4 id="验证NAPT">验证NAPT</h4><ol><li>内网PC使用外网地址1.1.1.10访问外网服务器Server1的Web服务<ul><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_3_1.png" alt="访问Web服务"></li></ul></li><li>显示NAT转换表<ul><li>Router1#show ip nat translations</li><li><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/9_3_2.png" alt="NAT转换表"></li></ul></li></ol><div STYLE="page-break-after: always;"></div><h2 id="十-ARP协议分析">十. ARP协议分析</h2><h3 id="10-1-ARP协议">10.1 ARP协议</h3><p>ARP（Address Resolution Protocol，地址解析协议）主要用于根据 IP 地址求出主机所对应的物理地址（MAC 地址）。</p><p>在网络通信中，主机和主机之间的通信需要根据 OSI 模型进行数据包的封装和解封装，这里面不仅需要封装源目的 IP 地址，也需要源目的 MAC 地址。</p><p>一般情况下，上层应用只知道 IP 地址，而并不关心 MAC 地址，所以就需要通过一个协议来获知目的 MAC 地址，完成数据的封装，这个协议就是 ARP 协议。</p><h4 id="ARP协议工作原理">ARP协议工作原理</h4><p>主机A已知目标主机B的IP地址，向主机B发送数据包时，需要知道目标主机B的MAC地址。</p><p>ARP协议工作原理如下：</p><ol><li>主机A在自己的ARP缓存表中查找目标主机B的MAC地址，如果找到则直接发送数据包。</li><li>如果ARP缓存表中没有目标主机B的MAC地址，则主机A向本地网络广播ARP请求报文，请求目标主机B的MAC地址。</li><li>目标主机B收到ARP请求报文后，向主机A发送ARP响应报文，包含自己的MAC地址。</li><li>主机A收到ARP响应报文后，将目标主机B的MAC地址存入ARP缓存表，并发送数据包。</li></ol><h3 id="10-2-ARP协议分析">10.2 ARP协议分析</h3><p>以管理员身份启动cmd：</p><ul><li>查看ARP缓存表：arp -a</li><li>清空ARP缓存表：arp -d</li><li>删除指定ARP缓存：arp -d &lt;IP地址&gt;</li></ul><ol><li>打开Wireshark，在捕获选项中设置过滤器为“arp”。</li><li>开始抓取数据。</li><li>以管理员身份启动cmd，清空ARP缓存表并等待一段时间。</li><li>结束抓取数据。</li><li>选择一对ARP请求和响应报文，进行分析。</li></ol><p>以ARP请求报文为例，具体数据包如下图：</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/10_1.png" alt="ARP请求报文"></p><p>数据链路层数据帧：</p><table><thead><tr><th>字段</th><th>长度(bit)</th><th>说明</th><th>ARP Request</th><th>ARP Reply</th></tr></thead><tbody><tr><td>Destination</td><td>48</td><td>目的MAC地址</td><td>ff:ff:ff:ff:ff:ff(广播地址)</td><td>08:xx:xx:xx:xx:ae(发送方MAC地址)</td></tr><tr><td>Source</td><td>48</td><td>源MAC地址</td><td>08:xx:xx:xx:xx:ae(发送方MAC地址)</td><td>d8:xx:xx:xx:xx:d5(目标MAC地址)</td></tr><tr><td>Type</td><td>16</td><td>类型</td><td>0x0806(ARP)</td><td>0x0806(ARP)</td></tr></tbody></table><p>ARP数据帧：</p><table><thead><tr><th>字段</th><th>长度(bit)</th><th>说明</th><th>ARP Request</th><th>ARP Reply</th></tr></thead><tbody><tr><td>Hardware Type</td><td>16</td><td>硬件类型，标识链路层协议</td><td>0x0001(以太网)</td><td>0x0001(以太网)</td></tr><tr><td>Protocol Type</td><td>16</td><td>协议类型，标识网络层协议</td><td>0x0800(IPv4)</td><td>0x0800(IPv4)</td></tr><tr><td>Hardware Size</td><td>8</td><td>硬件地址大小，标识MAC地址长度</td><td>0x06(6B=48bit)</td><td>0x06(6B=48bit)</td></tr><tr><td>Protocol Size</td><td>8</td><td>协议地址大小，标识IP地址长度</td><td>0x04(4B=32bit)</td><td>0x04(4B=32bit)</td></tr><tr><td>Opcode</td><td>16</td><td>操作码，标识ARP请求或响应</td><td>0x0001(ARP Request)</td><td>0x0002(ARP Reply)</td></tr><tr><td>Sender MAC Address</td><td>48</td><td>发送方MAC地址</td><td>08:xx:xx:xx:xx:ae</td><td>d8:xx:xx:xx:xx:d5(目标MAC地址)</td></tr><tr><td>Sender IP Address</td><td>32</td><td>发送方IP地址</td><td>10.234.172.214</td><td>10.234.0.1</td></tr><tr><td>Target MAC Address</td><td>48</td><td>目标MAC地址</td><td>00:00:00:00:00:00(待填充)</td><td>08:xx:xx:xx:xx:ae(发送方MAC地址)</td></tr><tr><td>Target IP Address</td><td>32</td><td>目标IP地址</td><td>10.234.0.1</td><td>10.234.172.214</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h2 id="十一-TCP协议分析">十一. TCP协议分析</h2><h3 id="11-1-TCP协议">11.1 TCP协议</h3><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><p>UDP（User Datagram Protocol，用户数据报协议）是一种无连接的、不可靠的、基于数据报的传输层通信协议。</p><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接</td><td>面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td>可靠传输，使用流量控制和拥塞控制</td><td>不可靠传输，不使用拥塞控制</td></tr><tr><td>连接对象个数</td><td>一对一</td><td>一对一、一对多、多对多</td></tr><tr><td>传输方式</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>首部开销</td><td>20字节~60字节</td><td>8字节</td></tr><tr><td>适用场景</td><td>需要可靠传输的场景，例如文件传输</td><td>传输速度、实时性要求高的场景</td></tr></tbody></table><p>TCP协议工作流程：</p><ol><li>建立连接：三次握手<ol><li>发起方向接收方发送SYN报文，请求建立连接</li><li>接收方收到SYN报文后，回复SYN+ACK报文，表示同意建立连接</li><li>发起方收到SYN+ACK报文后，回复ACK报文，表示连接建立成功</li><li>三次握手完成，连接建立成功</li></ol></li><li>数据传输：数据传输阶段</li><li>断开连接：四次挥手<ol><li>发起方向接收方发送FIN报文，请求断开连接</li><li>接收方收到FIN报文后，回复ACK报文，表示收到断开请求</li><li>接收方向发起方发送FIN报文，请求断开连接</li><li>发起方收到FIN报文后，回复ACK报文，表示收到断开请求</li><li>四次挥手完成，连接断开成功</li></ol></li></ol><ul><li>谁想建立或断开连接，谁就是发起方。发起方可以是客户端，也可以是服务器端，</li></ul><h3 id="11-2-TCP协议分析">11.2 TCP协议分析</h3><p>以访问10.21.11.21为例，分析TCP协议的工作流程。</p><ol><li>打开Wireshark，在捕获选项中设置过滤器为“http and ip.addr==10.21.11.21”。</li><li>开始抓取数据。</li><li>打开浏览器，在地址栏中输入“10.21.11.21”，回车访问，等待加载完成后关闭浏览器。</li><li>结束抓取数据。</li><li>选中一条访问10.21.11.21的HTTP记录，右键，追踪TPC流。</li><li>观察TPC流是否包含完整的TPC访问过程（三次握手，四次挥手）。</li></ol><p>TCP数据包示例如下：</p><p><img src="https://source.cclmsy.cc/Images/Posts/Computer_Networks_and_Communications(Lab)/11_1.png" alt="TCP数据包"></p><h4 id="TCP报文格式">TCP报文格式</h4><table><thead><tr><th>字段</th><th>长度(bit)</th><th>说明</th></tr></thead><tbody><tr><td>Source Port</td><td>16</td><td>源端口号</td></tr><tr><td>Destination Port</td><td>16</td><td>目的端口号</td></tr><tr><td>Sequence Number</td><td>32</td><td>本报文段发送的数据组的第一个字节的序号</td></tr><tr><td>ACK Number</td><td>32</td><td>确认号，期望收到对方下一个报文段的第一个字节的序号，表明该序号之前的所有数据已经正确无误的收到</td></tr><tr><td>Header Length</td><td>4</td><td>报文头长度，指示TCP头部的长度，即数据区在报文段中的起始偏移值（字节）。偏移值=4*Header Length</td></tr><tr><td>Reserved</td><td>6</td><td>保留字段，未使用</td></tr><tr><td>Flags</td><td>6</td><td>标志位，按顺序为：URG、ACK、PSH、RST、SYN、FIN</td></tr><tr><td>Window Size</td><td>16</td><td>窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制</td></tr><tr><td>TCP Checksum</td><td>16</td><td>校验和，用于检验TCP头部和数据的完整性</td></tr><tr><td>Urgent Pointer</td><td>16</td><td>紧急指针，TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式</td></tr><tr><td>Options</td><td>0-320</td><td>可选字段，用于扩展TCP头部。最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size）（在第一个TCP报文）。选项长度不一定是32位的整数倍，所以要加填充位</td></tr></tbody></table><h4 id="TCP三次握手">TCP三次握手</h4><table><thead><tr><th>字段</th><th>第一次握手[SYN]</th><th>第二次握手[SYN, ACK]</th><th>第三次握手[ACK]</th></tr></thead><tbody><tr><td>Source Port</td><td>0xcf75(53109)</td><td>0x0050(80)</td><td>0xcf75(53109)</td></tr><tr><td>Destination Port</td><td>0x0050(80)</td><td>0xcf75(53109)</td><td>0x0050(80)</td></tr><tr><td>Sequence Number</td><td>0xc01d24d3(0)</td><td>0xabbe9051(0)</td><td>0xc01d24d4(1)</td></tr><tr><td>ACK Number</td><td>0x00000000(0)</td><td>0xc01d24d4(1)</td><td>0xabbe9052(1)</td></tr><tr><td>Header Length</td><td>0x8(32)</td><td>0x8(32)</td><td>0x5(20)</td></tr><tr><td>Reserved</td><td>0x00</td><td>0x00</td><td>0x00</td></tr><tr><td>Flags</td><td>0x002(SYN)</td><td>0x012(SYN, ACK)</td><td>0x010(ACK)</td></tr><tr><td>Window Size</td><td>0xfaf0(64240)</td><td>0x4000(16384)</td><td>0x0201(513)</td></tr></tbody></table><h4 id="TCP四次挥手">TCP四次挥手</h4><table><thead><tr><th>字段</th><th>第一次挥手[FIN, ACK]</th><th>第二次挥手[ACK]</th><th>第三次挥手[FIN, ACK]</th><th>第四次挥手[ACK]</th></tr></thead><tbody><tr><td>Source Port</td><td>0x0050(80)</td><td>0xcf75(53109)</td><td>0x0050(80)</td><td>0xcf75(53109)</td></tr><tr><td>Destination Port</td><td>0xcf75(53109)</td><td>0x0050(80)</td><td>0xcf75(53109)</td><td>0x0050(80)</td></tr><tr><td>Sequence Number</td><td>0xabbe9194(323)</td><td>0xc01d26e6(531)</td><td>0xc01d26e6(531)</td><td>0xabbe9195(324)</td></tr><tr><td>ACK Number</td><td>0xc01d26e6(531)</td><td>0xabbe9195(324)</td><td>0xabbe9195(324)</td><td>0xc01d26e7(532)</td></tr><tr><td>Header Length</td><td>0x5(20)</td><td>0x5(20)</td><td>0x5(20)</td><td>0x5(20)</td></tr><tr><td>Reserved</td><td>0x00</td><td>0x00</td><td>0x00</td><td>0x00</td></tr><tr><td>Flags</td><td>0x011(FIN, ACK)</td><td>0x010(ACK)</td><td>0x011(FIN, ACK)</td><td>0x010(ACK)</td></tr><tr><td>Window Size</td><td>0xfeed(65005)</td><td>0x0200(513)</td><td>0x0200(513)</td><td>0xfeed(65005)</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h2 id="附录-实验涉及命令行汇总">附录. 实验涉及命令行汇总</h2><h3 id="1-PC机-终端">1. PC机 终端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all # 查看IP配置</span><br><span class="line">ping &lt;IP地址&gt; # 测试连通性</span><br></pre></td></tr></table></figure><h3 id="2-交换机Switch-命令行">2. 交换机Switch 命令行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Switch&gt;enable # 进入特权模式</span><br><span class="line">Switch#configure terminal # 进入全局配置模式</span><br><span class="line">Switch(config)#hostname Switch # 设置交换机主机名</span><br><span class="line">Switch(config)#exit # 退回上一级模式</span><br><span class="line">Switch(config)#end # 退回特权模式</span><br><span class="line"></span><br><span class="line"># 显示</span><br><span class="line">Switch#show vlan brief # 显示VLAN信息</span><br><span class="line">Switch#show interfaces # 显示接口信息</span><br><span class="line">Switch#show interfaces trunk # 显示trunk接口信息</span><br><span class="line"></span><br><span class="line"># VLAN</span><br><span class="line">Switch(config)#vlan &lt;VLAN号&gt; # 创建VLAN并进入VLAN配置模式</span><br><span class="line">Switch(config)#interface vlan &lt;VLAN号&gt; # 进入VLAN配置模式</span><br><span class="line"></span><br><span class="line"># 接口</span><br><span class="line">Switch(config)#interface &lt;接口号&gt; # 进入接口配置模式</span><br><span class="line">Switch(config)#interface &lt;接口号&gt;-&lt;接口号&gt; # 进入接口范围配置模式</span><br><span class="line">Switch(config-if)#switchport mode access # 设置接口为access</span><br><span class="line">Switch(config-if)#switchport access vlan &lt;VLAN号&gt; # 设置access接口所属VLAN</span><br><span class="line">Switch(config-if)#switchport mode trunk # 设置接口为trunk</span><br><span class="line"></span><br><span class="line"># MAC地址绑定</span><br><span class="line">Switch#show mac-address-table # 查看MAC地址表</span><br><span class="line">Switch#show mac-address-table aging-time # 查看MAC地址表老化时间</span><br><span class="line">Switch(config-if)#mac-address-table static &lt;MAC地址&gt; vlan &lt;VLAN号&gt; interface &lt;接口号&gt; # 设置静态MAC地址绑定</span><br><span class="line">Switch(config-if)#no mac-address-table static &lt;MAC地址&gt; vlan &lt;VLAN号&gt; interface &lt;接口号&gt; # 删除静态MAC地址绑定</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-路由器Router-命令行">3. 路由器Router 命令行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Router&gt;enable # 进入特权模式</span><br><span class="line">Router#configure terminal # 进入全局配置模式</span><br><span class="line">Router(config)#hostname Router # 设置路由器主机名</span><br><span class="line">Router(config)#exit # 退回上一级模式</span><br><span class="line">Router(config)#end # 退回特权模式</span><br><span class="line"></span><br><span class="line"># 显示</span><br><span class="line">Router#show ip route # 显示路由表</span><br><span class="line">Router#show ip interface brief # 显示接口IP信息</span><br><span class="line">Router#show ip interface &lt;接口号&gt; # 显示指定接口信息</span><br><span class="line">Router#show ip nat translations # 显示NAT转换表</span><br><span class="line"></span><br><span class="line"># 接口</span><br><span class="line">Router(config)#interface &lt;接口号&gt; # 进入接口配置模式</span><br><span class="line">Router(config-if)#no shutdown # 激活接口</span><br><span class="line">Router(config-if)#ip address &lt;IP地址&gt; &lt;子网掩码&gt; # 设置接口IP地址</span><br><span class="line"></span><br><span class="line"># VLAN</span><br><span class="line">Router(config)#interface &lt;接口号&gt;.&lt;子接口号&gt; # 进入子接口配置模式（接口需激活）</span><br><span class="line">Router(config-subif)#encapsulation dot1Q &lt;VLAN号&gt; # 封装VLAN协议（802.1Q），设置子接口所属VLAN</span><br><span class="line">Router(config-subif)#ip address &lt;IP地址&gt; &lt;子网掩码&gt; # 设置子接口IP地址</span><br><span class="line"></span><br><span class="line"># 路由</span><br><span class="line">Router(config)#ip route &lt;目的网络&gt; &lt;子网掩码&gt; &lt;下一跳地址&gt; # 设置静态路由</span><br><span class="line"></span><br><span class="line">Router(config)#router rip # 进入RIP协议配置模式</span><br><span class="line">Router(config-router)#version &lt;版本号&gt; # 设置RIP版本</span><br><span class="line">Router(config-router)#network &lt;网络地址&gt; # 设置RIP协议的网络地址</span><br><span class="line"></span><br><span class="line"># NAT</span><br><span class="line">Router(config)#ip nat inside source static tcp &lt;内网IP地址&gt; &lt;内网端口&gt; &lt;外网IP地址&gt; &lt;外网端口&gt; # 设置静态NAT</span><br><span class="line"></span><br><span class="line">Router(config)#access-list &lt;访问控制列表号&gt; permit any # 创建访问控制列表</span><br><span class="line">Router(config)#ip nat pool &lt;IP地址池名称&gt; &lt;起始地址&gt; &lt;结束地址&gt; netmask &lt;子网掩码&gt; # 创建IP地址池</span><br><span class="line">Router(config)#ip nat inside source list &lt;访问控制列表号&gt; pool &lt;IP地址池名称&gt; # 设置动态NAT</span><br><span class="line">Router(config)#ip nat inside source list &lt;访问控制列表号&gt; pool &lt;IP地址池名称&gt; overload # 设置NAPT</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">交换机与路由器的爱恨情仇（？</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.cclmsy.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://www.cclmsy.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校10</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU10.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU10.html</id>
    <published>2024-08-17T16:00:00.000Z</published>
    <updated>2024-08-25T16:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A810%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（10）</a></p><h1>(1008)HDU7548.SunBian</h1><h2 id="题意">题意</h2><p>有排成环形的 $n$ 个横着的笋，Alice 和 Bob 轮流执行如下操作，Alice 先手：</p><ul><li>选择 [1,k] 个连续的横着的笋，把它们变成竖着的</li></ul><p>不能操作者输。</p><p>给定 $n,k$ ，求谁会赢。</p><h2 id="解题思路">解题思路</h2><ul><li>当 $k=1$ 时，根据奇偶性判断赢家</li><li>当 $k\ge n$ 时，先手直接将笋全部竖置，必胜</li><li>其余情况下，后手每次都可以尽可能保证剩余区域数为偶数，最终必胜</li></ul><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,k;cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=k) cout &lt;&lt; <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">1</span>) cout &lt;&lt; (n%<span class="number">2</span>?<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1009)HDU7549.不基本子串结构</h1><h2 id="题意-2">题意</h2><p>给定2个字符串 $a,b$ ，找到一个最小长度的字符串 $c$ ，使得 $a$ 和 $b$ 在 $c$ 中出现的次数相等且不为0，输出最小长度。</p><h2 id="解题思路-2">解题思路</h2><p>分类讨论，不妨假设 $len(a)\le len(b)$</p><ul><li>若 $a$ 在 $b$ 中出现的次数大于 $1$ ，则不存在满足条件的 $c$</li><li>若 $a$ 在 $b$ 中出现的次数为 $1$ ，则 $c=b$ ，输出 $len(b)$</li><li>若 $a$ 在 $b$ 中没有出现：<ul><li>记 $l_1$ 为 最大满足 $a[0:l]=b[len(b)-l:len(b)]$ 的 $l$</li><li>记 $l_2$ 为 最大满足 $a[len(a)-l:len(a)]=b[0:l]$ 的 $l$</li><li>答案为 $len(a)+len(b)-max(l_1,l_2)$</li></ul></li></ul><p>可以用字符串哈希进行检查和计数。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1,s2;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="keyword">if</span>(s1.<span class="built_in">length</span>()&lt;s2.<span class="built_in">length</span>()) <span class="built_in">swap</span>(s1,s2);</span><br><span class="line">    <span class="function">strHash <span class="title">h1</span><span class="params">(s1)</span>,<span class="title">h2</span><span class="params">(s2)</span></span>;</span><br><span class="line">    ll n=s1.<span class="built_in">length</span>(),m=s2.<span class="built_in">length</span>();</span><br><span class="line">    ll cnt=h1.<span class="built_in">count</span>(h2);</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=m+n;</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(len,m<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(h1.<span class="built_in">findz</span>(n-len+<span class="number">1</span>,n)==h2.<span class="built_in">findz</span>(<span class="number">1</span>,len))&#123;</span><br><span class="line">            <span class="built_in">chmin</span>(ans,n+m-len);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(len,m<span class="number">-1</span>,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(h1.<span class="built_in">findf</span>(<span class="number">1</span>,len)==h2.<span class="built_in">findf</span>(m-len+<span class="number">1</span>,m))&#123;</span><br><span class="line">            <span class="built_in">chmin</span>(ans,n+m-len);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>（1011）HDU7551.NOI2024</h1><h2 id="题意-3">题意</h2><p>$m$ 名选手进行 $n$ 场比赛，排名定义为分数严格大于你的人数+1。<br>第 $i$ 场比赛的分数上限为 $b_i$ ，你的排名为 $a_i$ 。<br>最终按照每场比赛的总分排名，前 $k$ 名选手将获得金牌。<br>问在给定条件下不管怎么比赛，是否一定能获得金牌。</p><h2 id="解题思路-3">解题思路</h2><p>用最坏情况考虑：你始终为 $0$ 分，在你前面的选手都有分数。<br>最终最坏排名为 $\min(\sum_{i=1}^{n}a_i,m)$ 。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m,k;cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">create_vec</span>(a,n);</span><br><span class="line">    <span class="built_in">create_vec</span>(b,n);</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) cnt+=<span class="built_in">max</span>(<span class="number">0ll</span>,a[i]<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">chmin</span>(cnt,m<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;=k) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校10</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校09</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU09.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU09.html</id>
    <published>2024-08-15T16:00:00.000Z</published>
    <updated>2024-08-25T16:44:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A89%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（9）</a></p><h1>(1005)HDU7533.怪物猎人</h1><h2 id="题意">题意</h2><p>攻击生命值为 $k$ 的怪物，每回合可选择造成 $x$ 或 $y$ 点伤害。<br>分别回答是否有一种攻击序列，可以恰好在第奇数回合/第偶数回合击杀怪物。</p><h2 id="解题思路">解题思路</h2><p>最边缘的情况即为全用 $x$ 和 全用 $y$ ，分别需要 $\lceil \frac{k}{x}\rceil$ 和 $\lceil \frac{k}{y}\rceil$ 回合。</p><p>这两个回合数相等，只有一种可能，否则都可以。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,a,b;cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    ll ta,tb;</span><br><span class="line">    ta=(n+a<span class="number">-1</span>)/a;</span><br><span class="line">    tb=(n+b<span class="number">-1</span>)/b;</span><br><span class="line">    <span class="keyword">if</span>(ta==tb)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ta%<span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1007)HDU7535.小猫钓鱼</h1><h2 id="题意-2">题意</h2><p>有 $2n$ 张牌，点数 $1\sim n$ 各出现2次。<br>两人各分到 $n$ 张牌，已知每个人手中牌的点数。<br>两人轮流放牌到牌堆顶，若牌堆中此前已经有相同点数的牌，则将这两张牌以及中间的所有牌拿回手中。<br>先打完的人输。</p><h2 id="解题思路-2">解题思路</h2><p>称手牌中成对的牌为双牌，单独的牌为单牌。</p><p>当自己打出单牌时，对方必定能打出一样的单牌收回，且先后手不变，这样是不优的。<br>因此，贪心的打法是先手打双牌，后手打双牌，先手打上次打的双牌。<br>这样的结果是：后手失去一个双牌，交换先后手。</p><p>观察到两人手牌中的双牌的数量相同，因此有双牌的情况下，后手先失去所有双牌，先手获胜。<br>否则，后手可以稳定收取先手打出的牌，后手获胜。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    map&lt;ll,<span class="type">int</span>&gt; mp;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        mp[t]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">if</span>(mp.<span class="built_in">size</span>()&lt;n) cout &lt;&lt; <span class="string">&quot;shuishui&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;sha7dow&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校09</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校10</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD10.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD10.html</id>
    <published>2024-08-14T16:00:00.000Z</published>
    <updated>2024-08-25T05:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81605">2024牛客暑期多校训练营10</a></p><h1>A.Surrender to My Will</h1><h2 id="题意">题意</h2><p>给定一个长度为 $5$ 的字符串，<code>Y</code>代表投降，<code>N</code>代表不投降，<code>-</code>代表未投票。<br>投降人数不小于4人即可投降。<br>问字符串表示的投降结果。</p><h2 id="解题思路">解题思路</h2><p>计数判断</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;cin &gt;&gt; s;</span><br><span class="line">    map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:s) mp[c]++;</span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">&#x27;Y&#x27;</span>]&gt;=<span class="number">4</span>) &#123;cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(mp[<span class="string">&#x27;N&#x27;</span>]&gt;=<span class="number">2</span>) &#123;cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;<span class="keyword">return</span>;&#125;</span><br><span class="line">    cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B.std::pair</h1><h2 id="题意-2">题意</h2><p>基础合法类型<code>int</code>和<code>double</code>。<br>对于任意2个合法类型<code>A</code>和<code>B</code>，<code>pair&lt;A,B&gt;</code>是合法的，可以通过<code>.first</code>和<code>.second</code>分别访问<code>A</code>和<code>B</code>成员。<br>声明变量的格式为<code>pair&lt;A,B&gt; 变量名;</code>。</p><p>给定 $n$ 个字符串表示变量声明，变量名不重复。<br>再给定 $q$ 个字符串表示访问变量，返回被查询的成员类型。</p><h2 id="解题思路-2">解题思路</h2><p>模拟题，对每个变量类型构建二叉树，查询在二叉树上进行。<br>具体实现方式可以参考代码。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">pll v[N]; <span class="comment">//pair的树，x表示左子树，y表示右子树</span></span><br><span class="line">map&lt;string,ll&gt; dict; <span class="comment">//变量二叉树的根所在下标</span></span><br><span class="line">ll cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function">pll <span class="title">parse_type</span><span class="params">(string s)</span></span>&#123; <span class="comment">//解析类型，构建树</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&quot;int&quot;</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;; <span class="comment">//int</span></span><br><span class="line">    <span class="keyword">if</span>(s==<span class="string">&quot;double&quot;</span>) <span class="keyword">return</span> &#123;<span class="number">-2</span>,<span class="number">-2</span>&#125;; <span class="comment">//double</span></span><br><span class="line">    s=s.<span class="built_in">substr</span>(<span class="number">5</span>,s.<span class="built_in">length</span>()<span class="number">-6</span>); </span><br><span class="line">    ll cntp=<span class="number">0</span>,cntd=<span class="number">0</span>,pos;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,s.<span class="built_in">length</span>()<span class="number">-1</span>)&#123; <span class="comment">//找到当前pair对应的逗号位置pos</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;p&#x27;</span>) cntp++;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;,&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cntp==cntd) &#123;pos=i;<span class="keyword">break</span>;&#125; </span><br><span class="line">            cntd++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string ltype=s.<span class="built_in">substr</span>(<span class="number">0</span>,pos),rtype=s.<span class="built_in">substr</span>(pos+<span class="number">1</span>,s.<span class="built_in">length</span>()-pos<span class="number">-1</span>);</span><br><span class="line">    ll lidx=cnt++,ridx=cnt++;</span><br><span class="line">    v[lidx]=<span class="built_in">parse_type</span>(ltype);</span><br><span class="line">    v[ridx]=<span class="built_in">parse_type</span>(rtype);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">make_pair</span>(lidx,ridx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">get_type</span><span class="params">(ll idx)</span></span>&#123; <span class="comment">//重组类型字符串</span></span><br><span class="line">    <span class="keyword">if</span>(v[idx].x==<span class="number">-1</span>) <span class="keyword">return</span> <span class="string">&quot;int&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(v[idx].x==<span class="number">-2</span>) <span class="keyword">return</span> <span class="string">&quot;double&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;pair&lt;&quot;</span>+<span class="built_in">get_type</span>(v[idx].x)+<span class="string">&quot;,&quot;</span>+<span class="built_in">get_type</span>(v[idx].y)+<span class="string">&quot;&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,q;cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    string type,name;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; type &gt;&gt; name;</span><br><span class="line">        name.<span class="built_in">pop_back</span>();</span><br><span class="line">        dict[name]=cnt++;</span><br><span class="line">        v[dict[name]]=<span class="built_in">parse_type</span>(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,q)&#123;</span><br><span class="line">        cin &gt;&gt; name;</span><br><span class="line">        ll j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;name.<span class="built_in">length</span>()&amp;&amp;name[j]!=<span class="string">&#x27;.&#x27;</span>) j++;</span><br><span class="line">        string main_name=name.<span class="built_in">substr</span>(<span class="number">0</span>,j); j++;</span><br><span class="line">        ll idx=dict[main_name];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;name.<span class="built_in">length</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(name[j]==<span class="string">&#x27;f&#x27;</span>)&#123; <span class="comment">//first</span></span><br><span class="line">                idx=v[idx].x;</span><br><span class="line">                j+=<span class="number">6</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(name[j]==<span class="string">&#x27;s&#x27;</span>)&#123; <span class="comment">//second</span></span><br><span class="line">                idx=v[idx].y;</span><br><span class="line">                j+=<span class="number">7</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">get_type</span>(idx) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>F.Collinear Exception</h1><h2 id="题意-3">题意</h2><p>有一 $n\times n$ 的点阵列，每个点的坐标为 $(i,j)$ ，$1\leq i,j\leq n$ 。<br>按给定序列对点进行标记，要求标记后不能存在三个被标记点共线，否则标记失败。<br>按给定序列顺序输出每个点是否标记成功。</p><h2 id="解题思路-3">解题思路</h2><p>每当加入一个新的点时，和已有的点连线，标记线上的所有点。<br>被标记的点不能再被加入。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">vis</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">    vector&lt;pll&gt; points;</span><br><span class="line">    ll ub=n*n,xx,yy,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,ub)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; xx &gt;&gt; yy;</span><br><span class="line">        <span class="keyword">if</span>(vis[xx][yy])&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>[tx,ty]:points)&#123; <span class="comment">//标记线上的点</span></span><br><span class="line">            <span class="keyword">if</span>(xx==tx)&#123;</span><br><span class="line">                <span class="built_in">FORLL</span>(j,<span class="number">1</span>,n) vis[xx][j]=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ll dx=xx-tx,dy=yy-ty;</span><br><span class="line">                ll g=__gcd(dx,dy);</span><br><span class="line">                dx/=g;dy/=g;</span><br><span class="line">                ll ttx=tx,tty=ty;</span><br><span class="line">                <span class="keyword">while</span>(ttx&lt;=n&amp;&amp;ttx&gt;=<span class="number">1</span>&amp;&amp;tty&lt;=n&amp;&amp;tty&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                    vis[ttx][tty]=<span class="number">1</span>;</span><br><span class="line">                    ttx+=dx; tty+=dy;</span><br><span class="line">                &#125;</span><br><span class="line">                ttx=tx; tty=ty;</span><br><span class="line">                <span class="keyword">while</span>(ttx&lt;=n&amp;&amp;ttx&gt;=<span class="number">1</span>&amp;&amp;tty&lt;=n&amp;&amp;tty&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">                    vis[ttx][tty]=<span class="number">1</span>;</span><br><span class="line">                    ttx-=dx; tty-=dy;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        points.<span class="built_in">emplace_back</span>(xx,yy);</span><br><span class="line">        vis[xx][yy]=<span class="number">1</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>H.All-in at the Pre-flop</h1><h2 id="题意-4">题意</h2><p>两名玩家初始分别有 $a,b$ 的筹码，每轮游戏各有 $\frac{1}{2}$ 的概率获胜。<br>假设当前轮两名玩家分别有 $x,y$ 的筹码，那么输家需要付给赢家 $\min(x,y)$ 的筹码。<br>问两名玩家获胜的概率。</p><h2 id="解题思路-4">解题思路</h2><p>打个表，观察到答案是 $\frac{a}{a+b},\frac{b}{a+b}$ 。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a,b;cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    ll c=<span class="built_in">inv</span>(<span class="built_in">add</span>(a,b));</span><br><span class="line">    cout &lt;&lt; <span class="built_in">mul</span>(a,c) &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="built_in">mul</span>(b,c) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校10</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校09</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD09.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD09.html</id>
    <published>2024-08-12T16:00:00.000Z</published>
    <updated>2024-08-25T05:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81604">2024牛客暑期多校训练营9</a></p><h1>A.Image Scaling</h1><h2 id="题意">题意</h2><p>给定由 <code>.</code> 和 <code>x</code> 组成的 $n\times m$ 的 $n\times m$ 矩阵，$x$ 部分是一个子矩阵。<br>提取并在长宽比不变的情况下，将子矩阵尽可能缩小并输出。</p><h2 id="解题思路">解题思路</h2><p>模拟，缩小到 $1/gcd$</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll fl=<span class="number">0</span>,st=<span class="number">-1</span>;</span><br><span class="line">    ll nn=<span class="number">-1</span>,mm,idx;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span>(fl) <span class="keyword">if</span>(s[idx]!=<span class="string">&#x27;x&#x27;</span>) &#123;nn=i-st;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">FORLL</span>(j,<span class="number">0</span>,m<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[j]==<span class="string">&#x27;x&#x27;</span>)&#123;</span><br><span class="line">                    fl=<span class="number">1</span>; st=i; idx=j;</span><br><span class="line">                    ll t=j;</span><br><span class="line">                    <span class="keyword">while</span>(t&lt;m&amp;&amp;s[t]==<span class="string">&#x27;x&#x27;</span>) t++;</span><br><span class="line">                    mm=t-j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nn==<span class="number">-1</span>) nn=n-st;</span><br><span class="line">    ll g=__gcd(nn,mm);</span><br><span class="line">    nn/=g; mm/=g;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,nn<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">FORLL</span>(j,<span class="number">0</span>,mm<span class="number">-1</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">        &#125;cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>K.Kill The Monsters</h1><h2 id="题意-2">题意</h2><p>$n$ 个怪兽，第 $i$ 个怪兽的体力为 $a_i$ 。</p><p>每次可以进行一种操作：</p><ol><li>所有怪兽体力 $-1$</li><li>选择一个怪兽 $i$ 使得 $a_i\leftarrow \lfloor \dfrac{a_i}{k} \rfloor$</li></ol><p>问最少多少次操作可以使所有怪兽的体力都为 $0$ 。</p><h2 id="解题思路-2">解题思路</h2><p>贪心的，先连续对最大体力的怪兽进行第二种操作，再进行第一种操作。<br>用优先队列维护最大体力。<br>记当前已经操作了 $cnt$ 次，用 $a_{max}+cnt$ 维护最小操作次数。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,k,t;cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    priority_queue&lt;ll&gt; pq;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) &#123;cin &gt;&gt; t;pq.<span class="built_in">push</span>(t);&#125;</span><br><span class="line">    ll cur=<span class="number">0</span>,ans=pq.<span class="built_in">top</span>();</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;cout &lt;&lt; ans &lt;&lt; endl;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(pq.<span class="built_in">top</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        t=pq.<span class="built_in">top</span>();pq.<span class="built_in">pop</span>();</span><br><span class="line">        t/=k; cur++;</span><br><span class="line">        pq.<span class="built_in">push</span>(t);</span><br><span class="line">        <span class="built_in">chmin</span>(ans,pq.<span class="built_in">top</span>()+cur);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans  &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校09</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校08</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU08.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU08.html</id>
    <published>2024-08-11T16:00:00.000Z</published>
    <updated>2024-08-25T16:44:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A88%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（8）</a></p><h1>(1004)HDU7520.cats 的重力拼图</h1><h2 id="题意">题意</h2><p>有一个 $n\times m$ 的方格阵列，物块初始位于 $(x,y),1\le x\le n,1\le y\le m$。<br>每次操作可以改变重力方向：向上、向下、向左、向右，物块会沿重力方向移动，直到碰到边界。<br>求任意操作下物块最多经过的格子数。</p><h2 id="解题思路">解题思路</h2><p>有2种最贪心的操作序列：</p><ol><li>向左、向右、再沿边缘一周</li><li>向上、向下、再沿边缘一周</li></ol><p>特判 $n=1$ 或 $m=1$ 或初始在边缘的情况。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m,a,b;cin &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>||m&lt;=<span class="number">2</span>)&#123; cout &lt;&lt; n*m &lt;&lt; endl; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    ll ans=<span class="number">2</span>*(n+m<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>||a==n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">1</span>||b==m) cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; ans+n<span class="number">-2</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b==<span class="number">1</span>||b==m) cout &lt;&lt; ans+m<span class="number">-2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; ans+<span class="built_in">max</span>(&#123;<span class="number">0ll</span>,n<span class="number">-2</span>,m<span class="number">-2</span>&#125;) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>（1006）HDU7522.cats 的最小生成树</h1><h2 id="题意-2">题意</h2><p>给定一个有 $n$ 个节点，可能含重边的带权无向图， $m$ 条边按顺序给出，第 $i$ 条边的权值为 $i$。<br>每次删去当前图的最小生成树的所有边，直到图不连通。</p><p>求每条边是在第几次被删除去的。</p><h2 id="解题思路-2">解题思路</h2><p>根据Kruskal算法思想，最小生成树加边是从小到大加入的。<br>开若干个并查集，遍历边，每次二分查找当前边最早可以加入第几个并查集。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll ub=m/(n<span class="number">-1</span>);</span><br><span class="line">    <span class="function">vector&lt;DSU&gt; <span class="title">dsu</span><span class="params">(ub+<span class="number">2</span>,DSU(n))</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">cnt</span><span class="params">(ub+<span class="number">2</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">ans</span><span class="params">(m+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    ll u,v;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        ll l=<span class="number">1</span>,r=ub+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            ll mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">bool</span> fl=(dsu[mid].<span class="built_in">find</span>(u)==dsu[mid].<span class="built_in">find</span>(v));</span><br><span class="line">            <span class="keyword">if</span>(fl) l=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll tar=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">FORLL</span>(i,<span class="built_in">max</span>(<span class="number">1ll</span>,l<span class="number">-3</span>),<span class="built_in">min</span>(ub+<span class="number">1</span>,l+<span class="number">3</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(dsu[i].<span class="built_in">find</span>(u)!=dsu[i].<span class="built_in">find</span>(v))&#123;</span><br><span class="line">                tar=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tar==ub+<span class="number">1</span>) &#123; ans[i]=<span class="number">-1</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        dsu[tar].<span class="built_in">merge</span>(u,v);</span><br><span class="line">        cnt[tar]++; ans[i]=tar;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">-1</span>&amp;&amp;cnt[ans[i]]==n<span class="number">-1</span>) cout &lt;&lt; ans[i];</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">Presentation</span>(i,m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1007)HDU7523.cats 的 k-xor</h1><h2 id="题意-3">题意</h2><p>给定2个十进制整数 $a,b,c$ ， $a,b$ 进行 $k(k\ge 2)$ 进制不进位加法后的结果是 $c$。<br>求 $k$ 有多少种可能。</p><h2 id="解题思路-3">解题思路</h2><p>不进位加法下，丢失的进位信息 $a+b-c$ 是 $k$ 的倍数。<br>枚举 $a+b-c$ 的因子作为 $k$ ，check是否满足条件。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll a,ll b,ll c,ll k)</span></span>&#123;</span><br><span class="line">    ll dif=a+b-c;</span><br><span class="line">    ll cur=<span class="number">1</span>,nxt=k,s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(a/cur||b/cur)&#123;</span><br><span class="line">        ll ta=a/cur%k,tb=b/cur%k;</span><br><span class="line">        s+=(ta+tb)/k*nxt;</span><br><span class="line">        cur*=k; nxt*=k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s==dif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a,b,c;cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    ll dif=a+b-c;</span><br><span class="line">    <span class="keyword">if</span>(dif==<span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">0</span>,ub=<span class="built_in">sqrt</span>(dif)+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">2</span>,ub) <span class="keyword">if</span>(dif%i==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i*i&gt;dif) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(a,b,c,i)) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(i*i!=dif&amp;&amp;<span class="built_in">check</span>(a,b,c,dif/i)) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(a,b,c,dif)) cnt++;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>（1012）HDU7528.cats 的电脑中毒</h1><h2 id="题意-4">题意</h2><p>给定 $3$ 个长度为 $n$ 的二进制串 $a,b,c$ ， 表示病毒的初始位置。<br>每过一秒，病毒会感染相邻的所有二进制编码。（当且仅当两个二进制编码仅有一个位置不同时，这两个编码为相邻）<br>问所有的 $2^n$ 个二进制编码都被感染需要多少时间。</p><h2 id="解题思路-4">解题思路</h2><p>考虑最后一秒被感染的二进制串，它的 距离三个初始位置的最小汉明距离 最大，找到这个串。<br>设这个串为 $s$ ，枚举每一位。若三个初始位置的这一位上，1的数量较多，则设为0；否则设为1。<br>然后进行微调，使得 $s$ 到三个初始位置的最小汉明距离 最大。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ll n;</span><br><span class="line"><span class="function">ll <span class="title">dis</span><span class="params">(string s1,string s2)</span></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) cnt+=(s1[i]!=s2[i]);</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s[<span class="number">3</span>],<span class="built_in">ns</span>(n,<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,<span class="number">2</span>) cin &gt;&gt; s[i];</span><br><span class="line">    ll cnta=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="type">int</span> cnt1=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">FORLL</span>(j,<span class="number">0</span>,<span class="number">2</span>) <span class="keyword">if</span>(s[j][i]==<span class="string">&#x27;1&#x27;</span>) cnt1++;</span><br><span class="line">        ns[i]=(cnt1&gt;=<span class="number">2</span>)?<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll dis0=<span class="built_in">dis</span>(s[<span class="number">0</span>],ns),dis1=<span class="built_in">dis</span>(s[<span class="number">1</span>],ns),dis2=<span class="built_in">dis</span>(s[<span class="number">2</span>],ns);</span><br><span class="line">    <span class="keyword">while</span>(dis0&lt;dis1<span class="number">-1</span>&amp;&amp;dis0&lt;dis2<span class="number">-1</span>)&#123; dis0++; dis1--; dis2--; &#125;</span><br><span class="line">    <span class="keyword">while</span>(dis1&lt;dis0<span class="number">-1</span>&amp;&amp;dis1&lt;dis2<span class="number">-1</span>)&#123; dis1++; dis0--; dis2--; &#125;</span><br><span class="line">    <span class="keyword">while</span>(dis2&lt;dis0<span class="number">-1</span>&amp;&amp;dis2&lt;dis1<span class="number">-1</span>)&#123; dis2++; dis0--; dis1--; &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">min</span>(&#123;dis0,dis1,dis2&#125;) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校08</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校07</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU07.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU07.html</id>
    <published>2024-08-08T16:00:00.000Z</published>
    <updated>2024-08-25T16:44:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A87%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（7）</a></p><h1>(1010)HDU7514.故障机器人想活下去</h1><h2 id="题意">题意</h2><p>故障机器人有 $x$ 点血量。<br>他将按顺序进行 $n$ 场战斗，第 $i$ 场战斗会受到 $a_i$ 点伤害。<br>故障机器人还有 $k$ 个烟雾弹，每个烟雾弹可以让他跳过一场战斗而不受伤害。</p><p>问故障机器人最多能活到第几场战斗结束。</p><h2 id="解题思路">解题思路</h2><p>维护当前最高的 $k$ 个伤害，作为被跳过的伤害。<br>统计受伤量，直到受伤量超过 $x$ 为止。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,x,k;cin &gt;&gt; n &gt;&gt; x &gt;&gt; k;</span><br><span class="line">    <span class="built_in">create_vec</span>(v,n);</span><br><span class="line">    priority_queue&lt;ll,vector&lt;ll&gt;,less&lt;ll&gt;&gt; pq;</span><br><span class="line">    ll S=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        S+=v[i];</span><br><span class="line">        pq.<span class="built_in">push</span>(v[i]);</span><br><span class="line">        <span class="keyword">while</span>(S&gt;=x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt&gt;=k)&#123;</span><br><span class="line">                cout &lt;&lt; pq.<span class="built_in">size</span>()+cnt<span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            S-=pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1011)HDU7515.蛋糕上的草莓是蛋糕的灵魂</h1><h2 id="题意-2">题意</h2><p>有 $x$ 个相同的草莓和 $y$ 个相同的蛋糕。<br>每次可以将当前所有草莓或蛋糕放在一起切 $m$ 刀，即份数变为此前的 $2m$ 倍。<br>在满足条件的情况下切草莓的次数尽可能少。<br>求出最终草莓和蛋糕的数量。</p><h2 id="解题思路-2">解题思路</h2><p>贪心的，观察到蛋糕是不用切的，将草莓切到 $\gcd(x,y)$ 份即可。<br>若 $\gcd$ 是 $x$ 的奇数倍，需要多来一刀。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    ll g=__gcd(x,y);</span><br><span class="line">    <span class="keyword">if</span>(y/g&gt;<span class="number">1</span>&amp;&amp;(y/g)%<span class="number">2</span>) cout &lt;&lt; y &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; x/g*<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; y &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; x/g &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校07</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校08</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD08.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD08.html</id>
    <published>2024-08-07T16:00:00.000Z</published>
    <updated>2024-08-24T15:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81603">2024牛客暑期多校训练营8</a></p><h1>A.Haitang and Game</h1><h2 id="题意">题意</h2><p>给定一个包含 $n$ 个数的正整数集合 $S$ ，每次可以从中选择两个数 $x,y$ 满足 $x,y\in S,\gcd(x,y)\notin S$，将 $\gcd(x,y)$ 加入 $S$ 。<br>最多加入数的个数是奇数输出<code>dXqwq</code>，否则输出<code>Haitang</code>。</p><h2 id="解题思路">解题思路</h2><p>考虑最终集合中的数 $d$ ，一定满足原集合中，它的所有倍数的 $gcd$ 等于它。<br>从小到大枚举 $d$ ，如果 $d$ 满足上述条件且不在原集合中，计数。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    unordered_set&lt;ll&gt; s;</span><br><span class="line">    ll mx=<span class="number">-1</span>,t;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        s.<span class="built_in">insert</span>(t);</span><br><span class="line">        <span class="built_in">chmax</span>(mx,t);</span><br><span class="line">    &#125;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,mx)&#123;</span><br><span class="line">        ll fl=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll j=i;j&lt;=mx;j+=i)</span><br><span class="line">            <span class="keyword">if</span>(s.<span class="built_in">count</span>(j)) fl=__gcd(fl,j);</span><br><span class="line">        <span class="keyword">if</span>(fl==i&amp;&amp;!s.<span class="built_in">count</span>(i)) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt%<span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;dXqwq\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Haitang\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>J.Haitang and Triangle</h1><h2 id="题意-2">题意</h2><p>构造一个长度为 $n$ 的排列，它恰有 $m$ 个长度为 $3$ 的子区间满足子区间的三个数能构成非退化三角形。</p><h2 id="解题思路-2">解题思路</h2><p>构造一个长度为 $n-m$ 的排列，它不含能够构成非退化三角形的长度为 $3$ 的子区间。<br>我使用的方法是把 $1\sim n-m$ 从大到小均分成三组，第1组降序，其他组升序，按321的顺序放置。<br>假设 $n-m=7$ ，分成 $[2,1],[3,4],[5,6,7]$ ，排列为 $5,3,2,\ 6,4,1,\ 7$ 。</p><p>剩下 $m$ 个数降序放在排列的前面，和上面的排列合并形成 $m$ 个合法区间。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll t = n-m;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    deque&lt;ll&gt; v[<span class="number">3</span>];</span><br><span class="line">    ll t1=t/<span class="number">3</span>,t2=t%<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,t1) v[<span class="number">0</span>].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,t1+<span class="number">1</span>,t1*<span class="number">2</span>+(t2&gt;<span class="number">1</span>)) v[<span class="number">1</span>].<span class="built_in">emplace_front</span>(i);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,t1*<span class="number">2</span>+(t2&gt;<span class="number">1</span>)+<span class="number">1</span>,t) v[<span class="number">2</span>].<span class="built_in">emplace_front</span>(i);</span><br><span class="line">    <span class="comment">// FORLL(i,0,2) print_vec(v[i]);</span></span><br><span class="line">    vector&lt;ll&gt; ans;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,t1)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;v[<span class="number">2</span>].<span class="built_in">size</span>()) ans.<span class="built_in">emplace_back</span>(v[<span class="number">2</span>][i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;v[<span class="number">1</span>].<span class="built_in">size</span>()) ans.<span class="built_in">emplace_back</span>(v[<span class="number">1</span>][i]);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;v[<span class="number">0</span>].<span class="built_in">size</span>()) ans.<span class="built_in">emplace_back</span>(v[<span class="number">0</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(i,n,t+<span class="number">1</span>) cout &lt;&lt; i &lt;&lt; <span class="built_in">Presentation</span>(i,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,t<span class="number">-1</span>) cout &lt;&lt; ans[i] &lt;&lt; <span class="built_in">Presentation</span>(i,t<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>K.Haitang and Ava</h1><h2 id="题意-3">题意</h2><p>判断给定字符串是否仅由若干个 <code>ava</code> 和 <code>avava</code> 组成。</p><h2 id="解题思路-3">解题思路</h2><p>从 $i=1$ 开始，对于当前位置开头，先检查长度为 $5$ 的子串是否是 <code>avava</code> ，再检查长度为 $3$ 的子串是否是 <code>ava</code> ，如果是，就跳过这个子串；否则输出<code>NO</code>。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pat1 = <span class="string">&#x27;ava&#x27;</span></span><br><span class="line">pat2 = <span class="string">&#x27;avava&#x27;</span></span><br><span class="line"></span><br><span class="line">T = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(T):</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">        <span class="keyword">if</span> i+<span class="number">5</span>&lt;=<span class="built_in">len</span>(s) <span class="keyword">and</span> s[i:i+<span class="number">5</span>] == pat2:</span><br><span class="line">            i += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> i+<span class="number">3</span>&lt;=<span class="built_in">len</span>(s) <span class="keyword">and</span> s[i:i+<span class="number">3</span>] == pat1:</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Yes&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校08</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校07</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD07.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD07.html</id>
    <published>2024-08-05T16:00:00.000Z</published>
    <updated>2024-08-25T05:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81702">2024牛客暑期多校训练营7</a></p><h1>I.Fight Against the Monster</h1><h2 id="题意">题意</h2><p>瓶子换水问题。 $m$ 个空瓶可以换 $k$ 瓶水， 求一共要喝 $h$ 瓶水，初始最少需要多少瓶水。</p><h2 id="解题思路">解题思路</h2><p>二分check。</p><p>设初始有 $x$ 瓶水，换水次数为 $\dfrac{x-m}{m-k}+1=\dfrac{x-k}{m-k}$。<br>每次换水产生 $k$ 瓶水，总共 $x+k\cdot \dfrac{x-k}{m-k}$ 瓶水。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(ll m,ll k,ll h,ll x)</span></span>&#123;</span><br><span class="line">    ll t=(x-k)/(m-k)*k+x;   </span><br><span class="line">    <span class="keyword">if</span>(t&gt;=h) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll m,k,h;cin &gt;&gt; m &gt;&gt; k &gt;&gt; h;</span><br><span class="line">    <span class="keyword">if</span>(h&lt;=m)&#123;cout &lt;&lt; h &lt;&lt; endl;<span class="keyword">return</span>;&#125; <span class="comment">//不用换</span></span><br><span class="line">    <span class="keyword">if</span>(m&lt;=k)&#123;cout &lt;&lt; m &lt;&lt; endl;<span class="keyword">return</span>;&#125; <span class="comment">//生生不息</span></span><br><span class="line">    ll l=<span class="number">0</span>,r=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        ll mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(m,k,h,mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="built_in">max</span>(<span class="number">0ll</span>,l<span class="number">-10</span>),r+<span class="number">10</span>) <span class="keyword">if</span>(<span class="built_in">check</span>(m,k,h,i)) &#123;cout &lt;&lt; i &lt;&lt; endl;<span class="keyword">return</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>J.Ball</h1><h2 id="题意-2">题意</h2><p>给定一根左端点为 $(0,0)$ 垂直于y轴长度为 $l$ 的棍子。<br>在上面找一个支点使得棍子绕支点旋转可以碰到位于 $(x,y)$ 的小球。</p><h2 id="解题思路-2">解题思路</h2><p>支点位于两端时扫过的面积可覆盖所有情况。<br>判断小球到两端的距离。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll l,x,y;</span><br><span class="line">    cin &gt;&gt; l &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    ll dis1,dis2;</span><br><span class="line">    dis1=x*x+y*y;</span><br><span class="line">    dis2=(l-x)*(l-x)+y*y;</span><br><span class="line">    <span class="keyword">if</span>(dis1&gt;l*l&amp;&amp;dis2&gt;l*l) &#123; cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>; <span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(dis1&lt;dis2) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校07</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校06</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU06.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU06.html</id>
    <published>2024-08-04T16:00:00.000Z</published>
    <updated>2024-08-05T17:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A86%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（6）</a></p><h1>(1001)HDU7494 造花（简单版）</h1><h2 id="题意">题意</h2><p>给定一棵 $n$ 个节点的树，问能否通过删去一个节点，使得剩下的节点组成2个连通块，且每个连通块都是一个菊花图。</p><p>菊花图是一棵树，且存在唯一中心点与其他所有节点之间有一条边。特殊的，只有一个节点的树也是菊花图。</p><h2 id="解题思路">解题思路</h2><p>一棵树删去一个点得到两个连通块，那么删去的点的度必定为2。</p><p>这个删去的点 $u$ 和得到的两个菊花图的中心点 $v_1,v_2$ 有三种情况：</p><ol><li>$u$ 和 $v_1,v_2$ 直接相连</li><li>$u$ 和 $v_1$ 直接相连，和 $v_2$ 的距离为2</li><li>$u$ 和 $v_1,v_2$ 的距离都为2</li></ol><p>记录度大于1的节点，这些点是关键节点，可能是中心点，也可能是删去的点。</p><p>度大于1的节点数最多的情况是第三种，最多有5个度大于1的节点，形如：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  8       9</span><br><span class="line">  |       |</span><br><span class="line">1<span class="string">-2</span><span class="string">-3</span><span class="string">-4</span><span class="string">-5</span><span class="string">-6</span><span class="string">-7</span></span><br><span class="line">  |       |</span><br><span class="line">  10      11</span><br></pre></td></tr></table></figure><p>删去点 $u$ 后，剩余度大于1的节点必定是中心点，个数不大于 $2-t$ 即满足。<br>其中， $t$ 是删点后仅由不多于$2$个点组成的连通块的个数。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    vector&lt;vector&lt;ll&gt;&gt; <span class="built_in">G</span>(n+<span class="number">1</span>);</span><br><span class="line">    ll u,v;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;ll&gt; crit; <span class="comment">//关键点</span></span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(G[i].<span class="built_in">size</span>()&gt;<span class="number">1</span>) crit.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(crit.<span class="built_in">size</span>()&gt;<span class="number">5</span>) &#123;cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;<span class="keyword">return</span>;&#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u:crit) <span class="keyword">if</span>(G[u].<span class="built_in">size</span>()==<span class="number">2</span>)&#123; <span class="comment">//枚举删除的点</span></span><br><span class="line">        ll cnt2=<span class="number">0</span>,cnt1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u])&#123; <span class="comment">//相邻的2个点</span></span><br><span class="line">            <span class="keyword">if</span>(G[v].<span class="built_in">size</span>()==<span class="number">2</span>)&#123; </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> w:G[v])  <span class="comment">//w==u:这一端的连通块只有2个节点</span></span><br><span class="line">                <span class="keyword">if</span>(w!=u) <span class="keyword">if</span>(G[w].<span class="built_in">size</span>()&gt;<span class="number">1</span>) cnt2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(G[v].<span class="built_in">size</span>()==<span class="number">1</span>) cnt1++; <span class="comment">//这一端的连通块只有1个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        ll t=crit.<span class="built_in">size</span>()<span class="number">-1</span>-cnt2;</span><br><span class="line">        <span class="keyword">if</span>(t&lt;=<span class="number">2</span>-cnt1) &#123; cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1003)HDU7496 飞车狂飙</h1><h2 id="题意-2">题意</h2><p>给定一个长度为 $n$ 的字符串，包含：</p><ol><li><code>L</code> ：表示左转的方块</li><li><code>R</code> ：表示右转的方块</li><li><code>S</code> ：表示直行的方块</li></ol><p>从原点开始，按照字符串给定的顺序，先放置，再按照给定的方向移动。</p><p>合法的字符串满足：</p><ol><li>不在同一位置放置两个方块</li><li>所有方块形成一个环</li></ol><p>问给定的字符串是否合法。</p><h2 id="解题思路-2">解题思路</h2><p>模拟。<br>每走一步更新沿途放置了方块的坐标和当前方向。<br>中途检查是否有重复放置的方块，最后检查是否回到原点、方向是否回正。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        0 1 2 3</span></span><br><span class="line"><span class="type">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pll cur=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> dir=<span class="number">0</span>; <span class="comment">//0:up 1:left 2:down 3:right</span></span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    string s;cin &gt;&gt; s;</span><br><span class="line">    map&lt;pll,<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(cur))&#123;  cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">        mp[cur]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;L&#x27;</span>) dir=(dir+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;R&#x27;</span>) dir=(dir+<span class="number">3</span>)%<span class="number">4</span>;</span><br><span class="line">        cur.first+=dx[dir];</span><br><span class="line">        cur.second+=dy[dir];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cur.first==<span class="number">0</span>&amp;&amp;cur.second==<span class="number">0</span>&amp;&amp;dir==<span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;1\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1004)HDU7497 不醒人室</h1><h2 id="题意-3">题意</h2><p>给定 $n$ 个上课时间段， $m$ 个睡觉时间段。</p><p>初始状态是不清醒。<br>每个睡觉时间段 $[s,t]$ 能使接下来 $2(t-s)$ 的时间，也就是 $[t,t+2(t-s)]$ 时间段内保持清醒。<br>睡觉提供的清醒时间段不会叠加，以此前最后一个睡觉时间段为准。</p><p>问给定的时间段能否满足以下条件：</p><ol><li>上课时间保持清醒</li><li>上课时间不能睡觉</li></ol><h2 id="解题思路-3">解题思路</h2><p>将所有时间段排序，从左往右遍历：</p><ol><li>当前是上课时间段，检查：<ol><li>上课开始时间是否晚于最后一个睡觉时间段的结束时间</li><li>上课结束时间是否早于最后一次睡觉提供的清醒时间段的结束时间</li></ol></li><li>当前是睡觉时间段，检查睡觉时间是否晚于上一节课的结束时间</li></ol><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;pair&lt;pll,<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(m+n);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; v[i].first.first &gt;&gt; v[i].first.second;</span><br><span class="line">        v[i].second = <span class="number">0</span>; <span class="comment">//上课</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,n,n+m<span class="number">-1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; v[i].first.first &gt;&gt; v[i].first.second;</span><br><span class="line">        v[i].second = <span class="number">1</span>; <span class="comment">//睡觉</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SORT</span>(v);</span><br><span class="line">    ll b,e,s,t; <span class="comment">//上次上课时间[b,e]，上次睡觉时间[s,t]</span></span><br><span class="line">    b=e=s=t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [tp,op]:v)&#123;</span><br><span class="line">        <span class="keyword">auto</span> [x,y] = tp;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">0</span>)&#123; <span class="comment">//上课</span></span><br><span class="line">            <span class="keyword">if</span>(x&lt;t)&#123; cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;<span class="keyword">return</span>;&#125; <span class="comment">//上课开始还在睡觉</span></span><br><span class="line">            <span class="keyword">if</span>(t+<span class="number">2</span>*(t-s)&lt;y) &#123;cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;<span class="keyword">return</span>;&#125; <span class="comment">//上次没睡够支撑不到下课</span></span><br><span class="line">            b=x;e=y;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="keyword">if</span>(x&lt;e)&#123; cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;<span class="keyword">return</span>;&#125; <span class="comment">//还没下课就睡觉</span></span><br><span class="line">            s=x;t=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1005)HDU7498 交通管控</h1><h2 id="题意-4">题意</h2><p>有 $k$ 盏红绿灯，每盏灯有三种状态：绿色<code>A</code>、黄色<code>B</code>、红色<code>C</code>。</p><p>一个操作用一个长度为 $k$ 的字符串表示，一个字符对应一盏灯。<br>字符串中包含：</p><ol><li><code>+</code>：红变绿、绿变黄、黄变红</li><li><code>-</code>：绿变红、黄变绿、红变黄</li><li><code>0</code>：不变</li></ol><p>交警有一个长度为 $n$ 的操作序列，他可以按顺序对每个操作选择执行或不执行。</p><p>问最后能达到哪些状态，以及每种状态对应的 操作序列种数。</p><h2 id="解题思路-4">解题思路</h2><p>状态压缩DP。</p><p>用一个 $k$ 位3进制数表示 $k$ 盏灯的状态，每一位表示一盏灯的状态：0绿、1黄、2红。<br>记：</p><ul><li>$dp[i][x]$ 表示前 $i$ 个操作，状态为 $x$ 的方案数。</li><li>$op(x,i)$ 表示状态 $x$ 经过第 $i$ 个操作后的状态。</li></ul><p>状态转移方程：$dp[i][x]=dp[i-1][x]+\sum\limits_{j}^{st\in stat[i-1],op(st,i)=j} dp[i-1][st]$<br>其中，$stat[i-1]$ 表示第 $i-1$ 个操作后的所有状态。</p><p>利用滚动数组可以实现空间优化。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;ll&gt; pow3;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pow3.<span class="built_in">emplace_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,<span class="number">20</span>) pow3.<span class="built_in">emplace_back</span>(pow3.<span class="built_in">back</span>()*<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="comment">//在x的3进制，第idx位，+d再对3取模</span></span><br><span class="line"><span class="function">ll <span class="title">opadd</span><span class="params">(ll x,ll idx,ll d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    ll t = x/pow3[idx]%<span class="number">3</span>;</span><br><span class="line">    t = (t+d+<span class="number">3</span>)%<span class="number">3</span>-t;</span><br><span class="line">    <span class="keyword">return</span> x + t*pow3[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0A1B2C</span></span><br><span class="line"><span class="function">string <span class="title">trans</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,k<span class="number">-1</span>)&#123;</span><br><span class="line">        s += <span class="built_in">char</span>(<span class="string">&#x27;A&#x27;</span>+x%<span class="number">3</span>);</span><br><span class="line">        x /= <span class="number">3</span>;</span><br><span class="line">    &#125; <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    cin &gt;&gt; MODULE::MOD;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">v</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; s:v) cin &gt;&gt; s;</span><br><span class="line">    map&lt;ll,ll&gt; dp[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> fl=<span class="number">0</span>;</span><br><span class="line">    dp[fl].<span class="built_in">insert</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;); fl^=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; s:v)&#123;</span><br><span class="line">        dp[fl]=dp[fl^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> [v,cnt]:dp[fl^<span class="number">1</span>])&#123;</span><br><span class="line">            ll t=v;</span><br><span class="line">            <span class="built_in">FORLL</span>(i,<span class="number">0</span>,k<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">&#x27;+&#x27;</span>) t=<span class="built_in">opadd</span>(t,i,<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">&#x27;-&#x27;</span>) t=<span class="built_in">opadd</span>(t,i,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">addto</span>(dp[fl][t],cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        fl^=<span class="number">1</span>;</span><br><span class="line">    &#125;fl^=<span class="number">1</span>;</span><br><span class="line">    map&lt;string,ll&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [v,cnt]:dp[fl]) ans.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">trans</span>(v),(ll)cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [s,cnt]:ans) cout &lt;&lt; s &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校06</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校05</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU05.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU05.html</id>
    <published>2024-08-01T16:00:00.000Z</published>
    <updated>2024-08-05T11:36:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A85%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（5）</a></p><h1>(1002)HDU7482 Array-Gift</h1><h2 id="题意">题意</h2><p>给定一个长度为 $n$ 的正整数数组 $a$ ，提供以下2种操作：</p><ol><li>选择两个不同的下标 $i,j$ ，$a_i\leftarrow a_i\ mod\ a_j$</li><li>选择一个下标 $i$ 和一个任意正整数 $x$ ，$a_i\leftarrow a_i+x$</li></ol><p>求使得数组仅有1个非0元素的最小操作次数。</p><h2 id="解题思路">解题思路</h2><p>add：做之前先对数组去重，因为重复的数可以在开始就通过操作1变为0。</p><p>考虑最坏情况的操作次数：<br>选定两个不同的下标 $i,j$ ，不妨设 $a_i&lt;=a_j$ 。（1次）<br>做操作2使得 $a_i=a_j+1$ ，再做操作1使得 $a_i=1$ 。（1次）<br>最后对每个 $k\neq i$ 做操作1：$a_k\leftarrow a_k\ mod\ a_i=0$ 。（$n-1$次）<br>最坏情况的操作次数为 $n+1$ 。</p><p>最好的情况：存在一个下标 $i$ 使得 $a_i$ 能够整除数组中所有元素。<br>满足这个条件的 $a_i$ 一定是数组中的最小值。<br>这种情况只需对每个 $k\neq i$ 做操作1：$a_k\leftarrow a_k\ mod\ a_i=0$ ，操作次数为 $n-1$ 。</p><p>由于最坏情况难以确定，考虑操作次数为 $n$ 的情况：</p><ol><li>数组 $a$ 中的最小值经过操作2 ，$\min(a)\leftarrow\min(a)+x$ ，能够整除数组中所有元素。</li><li>某个元素经过操作1，能够整除数组中所有元素。</li></ol><p>对于第二种情况，维护gcd前缀/后缀（似乎不维护也能过？）。<br>枚举被修改的数 $a_i$ 和模数 $a_j$ ，若 $a_i\ mod\ a_j=\gcd\limits_k^{k\neq i}a_k$ ，则最少操作次数为 $n$ 。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">create_vec</span>(v,n);</span><br><span class="line">    <span class="built_in">SORT</span>(v);</span><br><span class="line">    vector&lt;ll&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:v)&#123;</span><br><span class="line">        <span class="type">int</span> fl=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> m:tmp) <span class="keyword">if</span>(x%m==<span class="number">0</span>) &#123;fl=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(fl) tmp.<span class="built_in">emplace_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    ll on=n; v=tmp; n=v.<span class="built_in">size</span>(); <span class="comment">//on是原数组大小</span></span><br><span class="line">    v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>(),<span class="number">0</span>); v.<span class="built_in">insert</span>(v.<span class="built_in">end</span>(),<span class="number">0</span>); <span class="comment">//起始下标改为1</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;cout &lt;&lt; on<span class="number">-1</span> &lt;&lt; endl;<span class="keyword">return</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">preg</span><span class="params">(n+<span class="number">2</span>,<span class="number">0</span>)</span>,<span class="title">sufg</span><span class="params">(n+<span class="number">2</span>,<span class="number">0</span>)</span></span>; </span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) preg[i]=__gcd(preg[i<span class="number">-1</span>],v[i]);</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(i,n,<span class="number">1</span>) sufg[i]=__gcd(sufg[i+<span class="number">1</span>],v[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sufg[<span class="number">2</span>]&gt;v[<span class="number">1</span>]&amp;&amp;sufg[<span class="number">2</span>]&lt;=v[<span class="number">2</span>]) &#123;cout &lt;&lt; on &lt;&lt; endl;<span class="keyword">return</span>;&#125; <span class="comment">//剩下的数模（v1+x）为0</span></span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123; <span class="comment">//被修改的数</span></span><br><span class="line">        ll g=__gcd(preg[i<span class="number">-1</span>],sufg[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">FORLL</span>(j,<span class="number">1</span>,i<span class="number">-1</span>)&#123;<span class="comment">//模数</span></span><br><span class="line">            ll t=v[i]%v[j];</span><br><span class="line">            <span class="keyword">if</span>(t==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(g%t==<span class="number">0</span>) &#123;cout &lt;&lt; on &lt;&lt; endl;<span class="keyword">return</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; on+<span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1006)HDU7486 猫罐头游戏</h1><h2 id="题意-2">题意</h2><p>有三堆猫罐头，每堆猫罐头的数量分别为 $a,b,c$ 。<br>两只猫猫进行博弈，每次可以选择一堆猫罐头全部吃掉，然后再从剩下的两堆中选择一堆猫罐头分成两份（每份至少一罐）。<br>不能操作的猫猫输掉游戏。</p><p>问先手是否有必胜策略。</p><h2 id="解题思路-2">解题思路</h2><p>最终必败态是 $a=b=c=1$ 。</p><p>当开局有3个奇数时，不论怎么操作，结果都是2奇数1偶数；<br>当开局有1个或2个偶数时，可以控制结果为3个奇数。<br>三个奇数的尽头就是3个1必败，因此开局3奇数必败，开局1或2偶数必胜。</p><p>开局全偶数的情况，可以从lowbit的角度考虑。<br>当开局三个数lowbit位于同一位时，不论怎么操作都不能使lowbit相等。<br>当开局三个数lowbit位于不同位时，可以通过操作控制lowbit相等，整个过程lowbit减小。<br>lowbit相等的尽头是三个数的lowbit都等于$1$也就是三奇数的必败态。</p><p>因此，开局三个数lowbit相等必败。<br>观察到三个数不全是偶数的情况也可以归并到这个结论中，2行秒了。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a,b,c; cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">lowbit</span>(a)==<span class="built_in">lowbit</span>(b)&amp;&amp;<span class="built_in">lowbit</span>(b)==<span class="built_in">lowbit</span>(c))  NO; <span class="keyword">else</span> YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1011)HDU7491 开关灯</h1><h2 id="题意-3">题意</h2><p>有 $n$ 盏灯排成一排，编号为 $1\sim n$ ，初始状态为全灭。<br>每次操作可以选择一盏灯，反转这盏灯和与之相邻的灯的状态（开变关，关变开）。<br>求任意操作后，这排灯可以到达多少种不同的状态。</p><h2 id="解题思路-3">解题思路</h2><p>观察样例发现答案满足 $2^n$ 。<br>手玩发现只有 $n\equiv2(mod\ 3)$ 时达不到全亮状态，是 $2^{n-1}$ 。</p><p>如果发现力不够，还可以考虑以下方法：<br>对位置1,2分别做一次操作，可以单独反转3；再对4,5分别做一次操作，可以单独反转6。<br>以此类推，正着做可以单独反转所有 $i\equiv0(mod\ 3)$，反着做可以单独反转所有 $i\equiv n-2(mod\ 3)$ 。<br>如果可以单独任意反转连续2个灯，则与它们相邻的灯也可以单独任意反转，以达到所有 $2^n$ 种状态。</p><p>当且仅当 $n\equiv2(mod\ 3)$ 时，正着做和反着做反转的都是同一批灯，无法通过以上操作任意反转所有的灯。<br>由于无法到达全亮状态，答案少一半，为 $2^{n-1}$ 。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">2</span>) cout &lt;&lt; <span class="built_in">qcpow</span>(<span class="number">2</span>,n<span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">qcpow</span>(<span class="number">2</span>,n) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1013)HDU7493 飞行棋</h1><h2 id="题意-4">题意</h2><p>$0\sim n$ 号格子排成一排，棋子初始在 $0$ 号格，目标是精确到达第 $n$ 格。<br>每次随机从 $1\sim n$ 中均匀随机一个正整数 $x$ ，然后向前移动 $x$ 步，若移动到第 $n$ 格还有剩余步数，则会往回走。<br>如果随机到 $n$ 且最终没有精确到达第 $n$ 格，则可以再从 $1\sim n-1$ 中均匀随机一个正整数并行动。</p><p>求精确到达第 $n$ 格的期望步数。</p><h2 id="解题思路-4">解题思路</h2><p>从 $0$ 号格子一次到达第 $n$ 格的概率是 $\dfrac{1}{n}$ 。<br>从 $1\sim n-1$ 号格子一次到达第 $n$ 格的概率都是 $\dfrac{1}{n}(1+\dfrac{1}{n-1})=\dfrac{1}{n-1}$ ，期望为 $n-1$<br>如果没有到达终点，棋子只会落在 $1\sim n-1$ 号格子上。</p><p>因此答案为 $\dfrac{1}{n}+\dfrac{n-1}{n}\times ((n-1)+1)=n+1+\dfrac{1}{n}$ 。<br>（式子中 $(n-1)+1$ 是加上了从0开始的第一步）</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sub</span>(<span class="built_in">add</span>(<span class="built_in">inv</span>(n),n),<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校05</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校06</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD06.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD06.html</id>
    <published>2024-07-31T16:00:00.000Z</published>
    <updated>2025-02-21T07:03:47.355Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81601">2024牛客暑期多校训练营6</a></p><h1>A.Cake</h1><h2 id="题意">题意</h2><p>给定一棵 $n$ 个节点，以 $1$ 为根的树，每条边有一个权值 0 或 1。<br>棋子初始在节点 $1$ ，Alice先手，Bob后手。<br>每回合，玩家可以将棋子移动到当前节点的一个子节点。<br>直到棋子达到叶子节点，游戏结束。</p><p>棋子经过的路径的权值按顺序构成一个01序列，记它的长度为 $m$ 。<br>接下来，Bob可以把 $1$ 块蛋糕任意分成 $m$ 份（某份蛋糕可以为0//空盘子）。<br>然后根据01序列决定取蛋糕的次序：0代表Bob取，1代表Alice取。</p><p>问两人都以最优策略行动和切蛋糕，问Alice最多能拿到多少蛋糕。</p><h2 id="解题思路">解题思路</h2><p>先考虑在路径确定的情况下，Bob会怎么分蛋糕：<br>Bob会找到一个前缀pre，这个前缀的“0占比”是所有前缀中最大的。<br>pre的长度记为 $t$，0占比记为 $p$。<br>Bob会将蛋糕平均分为 $t$ 份，剩下 $m-t$ 份为空。<br>这样，Bob可以保证他拿到最多的，大小为 $p$ 的蛋糕。</p><p>对于每个节点 $i$ ，先DFS一次，处理出从 $1$ 到 $i$ 这条路径上所有前缀的最大0占比。<br>那么在每个结点处。</p><p>再DFS一次，假设根节点 $1$ 的深度是1，那么：<br>深度为奇数的节点是Alice的回合，Alice会希望前缀的“0的占比”最小化；<br>深度为偶数的节点是Bob的回合，Bob会希望前缀的“0的占比”最大化。</p><p>从叶子到根更新，得到最终0占比 $p$ ，按照上面的方法分蛋糕，最终答案为 $1-p$ 。</p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">ll n;</span><br><span class="line">vector&lt;vector&lt;pll&gt;&gt; G;</span><br><span class="line">vector&lt;ld&gt; pref; <span class="comment">//前缀中0的最大占比</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll u=<span class="number">1</span>,ll fa=<span class="number">0</span>,ll cnt0=<span class="number">0</span>,ll cnt1=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u!=<span class="number">1</span>) <span class="built_in">chmax</span>(pref[u],(ld)cnt0/(cnt0+cnt1));<span class="comment">//用当前节点的0占比更新前缀</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [v,w]:G[u])</span><br><span class="line">        <span class="keyword">if</span>(v!=fa)&#123;</span><br><span class="line">            pref[v]=pref[u];<span class="comment">//继承父节点的pref</span></span><br><span class="line">            <span class="built_in">dfs</span>(v,u,cnt0+(w==<span class="number">0</span>),cnt1+(w==<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;ld&gt; dp; <span class="comment">//节点对执棋手的最优解</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_dp</span><span class="params">(ll u=<span class="number">1</span>,ll fa=<span class="number">0</span>, ll dep=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    dp[u]=dep%<span class="number">2</span>; </span><br><span class="line">    <span class="keyword">if</span>(u!=<span class="number">1</span>&amp;&amp;G[u].<span class="built_in">size</span>()==<span class="number">1</span>) dp[u]=pref[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [v,w]:G[u]) <span class="keyword">if</span>(v!=fa)&#123;</span><br><span class="line">        <span class="built_in">dfs_dp</span>(v,u,dep+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(dep%<span class="number">2</span>) <span class="built_in">chmin</span>(dp[u],dp[v]); <span class="comment">//先手求pref小</span></span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">chmax</span>(dp[u],dp[v]); <span class="comment">//后手求pref大</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    G.<span class="built_in">clear</span>(); G.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    pref.<span class="built_in">clear</span>(); pref.<span class="built_in">resize</span>(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dp.<span class="built_in">clear</span>(); dp.<span class="built_in">resize</span>(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ll u,v,w;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        G[u].<span class="built_in">emplace_back</span>(v,w);</span><br><span class="line">        G[v].<span class="built_in">emplace_back</span>(u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(); <span class="built_in">dfs_dp</span>();</span><br><span class="line">    <span class="built_in">print_float</span>(<span class="number">1.</span>-dp[<span class="number">1</span>],<span class="number">12</span>);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>B.Cake2</h1><h2 id="题意-2">题意</h2><p>给定正整数 $n,k$ ，蛋糕的形状是正 $n$ 边形，顶点编号为 $0$ 到 $n-1$ 。<br>对于每个顶点 $i$ ，沿着由 顶点 $i$ 和 $(i+k)mod\ n$ 确定的直线切一刀。<br>求最后蛋糕的块数。</p><p>以$n=6,k=2$为例，蛋糕的形状如下：<br><img src="https://source.cclmsy.cc/Images/Posts/ACM/2024Summer_NCD06_B.png" alt=""></p><h2 id="解题思路-2">解题思路</h2><p>手画几个图，发现当且仅当 $n=k\times2$ 时，蛋糕的块数为 $n$ 。<br>其余情况下，发现每个交点仅由2条直线，蛋糕的块数为 $n\times k+1$ 。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,k;cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;n/<span class="number">2</span>) k=n-k;</span><br><span class="line">    <span class="keyword">if</span>(k*<span class="number">2</span>!=n) cout &lt;&lt; k*n+<span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>H.Genshin Impact’s Fault</h1><h2 id="题意-3">题意</h2><p>给定一个字符串，包含以下字符：</p><ul><li><code>3</code>：三星卡</li><li><code>4</code>：四星卡</li><li><code>5</code>：普通五星卡</li><li><code>U</code>：特殊五星卡</li></ul><p>满足以下条件的字符串是合法的：</p><ol><li>每10个连续的字符不能都是<code>3</code></li><li>每90个连续的字符至少有1个<code>U</code>或<code>5</code></li><li>相邻两张五星卡不能都是<code>5</code></li></ol><p>判断给定字符串是否合法。</p><h2 id="解题思路-3">解题思路</h2><p>按照题意模拟判断。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;3&#x27;</span>) cnt++;</span><br><span class="line">        <span class="keyword">else</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=<span class="number">10</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c!=<span class="string">&#x27;5&#x27;</span>&amp;&amp;c!=<span class="string">&#x27;U&#x27;</span>) cnt++;</span><br><span class="line">        <span class="keyword">else</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt&gt;=<span class="number">90</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">char</span> pre=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;5&#x27;</span>||c==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre==<span class="string">&#x27;0&#x27;</span>) pre=c;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(pre==<span class="string">&#x27;5&#x27;</span>&amp;&amp;c==<span class="string">&#x27;5&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> pre=c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check1</span>()&amp;&amp;<span class="built_in">check2</span>()&amp;&amp;<span class="built_in">check3</span>()) cout &lt;&lt; <span class="string">&quot;valid\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;invalid\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校06</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校05</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD05.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD05.html</id>
    <published>2024-07-29T16:00:00.000Z</published>
    <updated>2025-02-21T07:03:47.353Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81600">2024牛客暑期多校训练营5</a></p><blockquote><p>玲珑骰子安红豆，入骨相思知不知。  ——温庭筠</p></blockquote><h1>B.珑</h1><h2 id="题意">题意</h2><p>使用若干个 $1\times 2$ 的小矩形，恰好覆盖一个 $n\times m$ 的大矩形（即不允许重叠、不允许有部分超出大矩形范围）</p><p>对于任意两个小矩形，可能存在以下两种限制（中的0种、1种或2种）：</p><ol><li>边长为1的边不能相贴</li><li>边长为2的边不能相贴，即使相贴部分的长度仅为1</li></ol><p>问是否存在一种方案，在满足给定限制的条件下，恰好覆盖大矩形。</p><h2 id="解题思路">解题思路</h2><p>不妨令 $n&lt;m$ ：</p><ol><li>小矩形的面积是2，所以 $n\times m$ 必须是偶数</li><li>只有 $n=1$ 的情况满足条件2</li><li>只有 $n=1且m&gt;2$ 的情况不满足条件1</li></ol><p><img src="https://source.cclmsy.cc/Images/Posts/ACM/2024Summer_NCD05_B.png" alt="image"></p><h2 id="参考代码">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m,a,b;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>&amp;&amp;m%<span class="number">2</span>) &#123;NO;<span class="keyword">return</span> ;&#125; <span class="comment">// 面积是奇数</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>&amp;&amp;m==<span class="number">2</span>) &#123;YES;<span class="keyword">return</span> ;&#125; <span class="comment">// 1*2只需要一块</span></span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>&amp;&amp;n!=<span class="number">1</span>) &#123;NO;<span class="keyword">return</span> ;&#125; <span class="comment">// 只有1*m时能满足b</span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>&amp;&amp;n==<span class="number">1</span>) &#123;NO;<span class="keyword">return</span> ;&#125; <span class="comment">// 只有1*m时不能满足a</span></span><br><span class="line">    YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>E.安</h1><h2 id="题意-2">题意</h2><p>May和Ray各有 $n$ 个骑士，分别按顺序排成一排，编号为 $1\sim n$ 。<br>May的骑士的生命值为 $a_i$ ，Ray的骑士的生命值为 $b_i$ 。</p><p>玩家每次操作可以选择一个双方骑士都存活的序号 $i$ ，命自己的骑士 $i$ 攻击对方的骑士 $i$ （使对方的骑士 $i$ 的生命值减少 $1$ ）。</p><p>May先行，两人都执行最优策略，直到无法操作。</p><p>问May最终剩余多少个骑士。</p><h2 id="解题思路-2">解题思路</h2><p>考虑最优策略：</p><ol><li>$a_i&gt;b_i$ ：优势，在这个位置只需要在对方攻击后反击，就能保证消灭对方。</li><li>$a_i&lt;b_i$ ：根据上一条，这个位置的骑士无法存活。</li><li>$a_i=b_i$ ：先攻击的棋子存活，一半的棋子存活，先手可以向上取整。</li></ol><p>按照最优策略，答案为 $cnt(a_i&gt;b_i)+\lceil cnt(a_i=b_i)/2 \rceil$ 。</p><h2 id="参考代码-2">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">create_vec</span>(a,n);</span><br><span class="line">    <span class="built_in">create_vec</span>(b,n);</span><br><span class="line">    ll ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]==b[i]) cnt++;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[i]) ans++;</span><br><span class="line">    &#125;cout &lt;&lt; ans+(cnt+<span class="number">1</span>)/<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>H.入</h1><h2 id="题意-3">题意</h2><p>给定一个 $n$ 个点 $m$ 条边的无向图，每个点带唯一点权 $w_i$ 。</p><p>棋子初始被放在一个点上，每次会移动到相邻的点中点权最小的一个点。</p><p>现在点权和初始位置可以自己决定，问最多能经过多少个点。</p><h2 id="解题思路-3">解题思路</h2><p>若从点 $i$ 走到点 $j$ ，其他和 $i$ 相邻的点的权值一定大于点 $j$ 的权值，因此之后都不会再走到这些点。</p><p>换句话说，走到下一个点之后，就可以把上一步的点和它的相邻点删掉了。</p><p>建图，按照以上思路，从每个点出发各一次，DFS找到最长路径长度。</p><h2 id="参考代码-3">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ll n,m;</span><br><span class="line">vector&lt;vector&lt;ll&gt;&gt; G;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vis;</span><br><span class="line">ll ans=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(ll u,ll cur=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">chmax</span>(ans,cur);</span><br><span class="line">    vector&lt;ll&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:G[u]) <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">        tmp.<span class="built_in">emplace_back</span>(v);</span><br><span class="line">        vis[v]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt+=tmp.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(n-cnt+cur&gt;=ans)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:tmp) <span class="built_in">dfs</span>(v,cur+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:tmp) vis[v]=<span class="number">0</span>;</span><br><span class="line">    cnt-=tmp.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll u,v;</span><br><span class="line">    G.<span class="built_in">clear</span>(); G.<span class="built_in">resize</span>(n+<span class="number">1</span>);</span><br><span class="line">    vis.<span class="built_in">clear</span>(); vis.<span class="built_in">resize</span>(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        G[u].<span class="built_in">emplace_back</span>(v);</span><br><span class="line">        G[v].<span class="built_in">emplace_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        vis[i]=<span class="number">1</span>; cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(i);</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>L.知</h1><h2 id="题意-4">题意</h2><p>给定一个长度为 $n$ 的序列 $a$ ，每次操作可以选择一个下标 $i&lt;n$ ，执行：$a_i=a_i+1,a_{i+1}=a_{i+1}-1$ 。</p><p>求任意次操作后，序列 $a$ 的积的最大值 $mod\ 998244353$ 。</p><h2 id="解题思路-4">解题思路</h2><p>小学老师教过我们，当和一定时，数越平均，积越大。</p><p>观察到操作的特性：后面的大数字可以匀到前面，但是前面的数字不能匀给后面。</p><p>从前往后处理，把第 $i$ 个数 $a_i$ 加入答案时，<br>从当前的 前 $i-1$ 个数中，从小到大依次选取尽可能多的数（记为 $b_1\sim b_k$ ），<br>满足：$max{b_1\cdots b_k}&lt; avg{b_1 \cdots b_k,a_i}$</p><p>然后可以将 ${b_1 \cdots b_k,a_i}$ 平均化，是最优的平均方法。</p><h2 id="参考代码-4">参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// ll n=5;</span></span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">v</span><span class="params">(n)</span>,vans</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:v) cin &gt;&gt; x;</span><br><span class="line">    vans.<span class="built_in">emplace_back</span>(v[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i]&gt;vans[<span class="number">0</span>])&#123;</span><br><span class="line">            ll tsum=v[i],j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;i)&#123; <span class="comment">//取出需要被匀的数</span></span><br><span class="line">                <span class="keyword">if</span>(vans[j]&gt;=tsum/(j+<span class="number">1</span>)) <span class="keyword">break</span>;  </span><br><span class="line">                <span class="comment">//如果当前的数已经大于等于平均值，就不需要被平均了</span></span><br><span class="line">                tsum+=vans[j]; j++;</span><br><span class="line">            &#125;</span><br><span class="line">            vector&lt;ll&gt; temp;</span><br><span class="line">            <span class="built_in">FORLL</span>(k,j,i<span class="number">-1</span>) temp.<span class="built_in">emplace_back</span>(vans[k]);</span><br><span class="line">            ll avg=tsum/(j+<span class="number">1</span>),tt=tsum%(j+<span class="number">1</span>);</span><br><span class="line">            temp.<span class="built_in">insert</span>(temp.<span class="built_in">end</span>(),tt,avg+<span class="number">1</span>);</span><br><span class="line">            temp.<span class="built_in">insert</span>(temp.<span class="built_in">end</span>(),j+<span class="number">1</span>-tt,avg);</span><br><span class="line">            vans=temp;</span><br><span class="line">        &#125;<span class="keyword">else</span> vans.<span class="built_in">emplace_back</span>(v[i]);</span><br><span class="line">        <span class="built_in">SORT</span>(vans);</span><br><span class="line">    &#125; <span class="comment">// print_vec(ans);</span></span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:vans) <span class="built_in">multo</span>(ans,x);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校05</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校04</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU04.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU04.html</id>
    <published>2024-07-28T16:00:00.000Z</published>
    <updated>2024-07-30T07:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A84%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（4）</a></p><h1>1003</h1><p>//TODO</p><h1>(1005)HDU7473.多层血条</h1><h2 id="题意">题意</h2><p>Boss血条的尺寸为 $n$ 行 $m$ 列，外层有边框。<br>行数仅代表血条的高度，不代表血量。<br>每列代表 $1$ 点血量， $m$ 列代表了 $m$ 点血量，即一层血条。</p><p>血条自底向上、从左往右平铺，最底下没有血量的部分为空格。<br>第一层血量用 <code>A</code> 表示，第二层血量用 <code>B</code> 表示，…，第五层血量用 <code>E</code> 表示，第六层血量用 <code>A</code> 表示，五层一循环，以此类推。</p><p>$n=2,m=10$ 且血量为$12$时，血条如下：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+----------+</span></span><br><span class="line">|BBAAAAAAAA|</span><br><span class="line"><span class="section">|BBAAAAAAAA|</span></span><br><span class="line"><span class="section">+----------+</span></span><br></pre></td></tr></table></figure><p>为了加强打击反馈，当Boss受到伤害时，即将扣减的血量将短暂显示为<code>.</code>，然后再显示为对应的血条。</p><p>如上面的血条，当受到 $3$ 点伤害时，血条将变为：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">+----------+</span></span><br><span class="line">|..AAAAAAA.|</span><br><span class="line"><span class="section">|..AAAAAAA.|</span></span><br><span class="line"><span class="section">+----------+</span></span><br></pre></td></tr></table></figure><p>给定 $n,m$ ，血量 $hp$，即将受到的伤害 $dmg$ ，求受到伤害时的血条。</p><h2 id="解题思路">解题思路</h2><p>计算血条层数决定填充当前层（和下一层）的字符。<br>计算当前最后一个血的位置，然后根据伤害对血条进行修改。</p><h2 id="参考程序">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m,hp,dmg;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; hp &gt;&gt; dmg;</span><br><span class="line">    string ul=<span class="string">&#x27;+&#x27;</span>+<span class="built_in">string</span>(m,<span class="string">&#x27;-&#x27;</span>)+<span class="string">&#x27;+&#x27;</span>; <span class="comment">//边框</span></span><br><span class="line">    cout &lt;&lt; ul &lt;&lt; endl;</span><br><span class="line">    string s=<span class="string">&quot;|&quot;</span>;</span><br><span class="line">    ll k=(hp+m<span class="number">-1</span>)/m; <span class="comment">//层数</span></span><br><span class="line">    <span class="type">char</span> c=(k+<span class="number">4</span>)%<span class="number">5</span>+<span class="string">&#x27;A&#x27;</span>; <span class="comment">//当前层字符</span></span><br><span class="line">    ll cur = (hp<span class="number">-1</span>)%m+<span class="number">1</span>; <span class="comment">//当前层血量位置</span></span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,cur) s+=c;</span><br><span class="line">    <span class="type">char</span> c1=(k<span class="number">-1</span>)&gt;<span class="number">0</span>?(k<span class="number">-2</span>)%<span class="number">5</span>+<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27; &#x27;</span>; <span class="comment">//下一层字符</span></span><br><span class="line">    <span class="built_in">FORLL</span>(i,cur+<span class="number">1</span>,m) s+=c1;</span><br><span class="line">    s+=<span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">    <span class="built_in">chmin</span>(dmg,m);</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(i,cur,<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dmg==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        s[i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        dmg--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(i,m,cur+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dmg==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        s[i]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        dmg--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ul &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1007</h1><p>//TODO</p><h1>(1009)HDU7477.昵称检索</h1><h2 id="题意-2">题意</h2><p>给定 $n$ 个字符串表示名字。<br>一个昵称由两部分组成：一个给定的名字+4位数字。<br>其中，4位数字表示一个日期。</p><p>注：日期格式为 <code>MMDD</code> ，即月份和日期，0229也算。</p><p>给定一个长度为 $m$ 的字符串，计算所有子序列中能构成不同的昵称的个数。</p><h2 id="解题思路-2">解题思路</h2><p>昵称和日期分开考虑。</p><p>要求计不同的昵称的个数，因此每种名字、日期只需要考虑一次。</p><p>名字只需要选取最早完整出现的子序列，因为早出现一定比晚出现匹配的日期个数多。<br>日期只需要选取最晚完整出现的子序列，因为晚出现一定比早出现匹配的名字个数多。</p><p>记录每种字符出现的位置，先匹配日期。<br>用 $date_i$ 表示下标为 $i$ 的位置开头的不同日期数。<br>对 $date$ 做一个后缀和， $date_i$ 就表示到当前位置开始，往后的不同日期数。</p><p>再匹配名字。<br>找到名字 $name$ 的最早出现位置 $j$ ，它能组合出的最多不同昵称数为 $date_{j+1}$，加入答案。</p><h2 id="参考程序-2">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; days = &#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">toint</span><span class="params">(<span class="type">char</span> c1,<span class="type">char</span> c2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c1-<span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span>+c2-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m;cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;string&gt; names;</span><br><span class="line">    string s,t;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        names.<span class="built_in">emplace_back</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">    map&lt;<span class="type">char</span>,vector&lt;ll&gt;&gt; posc,posint;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">0</span>,m<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;s[i]&lt;=<span class="string">&#x27;z&#x27;</span>) posc[s[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        <span class="keyword">else</span> posint[s[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">date</span><span class="params">(m+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> d2=<span class="string">&#x27;0&#x27;</span>;d2&lt;=<span class="string">&#x27;9&#x27;</span>;d2++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(posint[d2].<span class="built_in">empty</span>()) <span class="keyword">continue</span>; <span class="comment">//没有这个数字</span></span><br><span class="line">        <span class="keyword">auto</span> posd2 = posint[d2].<span class="built_in">back</span>(); <span class="comment">//最后一个位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> d1=<span class="string">&#x27;0&#x27;</span>;d1&lt;=<span class="string">&#x27;3&#x27;</span>;d1++)&#123;</span><br><span class="line">            <span class="keyword">auto</span> day=<span class="built_in">toint</span>(d1,d2);</span><br><span class="line">            <span class="keyword">if</span>(day&gt;<span class="number">31</span>||day&lt;<span class="number">1</span>) <span class="keyword">continue</span>; <span class="comment">//不可能的天数</span></span><br><span class="line">            <span class="keyword">if</span>(posint[d1].<span class="built_in">empty</span>()) <span class="keyword">continue</span>; <span class="comment">//没有这个数字</span></span><br><span class="line">            <span class="keyword">auto</span> itposd1 = <span class="built_in">lower_bound</span>(<span class="built_in">ALL</span>(posint[d1]),posd2); <span class="comment">//找比posd2小的最大的位置</span></span><br><span class="line">            <span class="keyword">if</span>(itposd1==posint[d1].<span class="built_in">begin</span>()) <span class="keyword">continue</span>; <span class="comment">//没有比posd2小的</span></span><br><span class="line">            <span class="keyword">auto</span> posd1 = *(--itposd1);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> m2=<span class="string">&#x27;0&#x27;</span>;m2&lt;=<span class="string">&#x27;9&#x27;</span>;m2++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(posint[m2].<span class="built_in">empty</span>()) <span class="keyword">continue</span>; <span class="comment">//没有这个数字</span></span><br><span class="line">                <span class="keyword">auto</span> itposm2 = <span class="built_in">lower_bound</span>(<span class="built_in">ALL</span>(posint[m2]),posd1); <span class="comment">//找比posd1小的最大的位置</span></span><br><span class="line">                <span class="keyword">if</span>(itposm2==posint[m2].<span class="built_in">begin</span>()) <span class="keyword">continue</span>; <span class="comment">//没有比posd1小的</span></span><br><span class="line">                <span class="keyword">auto</span> posm2 = *(--itposm2);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> m1=<span class="string">&#x27;0&#x27;</span>;m1&lt;=<span class="string">&#x27;1&#x27;</span>;m1++)&#123;</span><br><span class="line">                    <span class="keyword">auto</span> month=<span class="built_in">toint</span>(m1,m2);</span><br><span class="line">                    <span class="keyword">if</span>(month&gt;<span class="number">12</span>||month&lt;<span class="number">1</span>) <span class="keyword">continue</span>;; <span class="comment">//不可能的月份</span></span><br><span class="line">                    <span class="keyword">if</span>(day&gt;days[month]) <span class="keyword">continue</span>;; <span class="comment">//不可能的日期</span></span><br><span class="line">                    <span class="keyword">if</span>(posint[m1].<span class="built_in">empty</span>()) <span class="keyword">continue</span>; <span class="comment">//没有这个数字</span></span><br><span class="line">                    <span class="keyword">auto</span> itposm1 = <span class="built_in">lower_bound</span>(<span class="built_in">ALL</span>(posint[m1]),posm2); <span class="comment">//找比posm2小的最大的位置</span></span><br><span class="line">                    <span class="keyword">if</span>(itposm1==posint[m1].<span class="built_in">begin</span>()) <span class="keyword">continue</span>; <span class="comment">//没有比posm2小的</span></span><br><span class="line">                    <span class="keyword">auto</span> posm1 = *(--itposm1);</span><br><span class="line">                    date[posm1]++;</span><br><span class="line">                    <span class="comment">// cout &lt;&lt; month &lt;&lt; &#x27; &#x27; &lt;&lt; day &lt;&lt; endl;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL_rev</span>(i,m<span class="number">-1</span>,<span class="number">0</span>) date[i]+=date[i+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// print_vec(date);</span></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;name:names)&#123;</span><br><span class="line">        ll curi=<span class="number">-1</span>,len=name.<span class="built_in">length</span>();</span><br><span class="line">        <span class="built_in">FORLL</span>(i,<span class="number">0</span>,len<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">auto</span> c=name[i];</span><br><span class="line">            <span class="keyword">auto</span> it=<span class="built_in">upper_bound</span>(<span class="built_in">ALL</span>(posc[c]),curi);</span><br><span class="line">            <span class="keyword">if</span>(it==posc[c].<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line">            curi=*it;</span><br><span class="line">            <span class="keyword">if</span>(i==len<span class="number">-1</span>) ans+=date[curi+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校04</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期杭电多校03</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_HDU03.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_HDU03.html</id>
    <published>2024-07-25T16:00:00.000Z</published>
    <updated>2024-08-03T12:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛题单：<a href="https://acm.hdu.edu.cn/search.php?field=problem&amp;key=2024%A1%B0%B6%A4%B0%D2%B1%E0%B3%CC%A1%B1%D6%D0%B9%FA%B4%F3%D1%A7%C9%FA%CB%E3%B7%A8%C9%E8%BC%C6%B3%AC%BC%B6%C1%AA%C8%FC%A3%A83%A3%A9&amp;source=1&amp;searchmode=source">2024“钉耙编程”中国大学生算法设计超级联赛（3）</a></p><h1>(1001)HDU7457.深度自同构</h1><h2 id="题意">题意</h2><p>求由 $n$ 个节点构成，且满足“深度相同的节点，度相同”的森林的方案数。</p><h2 id="解题思路">解题思路</h2><p>先考虑 $i$ 个节点的合法的树，这棵树每个节点的子树形态相同。<br>去掉根节点，每个部分的子树形态相同，那么每个子树的节点数是 $i-1$ 的约数。<br>设 $f(i)$ 表示 $i$ 个节点满足上述条件的树的方案数，那么有：$f(i)=\sum_{d|(i-1)} f(d)$</p><p>再考虑 $n$ 个节点的合法的森林，每个树的节点数是 $n$ 的约数。<br>设 $g(n)$ 表示 $n$ 个节点满足上述条件的森林的方案数，那么有：$g(n)=\sum_{d|n} f(d)$</p><h2 id="参考程序">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> ll N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ll f[N],g[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ll n=<span class="number">1e6</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">for</span>(ll j=i;j&lt;=n;j+=i)</span><br><span class="line">            <span class="built_in">addto</span>(f[j+<span class="number">1</span>],f[i]);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">for</span>(ll j=i;j&lt;=n;j+=i)</span><br><span class="line">            <span class="built_in">addto</span>(g[j],f[i]);</span><br><span class="line">    <span class="comment">//寄巧：对于从约数i到倍数j的转移，可以枚举倍数k，以调和级数复杂度求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) cout &lt;&lt; g[i] &lt;&lt; <span class="built_in">Presentation</span>(i,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1007)HDU7463.单峰数列</h1><h2 id="题意-2">题意</h2><p>给定一个长度为 $n$ 的数列 $a$ ，$q$ 次操作：</p><ol><li><code>1 l r x</code>：$a[l,r]$ 每个数加 $x$</li><li><code>2 l r</code>：判断 $a[l,r]$ 是否相同</li><li><code>3 l r</code>：判断 $a[l,r]$ 是否严格单调递增，$l=r$ 时也算</li><li><code>4 l r</code>：判断 $a[l,r]$ 是否严格单调递减，$l=r$ 时也算</li><li><code>5 l r</code>：判断 $a[l,r]$ 是否单峰数列</li></ol><p>长度为 $m$ 的数列 $b$ 被称为单峰数列，当且仅当存在唯一位置 $1\lt i\lt m$ ，使得 $b[1,i]$ 严格单调递增，$b[i,m]$ 严格单调递减。</p><h2 id="解题思路-2">解题思路</h2><p>暴力判断<br>维护差分序列更直观</p><h2 id="参考程序-2">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;ll&gt; v;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">range_add</span><span class="params">(ll l,ll r,ll val)</span></span>&#123;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,l<span class="number">-1</span>,r<span class="number">-1</span>) v[i]+=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check_same</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,l,r<span class="number">-1</span>) <span class="keyword">if</span>(v[i]!=v[l<span class="number">-1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check_up</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,l,r<span class="number">-1</span>) <span class="keyword">if</span>(v[i<span class="number">-1</span>]&gt;=v[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check_down</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,l,r<span class="number">-1</span>) <span class="keyword">if</span>(v[i<span class="number">-1</span>]&lt;=v[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check_mountain</span><span class="params">(ll l,ll r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fl=<span class="number">0</span>; <span class="comment">//up</span></span><br><span class="line">    <span class="keyword">if</span>(v[l<span class="number">-1</span>]&gt;v[l]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,l,r<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[i<span class="number">-1</span>]==v[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(fl==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i<span class="number">-1</span>]&gt;v[i]) fl=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fl==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(v[i<span class="number">-1</span>]&lt;v[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(fl==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    v.<span class="built_in">resize</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:v) cin &gt;&gt; x;</span><br><span class="line">    ll q;cin &gt;&gt; q;</span><br><span class="line">    ll op,l,r,val;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;</span><br><span class="line">            <span class="built_in">range_add</span>(l,r,val);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">check_same</span>(l,r) &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">check_up</span>(l,r) &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">check_down</span>(l,r) &lt;&lt; endl;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">5</span>)&#123;</span><br><span class="line">            cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">check_mountain</span>(l,r) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1008)HDU7464.比特跳跃</h1><h2 id="题意-3">题意</h2><p>给定一个 $n$ 个点 $m$ 条边（不保证连通，可能有重边）的无向图。<br>每条边 $E(u,v)$ 有一个权值 $w$ ，表示从 $u$ 到 $v$ 的代价。<br>此外，对于任意两点 $u,v$ ，可以付出 $k\times(u|v)$ （按位或）的代价从 $u$ 跳到 $v$ 。<br>分别求从节点 $1$ 到所有其他点 $2$ ~ $n$ 的最小代价。</p><h2 id="解题思路-3">解题思路</h2><p>最暴力的想法肯定是把直接跳跃也看作边加入图中，然后跑单源最短路。<br>但是这样边的数量是 $n^2$ ，显然不可取。<br>因此考虑哪些边是有必要加的。</p><p>$1$ 直接跳到其他节点的方案是很优的：<br>若节点 $i$ 不在节点 $1$ 所在的连通块内，那么 $1$ 直接跳到 $i$ 的代价只可能是 $i$ （$i$ 为奇数）或 $i+1$ （$i$ 为偶数）。</p><p>但如果存在 $E(1,2,0)$ ，对于 $x=2,6,10…$ 这一类满足 $x%4=2$ 的节点， $1$ 直接跳到 $x$ 的代价为 $x+1$ ，但先走到 $2$ 再跳到 $x$ 的代价仅为 $x$ 。</p><p>因此，对于 $x%4=2$ 的节点，需要加入 $E(2,x,k(x|2))$ 。</p><p>同理，对于 $x%2^{i+1}=2^i$ 的节点，需要加入 $E(2,x,k(x|2^i))$ 。</p><p>最后，跑一遍单调队列优化的单源最短路，求出答案。</p><h2 id="参考程序-3">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;ll&gt; <span class="title">pow2</span><span class="params">(<span class="number">1</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=<span class="number">60</span>;i++) pow2.<span class="built_in">emplace_back</span>(pow2.<span class="built_in">back</span>()*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,m,k;cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="function">Dijkstra <span class="title">dij</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        ll u,v,w;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        dij.<span class="built_in">addedge</span>(u,v,w);</span><br><span class="line">        dij.<span class="built_in">addedge</span>(v,u,w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">2</span>,n) dij.<span class="built_in">addedge</span>(<span class="number">1</span>,i,k*(<span class="number">1</span>|i));</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,<span class="number">60</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pow2[i]&gt;n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll j=pow2[i]*<span class="number">2</span>;j&lt;=n;j+=pow2[i]) <span class="keyword">if</span>(pow2[i]&amp;j)</span><br><span class="line">            dij.<span class="built_in">addedge</span>(pow2[i],j,k*(pow2[i]|j));</span><br><span class="line">    &#125;</span><br><span class="line">    dij.<span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">2</span>,n) cout &lt;&lt; dij[i] &lt;&lt; <span class="built_in">Presentation</span>(i,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1011)HDU7467.抓拍</h1><h2 id="题意-4">题意</h2><p>$n$ 个人，第 $i$ 个人初始在 $(x_i,y_i)$ 。<br>每个人有一个行进方向：东（E,+x方向）、西（W,-x方向）、南（S,-y方向）、北（N,+y方向），每秒移动一个距离。<br>散步无限长时间、不改变方向、忽略碰撞。</p><p>求一个周长最小的矩形满足：</p><ol><li>上下边平行于 $x$ 轴，左右边平行于 $y$ 轴</li><li>存在一个时刻，所有人都在矩形内部</li></ol><h2 id="解题思路-4">解题思路</h2><p>每个时刻的最小周长矩形只由 最上面、最下面、最左边、最右边 的四个人决定，那么就考虑可能成为这四个人的人。</p><p>左右移动的人占据的y区间，上下移动的人占据的x区间，不会改变。<br>记录：左右走的人里最靠上、最靠下的人，上下走的人里最靠左、最靠右的人。</p><p>因为时间无限长，最后在最上面的人，一定是向上走的人中初始点最靠上的，其他方向同理。<br>记录：向上走的人里最靠上的、向下走的人里最靠下的，向左走的人里最靠左的、向右走的人里最靠右的。</p><p>开始最靠下的人如果是向左/右/下走的，已经记录了，只要在向上走的人中找到最靠下的，其他方向同理。<br>记录：向上走的人里最靠下的、向下走的人里最靠上的、向左走的人里最靠右的、向右走的人里最靠左的。</p><p>有了这12个值，就可以计算出任何一个时刻的 $x_{min},x_{max},y_{min},y_{max}$ ，从而计算出最小周长。</p><p>模拟可知，周长对时间的函数，要么是单调增的，要么是一个开口向上的二次函数（因为最后人一定越走越散）。因此可以三分找到极小值点，即为答案。</p><h2 id="参考程序-4">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//           E W S N</span></span><br><span class="line"><span class="comment">//           R L D U</span></span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(pll a,pll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.second==b.second) <span class="keyword">return</span> a.first&lt;b.first;</span><br><span class="line">    <span class="keyword">return</span> a.second&lt;b.second;</span><br><span class="line">&#125;</span><br><span class="line">ll yLRmax,yLRmin,xUDmax,xUDmin;</span><br><span class="line">ll xLmin,xLmax,xRmin,xRmax,yUmin,yUmax,yDmin,yDmax;</span><br><span class="line"><span class="function">ll <span class="title">getC</span><span class="params">(ll t)</span></span>&#123;</span><br><span class="line">    ll xmin = <span class="built_in">min</span>(&#123;xLmin-t,xRmin+t,xUDmin&#125;);</span><br><span class="line">    ll xmax = <span class="built_in">max</span>(&#123;xLmax-t,xRmax+t,xUDmax&#125;);</span><br><span class="line">    ll ymin = <span class="built_in">min</span>(&#123;yDmin-t,yUmin+t,yLRmin&#125;);</span><br><span class="line">    ll ymax = <span class="built_in">max</span>(&#123;yDmax-t,yUmax+t,yLRmax&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*((xmax-xmin)+(ymax-ymin));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    vector&lt;pll&gt; L,R,U,D;</span><br><span class="line">    ll x,y;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;E&#x27;</span>) R.<span class="built_in">emplace_back</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;W&#x27;</span>) L.<span class="built_in">emplace_back</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;N&#x27;</span>) U.<span class="built_in">emplace_back</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;S&#x27;</span>) D.<span class="built_in">emplace_back</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//左右移动的最上和最下两个人，上下移动的最左和最右两个人</span></span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">ALL</span>(L),cmp); <span class="built_in">sort</span>(<span class="built_in">ALL</span>(R),cmp); <span class="built_in">sort</span>(<span class="built_in">ALL</span>(U)); <span class="built_in">sort</span>(<span class="built_in">ALL</span>(D));</span><br><span class="line">    yLRmax = xUDmax = -INF;</span><br><span class="line">    yLRmin = xUDmin = INF;</span><br><span class="line">    <span class="keyword">if</span>(L.<span class="built_in">size</span>()) &#123;<span class="built_in">chmax</span>(yLRmax,L.<span class="built_in">back</span>().second);<span class="built_in">chmin</span>(yLRmin,L.<span class="built_in">front</span>().second);&#125;</span><br><span class="line">    <span class="keyword">if</span>(R.<span class="built_in">size</span>()) &#123;<span class="built_in">chmax</span>(yLRmax,R.<span class="built_in">back</span>().second);<span class="built_in">chmin</span>(yLRmin,R.<span class="built_in">front</span>().second);&#125;</span><br><span class="line">    <span class="keyword">if</span>(U.<span class="built_in">size</span>()) &#123;<span class="built_in">chmax</span>(xUDmax,U.<span class="built_in">back</span>().first);<span class="built_in">chmin</span>(xUDmin,U.<span class="built_in">front</span>().first);&#125;</span><br><span class="line">    <span class="keyword">if</span>(D.<span class="built_in">size</span>()) &#123;<span class="built_in">chmax</span>(xUDmax,D.<span class="built_in">back</span>().first);<span class="built_in">chmin</span>(xUDmin,D.<span class="built_in">front</span>().first);&#125;</span><br><span class="line">    <span class="comment">//初始状态，向左的最左最右，向右的最左最右，向上的最上最下，向下的最上最下</span></span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">ALL</span>(L)); <span class="built_in">sort</span>(<span class="built_in">ALL</span>(R)); <span class="built_in">sort</span>(<span class="built_in">ALL</span>(U),cmp); <span class="built_in">sort</span>(<span class="built_in">ALL</span>(D),cmp);</span><br><span class="line">    xLmin = xRmin = yUmin = yDmin = INF;</span><br><span class="line">    xLmax = xRmax = yUmax = yDmax = -INF;</span><br><span class="line">    <span class="keyword">if</span>(L.<span class="built_in">size</span>()) &#123;<span class="built_in">chmin</span>(xLmin,L.<span class="built_in">front</span>().first);<span class="built_in">chmax</span>(xLmax,L.<span class="built_in">back</span>().first);&#125;</span><br><span class="line">    <span class="keyword">if</span>(R.<span class="built_in">size</span>()) &#123;<span class="built_in">chmin</span>(xRmin,R.<span class="built_in">front</span>().first);<span class="built_in">chmax</span>(xRmax,R.<span class="built_in">back</span>().first);&#125;</span><br><span class="line">    <span class="keyword">if</span>(U.<span class="built_in">size</span>()) &#123;<span class="built_in">chmin</span>(yUmin,U.<span class="built_in">front</span>().second);<span class="built_in">chmax</span>(yUmax,U.<span class="built_in">back</span>().second);&#125;</span><br><span class="line">    <span class="keyword">if</span>(D.<span class="built_in">size</span>()) &#123;<span class="built_in">chmin</span>(yDmin,D.<span class="built_in">front</span>().second);<span class="built_in">chmax</span>(yDmax,D.<span class="built_in">back</span>().second);&#125;</span><br><span class="line">    ll l=<span class="number">0</span>,r=<span class="number">2e9</span>;</span><br><span class="line">    <span class="comment">//三分找到getC最小的t</span></span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">10</span>)&#123;</span><br><span class="line">        ll m1 = l+(r-l)/<span class="number">3</span>;</span><br><span class="line">        ll m2 = r-(r-l)/<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">getC</span>(m1)&lt;<span class="built_in">getC</span>(m2)) r=m2;</span><br><span class="line">        <span class="keyword">else</span> l=m1;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mnans=INF;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,l,r) <span class="built_in">chmin</span>(mnans,<span class="built_in">getC</span>(i));</span><br><span class="line">    cout &lt;&lt; mnans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>(1012)HDU7468.死亡之组</h1><h2 id="题意-5">题意</h2><p>给定一个长度为 $n$ 的数组 $a$ （$n$ 是4的倍数），$a_i$ 表示第 $i$ 个队伍的实力。<br>每4个队伍一组，“死亡之组”至少符合以下条件之一：</p><ol><li>至少有2个队伍的实力 $&gt; L$</li><li>最大实力和最小实力之差 $\le D$</li></ol><p>问是否存在一种分组方案使得第 $1$ 组所在的小组不是“死亡之组”。</p><h2 id="解题思路-5">解题思路</h2><p>为了不满足条件1，存在至少3个队伍的实力 $\le L$ 即可。<br>然后把这3个队伍 $t_1,t_2,t_3$ 拿出来。<br>为了不满足条件2，所有队伍的实力中，最大值和最小值之差 $&gt; D$ 即可。<br>然后把实力最大的队伍 $t_4$ 拿出来。</p><p>对队伍1（$a_1$）进行讨论：</p><ul><li>如果 $a_1&gt;L$，替换 $t4$ ，重新判定</li><li>如果 $a_1\le L$，替换 $t3$</li></ul><h2 id="参考程序-5">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n,l,d;cin &gt;&gt; n &gt;&gt; l &gt;&gt; d;</span><br><span class="line">    <span class="built_in">create_vec</span>(v,n);</span><br><span class="line">    ll t1 = v[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">SORT</span>(v);</span><br><span class="line">    ll cntll=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x:v) <span class="keyword">if</span>(x&lt;l) cntll++;</span><br><span class="line">    <span class="keyword">if</span>(cntll&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t1&gt;=l)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1-v.<span class="built_in">front</span>()&lt;=d) cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v.<span class="built_in">back</span>()-v.<span class="built_in">front</span>()&lt;=d) cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题解|2024暑期杭电多校03</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期杭电多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>题解|2024暑期牛客多校04</title>
    <link href="https://www.cclmsy.cc/posts/ACM_2024Summer_NCD04.html"/>
    <id>https://www.cclmsy.cc/posts/ACM_2024Summer_NCD04.html</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-07-30T07:52:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/81599">2024牛客暑期多校训练营4</a></p><h1>A.LCT</h1><h2 id="题意">题意</h2><p>给定一棵有根树，问按顺序给定的前 $i$ 条边组成的森林中，以 $c_i$ 为根的树的深度。</p><h2 id="解题思路">解题思路</h2><p>按步骤生成森林的过程，与并查集合并的过程一致。<br>因此用带权并查集，维护每个点的深度和答案，利用路径压缩降低时间复杂度。</p><h2 id="参考程序">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span>&#123;</span><br><span class="line">    vector&lt;ll&gt; parents, size, dep, ans;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DSU</span><span class="params">(ll n)</span> : parents(n + <span class="number">1</span>), size(n + <span class="number">1</span>, <span class="number">1</span>), dep(n + <span class="number">1</span>, <span class="number">0</span>), ans(n + <span class="number">1</span>, <span class="number">0</span>) &#123;</span> <span class="built_in">iota</span>(parents.<span class="built_in">begin</span>(), parents.<span class="built_in">end</span>(), <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="function">ll <span class="title">find</span><span class="params">(ll x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == parents[x]) <span class="keyword">return</span> x;</span><br><span class="line">        ll px = <span class="built_in">find</span>(parents[x]);</span><br><span class="line">        dep[x]+=dep[parents[x]]; </span><br><span class="line">        <span class="keyword">return</span> parents[x]=px;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// merge b into a</span></span><br><span class="line">        ll pa = <span class="built_in">find</span>(a);</span><br><span class="line">        parents[b] = a;</span><br><span class="line">        dep[b] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="built_in">chmax</span>(ans[pa],ans[b]+dep[b]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(ll x)</span> </span>&#123;<span class="keyword">return</span> ans[x];&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="function">DSU <span class="title">dsu</span><span class="params">(n)</span></span>;</span><br><span class="line">    ll a,b,q;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)&#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        dsu.<span class="built_in">merge</span>(a,b);</span><br><span class="line">        cin &gt;&gt; q;</span><br><span class="line">        cout &lt;&lt; dsu.<span class="built_in">query</span>(q) &lt;&lt; <span class="built_in">Presentation</span>(i,n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>C.Sort4</h1><h2 id="题意-2">题意</h2><p>给定一个长度为 $n$ 的排列 $p$ （即序列中 $1$ ~ $n$ 的每个数恰好出现一次）。<br>每次操作可以选择4个元素，并任意交换它们的位置。<br>求使得排列变为升序的最少操作次数。</p><h2 id="解题思路-2">解题思路</h2><p>把排列看作由 $i\rightarrow p_i$（下标从1开始） 构成的图，这个图中有若干个环，表示这个环中的元素可以通过交换回到原来的位置。</p><p>长度为 $3,4$ 的环，可以通过一次操作还原；<br>长度为 $2$ 的环，可以 $2$ 个环一组通过一次操作还原；<br>长度大于 $4$ 的环，每次操作可以让 $3$ 个元素回到原来的位置，使得环的长度减少 $3$，直到环的长度小于等于 $4$。</p><p>根据这个原则，计算最终答案。</p><h2 id="参考程序-2">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">v</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n) cin &gt;&gt; v[i];</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vis</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    ll ans=<span class="number">0</span>,of=<span class="number">0</span>; <span class="comment">//of:最终长度为2的环的数量</span></span><br><span class="line">    map&lt;ll,ll&gt; mp;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[v[i]]) <span class="keyword">continue</span>;</span><br><span class="line">        ll cnt=<span class="number">1</span>,cur=v[i];</span><br><span class="line">        vis[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=i)&#123;</span><br><span class="line">            vis[cur]=<span class="number">1</span>;</span><br><span class="line">            cur = v[cur];</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt%<span class="number">3</span>==<span class="number">1</span>) ans+=(cnt<span class="number">-1</span>)/<span class="number">3</span>; <span class="comment">//最终长度为4的环</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt%<span class="number">3</span>==<span class="number">2</span>)&#123; <span class="comment">//最终长度为2的环</span></span><br><span class="line">            ans+=(cnt<span class="number">-2</span>)/<span class="number">3</span>;</span><br><span class="line">            of++;</span><br><span class="line">        &#125;<span class="keyword">else</span> ans+=cnt/<span class="number">3</span>; <span class="comment">//最终长度为3的环</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans+(of+<span class="number">1</span>)/<span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>H.Yet Another Origami Problem</h1><h2 id="题意-3">题意</h2><p>给定一个长度为 $n$ 的序列 $a$，每次可以选择一个元素 $a_i$，执行以下操作之一：</p><ol><li>所有原来比 $a_i$ 小的数 $a_j$ ： $a_j=a_i+2(a_i-a_j)$ ，即原来 $a_j$ 比 $a_i$ 小多少，现在就比 $a_i$ 大多少。</li><li>所有原来比 $a_i$ 大的数 $a_j$ ： $a_j=a_i-2(a_j+a_i)$ ，即原来 $a_j$ 比 $a_i$ 大多少，现在就比 $a_i$ 小多少。</li></ol><p>问任意次操作后，序列 $a$ 中最大元素和最小元素之差 $max(a)-min(a)$ 的最小值。</p><h2 id="解题思路-3">解题思路</h2><p>每次操作：</p><ol><li>对序列 $a$ 排序去重，求出差分数组 $d$ 。</li><li>选定次小元素 $a_2$ ，执行操作 $1$ ，使得最小元素 $a_1 = a_2 - d_1$ 变成 $a_1’ = a_2 + d_1$ 。</li></ol><p>假设重新排序去重后，新的 $a_1’$ 相邻的两项为 $a_j,a_{j+1}$ ，步骤1中这两项的差分是 $d_j=a_{j+1}-a_j$ 。<br>那么当 $a_i’$ 插到中间时，新的差分数组的变化如下：</p><ol><li>第1项 $d_1$ 删去（因为 $a_1$ 变成了 $a_1’$ 后移）</li><li>原本的 $d_j$ 被替换为 $d_j’=d_1-\sum\limits_{k=2}^{j-1}d_k$ ，$d’_{j+1}=d_j-d_j’$ 。</li></ol><p>第2点变化可能比较难理解，给出如下例子：</p><ul><li>$a = [1,6,8,10,13,15]$ （原序列排序去重）</li><li>$d = [5,2,2,3,2]$ （差分数组）</li><li>$a_1=1,a_2=6,d_1=5$ （选定次小元素做操作1）</li><li>$a_1’=a_2+d_1=11$</li><li>$a’ = [6,8,10,11,13,15]$ （新序列排序去重，$a_1’$ 位于第4位）</li><li>$d’ = [2,2,1,2,2]$ （新差分数组）</li></ul><p>差分数组的变化：</p><ol><li>第1项 $d_1=5$ 删去</li><li>第4项 $3$ 变为：$d_1-d_2-d_3=1$ 和 $3-1=2$</li></ol><p>这个变化的意义就在于，它证明了任意次操作后的差分数组中的元素，是原差分数组中元素的线性组合，且随着操作次数增加，$\sum d_i$ 逐渐减小，直到 $a$ 仅剩2个元素。<br>线性组合能达到的最小值为 $\gcd\limits_{i=1}^{n-1}d_i$ 。</p><h2 id="参考程序-3">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n;cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">create_vec</span>(v,n);</span><br><span class="line">    <span class="built_in">SORT</span>(v);</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">FORLL</span>(i,<span class="number">1</span>,n<span class="number">-1</span>)</span><br><span class="line">        ans = __gcd(ans,v[i]-v[i<span class="number">-1</span>]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>G.Horse Drink Water</h1><h2 id="题意-4">题意</h2><p>将军饮马问题，将军在第一象限的整点 $(x_0,y_0)$ ，河流由 $x$ 正半轴和 $y$ 正半轴组成。<br>问将军碰到河流再前往 $(x_1,y_1)$ 的最短路径长度。</p><h2 id="解题思路-4">解题思路</h2><p>将起点以 $x$ 轴、 $y$ 轴为对称轴，分别对称到第四、二象限，比较这两个点和终点的距离，取最小值。</p><h2 id="参考程序-4">参考程序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ld xx1,xx2,yy1,yy2;</span><br><span class="line">    cin &gt;&gt; xx1 &gt;&gt; yy1 &gt;&gt; xx2 &gt;&gt; yy2;</span><br><span class="line">    ld ans1,ans2;</span><br><span class="line">    ans1 = <span class="built_in">sqrt</span>((xx1-xx2)*(xx1-xx2)+(yy1+yy2)*(yy1+yy2));</span><br><span class="line">    ans2 = <span class="built_in">sqrt</span>((xx1+xx2)*(xx1+xx2)+(yy1-yy2)*(yy1-yy2));</span><br><span class="line">    <span class="built_in">print_float</span>(<span class="built_in">min</span>(ans1,ans2),<span class="number">10</span>);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>I</h1><p>// TODO</p>]]></content>
    
    
    <summary type="html">题解|2024暑期牛客多校04</summary>
    
    
    
    <category term="算法竞赛" scheme="https://www.cclmsy.cc/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="2024暑期牛客多校" scheme="https://www.cclmsy.cc/tags/2024%E6%9A%91%E6%9C%9F%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
</feed>
